/************************************************************************
 * Conversion On    :   12/14/2022      * Converted By     :   Kranthi
 * Modified On      :   12/14/2022      * Modified By      :   Kranthi
 * **********************************************************************/

#region Using
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Collections;
using System.Web.Configuration;
using Captain.Common.Views.Forms.Base;
using Captain.Common.Utilities;
using Captain.Common.Menus;
using System.Data.SqlClient;
using Captain.Common.Model.Data;
using Captain.Common.Model.Objects;
using Captain.Common.Views.UserControls.Base;
using Captain.Common.Exceptions;
using System.Diagnostics;
using Captain.Common.Views.Forms;
using System.IO;
using System.Linq;
using iTextSharp;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Text.RegularExpressions;
using System.Globalization;
using Wisej.Web;
using DevExpress.DataProcessing.InMemoryDataProcessor;
using DevExpress.DirectX.Common.Direct2D;
using Captain.DatabaseLayer;
using System.Web;
using System.Net.Mail;
using Wisej.Core;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using NPOI.SS.Formula.Functions;
using Spire.Pdf.Exporting.XPS.Schema;
using Captain.Common.Views.Controls.Compatibility;
using DevExpress.XtraRichEdit.Import.Doc;
using DevExpress.CodeParser;
using NPOI.OpenXmlFormats.Dml.Diagram;


//using DevExpress.XtraRichEdit.Model;

#endregion

namespace Captain.Common.Views.Forms
{
    public partial class PrintLetters : Form
    {
        #region private variables

        private ErrorProvider _errorProvider = null;
        private CaptainModel _model = null;
        private string strNameFormat = string.Empty;
        private string strCwFormat = string.Empty;
        private string strYear = "    ";
        private int strIndex = 0;

        #endregion

        public PrintLetters(BaseForm baseForm, PrivilegeEntity privileges, string Form_Name, string eligStatus, List<CASESPMEntity> casespmList, string strServicePlan, string strServiceSeq, string SecSourceName,string primVend,string secVend)
        {
            InitializeComponent();

            BaseForm = baseForm;
            Privileges = privileges;
            FormName = Form_Name;
            EligStatus = eligStatus;
            CASESPM_SP_List = casespmList;
            SecondarySourceName = SecSourceName;
            PrimVendor = primVend; SecondaryVendor = secVend;
            _model = new CaptainModel();


            chkbSend.Checked = false;
            this.Text = "Print Letters";
            lblAppNo.Text = BaseForm.BaseApplicationNo;
            lblName.Text = BaseForm.BaseApplicationName;
            lblEmail.Text = BaseForm.BaseCaseMstListEntity[0].Email.Trim();
            propReportPath = _model.lookupDataAccess.GetReportPath();
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
            if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
            {
                AGYShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
            }

            if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                CEAPCNTL_List = _model.SPAdminData.GetCEAPCNTLData(string.Empty, BaseForm.BaseYear, string.Empty, string.Empty);
            CaseSiteEntity Search_Entity = new CaseSiteEntity(true);
            Search_Entity.SiteAGENCY = BaseForm.BaseAgency;
            Search_Entity.SiteROOM = "0000";
            CASESITEList = _model.CaseMstData.Browse_CASESITE(Search_Entity, "Browse");

            SPMCode = strServicePlan;
            SpmSeq = strServiceSeq;
            Getdata();

            //if(BaseForm.BaseAgencyControlDetails.AgyShortName=="RMPC" || BaseForm.BaseAgencyControlDetails.AgyShortName == "CVCAA" || BaseForm.BaseAgencyControlDetails.AgyShortName == "CCSCT" || BaseForm.BaseAgencyControlDetails.AgyShortName == "WCCAA")
                Get_App_CASEACT_List();

            FillGrid();
            strNameFormat = BaseForm.BaseHierarchyCnFormat.ToString();
            strFolderPath = Consts.Common.ReportFolderLocation + BaseForm.UserID + "\\";


        }

        List<CaseSiteEntity> CASESITEList = new List<CaseSiteEntity>();

        public PrintLetters(BaseForm baseForm, PrivilegeEntity privileges, string Form_Name)
        {
            InitializeComponent();

            BaseForm = baseForm;
            Privileges = privileges;
            FormName = Form_Name;
            //EligStatus = eligStatus;
            //CASESPM_SP_List = casespmList;
            //SecondarySourceName = SecSourceName;
            _model = new CaptainModel();


            chkbSend.Checked = false;
            this.Text = "Print Letters";
            lblAppNo.Text = BaseForm.BaseApplicationNo;
            lblName.Text = BaseForm.BaseApplicationName;
            lblEmail.Text = BaseForm.BaseCaseMstListEntity[0].Email.Trim();
            propReportPath = _model.lookupDataAccess.GetReportPath();
            DataSet dsAgency = Captain.DatabaseLayer.ADMNB001DB.ADMNB001_Browse_AGCYCNTL(BaseForm.BaseAgency, null, null, null, null, null, null);
            if (dsAgency != null && dsAgency.Tables[0].Rows.Count > 0)
            {
                AGYShortName = dsAgency.Tables[0].Rows[0]["ACR_SHORT_NAME"].ToString().Trim();
            }

            if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                CEAPCNTL_List = _model.SPAdminData.GetCEAPCNTLData(string.Empty, BaseForm.BaseYear, string.Empty, string.Empty);

            //SPMCode = strServicePlan;
            //SpmSeq = strServiceSeq;
            Getdata();
            FillGrid();
            strNameFormat = BaseForm.BaseHierarchyCnFormat.ToString();
            strFolderPath = Consts.Common.ReportFolderLocation + BaseForm.UserID + "\\";


        }

        public PrintLetters(BaseForm baseForm, PrivilegeEntity privileges, string Form_Name, string Agency, string Dept, string Program, string Year, string Value)
        {
            InitializeComponent();

            BaseForm = baseForm;
            Privileges = privileges;
            FormName = Form_Name;
            PAgency = Agency; PDept = Dept; PProgram = Program; PYear = Year; PValue = Value;
            _model = new CaptainModel();

            this.Text = "Print Letters";
            lblAppNo.Text = BaseForm.BaseApplicationNo;
            lblName.Text = BaseForm.BaseApplicationName;
            propReportPath = _model.lookupDataAccess.GetReportPath();

            strNameFormat = BaseForm.BaseHierarchyCnFormat.ToString();
            //FillGrid();

            strFolderPath = Consts.Common.ReportFolderLocation + BaseForm.UserID + "\\";

            Getdata();

        }


        #region properties

        public BaseForm BaseForm { get; set; }
        public PrivilegeEntity Privileges { get; set; }
        public string FormName { get; set; }
        public string EligStatus { get; set; }
        public string PAgency { get; set; }
        public string PDept { get; set; }
        public string PProgram { get; set; }
        public string PYear { get; set; }
        public string PValue { get; set; }
        public string AGYShortName { get; set; }
        public string SPMCode { get; set; }
        public string SpmSeq { get; set; }

        public string PrimVendor { get; set; }
        public string SecondaryVendor { get; set; }

        public string SecondarySourceName { get; set; }

        public List<CaseServicesEntity> PropSerViceEntity { get; set; }
        public string propReportPath { get; set; }
        public List<FldcntlHieEntity> preassesCntlEntity { get; set; }
        public List<TMS81ReportEntity> ReportDetails { get; set; }
        public List<AgyTabEntity> AgyList { get; set; }
        public AgyTabEntity AgyMain { get; set; }
        public List<CAMASTEntity> CAMASTList { get; set; }

        public List<CommonEntity> IncomeInterValList { get; set; }

        public List<CASESPMEntity> CASESPM_SP_List { get; set; }

        #endregion
        List<CEAPCNTLEntity> CEAPCNTL_List = new List<CEAPCNTLEntity>();
        List<HierarchyEntity> propCaseworkerList = new List<HierarchyEntity>();
        HierarchyEntity CaseWorker = new HierarchyEntity();
        private void Getdata()
        {
            CaseServicesEntity SearchEntity = new CaseServicesEntity(true);
            //SearchEntity.Agency = BaseForm.BaseAgency;
            //SearchEntity.Dept = BaseForm.BaseDept;
            //SearchEntity.Program = BaseForm.BaseProg;
            //SearchEntity.Application = "ES";
            PropSerViceEntity = _model.CaseMstData.Browse_CASESER(SearchEntity, "Browse");

            propCaseworkerList = _model.CaseMstData.GetCaseWorker("I", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);

            if (propCaseworkerList.Count > 0)
                CaseWorker = propCaseworkerList.Find(u => u.UserID == BaseForm.UserID);

            CAMASTList = _model.SPAdminData.Browse_CAMAST("Code", null, null, null);

            AgyList = _model.Agytab.GetAgyTab(string.Empty);

            Get_Vendor_List();

            //IncomeInterValList = CommonFunctions.AgyTabsFilterCodeStatus(BaseForm.BaseAgyTabsEntity, "S0015", string.Empty, string.Empty, string.Empty, string.Empty);


        }

        List<CASEVDDEntity> CaseVddlist = new List<CASEVDDEntity>();
        private void Get_Vendor_List()
        {
            CASEVDDEntity Search_Entity = new CASEVDDEntity(true);
            CaseVddlist = _model.SPAdminData.Browse_CASEVDD(Search_Entity, "Browse");
        }

        private string Get_Vendor_Name(string VendorNo)
        {
            string Vend_Name = string.Empty;
            foreach (CASEVDDEntity Entity in CaseVddlist)
            {
                if (Entity.Code == VendorNo)
                {
                    Vend_Name = Entity.Name.Trim(); break;
                }
            }

            return Vend_Name;
        }

        private string CaseworkerName(string WorkerCode)
        {
            string Desc = string.Empty;

            if (propCaseworkerList.Count > 0)
            {
                HierarchyEntity WorkerList = propCaseworkerList.Find(u => u.UserID.Trim() == WorkerCode);
                if (WorkerList != null)
                    Desc = WorkerList.HirarchyName.Trim();
                else Desc = WorkerCode;
            }

            return Desc;
        }

        string DEPState = string.Empty;
        private void FillGridT()
        {
            gvApp.Rows.Clear();
            int rowIndex = 0; DEPState = string.Empty;

            if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "PCS" || BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "NCCAA" || BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "FTW" || BaseForm.BaseAgencyControlDetails.AgyShortName == "CSNT" || BaseForm.BaseAgencyControlDetails.AgyShortName == "BVCOG")
            {
                List<LETRHISTCEntity> LetterList = _model.SPAdminData.GetLetrHistData(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear.Trim(), BaseForm.BaseApplicationNo);

                if (LetterList.Count > 0) LetterList = LetterList.OrderByDescending(u => u.DATE_ADD).ThenBy(u => u.LETR_CODE).ToList();

                LETRHISTCEntity LetterHist = new LETRHISTCEntity();
                List<LETRHISTCEntity> SelLetterList = new List<LETRHISTCEntity>();
                string LetDate = string.Empty, LetWorker = string.Empty;

                if (LetterList.Count > 0)
                {
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "1");
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }

                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }


                gvApp.Rows.Add(false, "Eligibilty Letter", LetDate, LetWorker, "1", "");

                LetterHist = null;
                if (LetterList.Count > 0)
                {
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "2");
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }

                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }

                gvApp.Rows.Add(false, "CEAP Priority Rating Form", LetDate, LetWorker, "2", "");

                //Client intake and Alien form
                /******************************************************************************************************************************/
                LetterHist = null;
                if (LetterList.Count > 0)
                {
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "10");
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }

                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }

                gvApp.Rows.Add(false, "Client Intake & SAVE Form", LetDate, LetWorker, "10", "");
                /******************************************************************************************************************************/

            }
            else
            {

                DataSet ds = Captain.DatabaseLayer.MainMenu.GetCaseDepForHierarchy(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
                DataTable casedep = ds.Tables[0];

                List<LETRHISTCEntity> LetterList = _model.SPAdminData.GetLetrHistData(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear.Trim(), BaseForm.BaseApplicationNo);

                if (LetterList.Count > 0) LetterList = LetterList.OrderByDescending(u => u.DATE_ADD).ThenBy(u => u.LETR_CODE).ToList();

                LETRHISTCEntity LetterHist = new LETRHISTCEntity();
                List<LETRHISTCEntity> SelLetterList = new List<LETRHISTCEntity>();
                string LetDate = string.Empty, LetWorker = string.Empty;

                if (casedep.Rows.Count > 0) DEPState = casedep.Rows[0]["DEP_STATE"].ToString().Trim();

                if (LetterList.Count > 0)
                {
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "1");
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }

                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }

                if (EligStatus == "P")
                {
                    gvApp.Rows.Add(true, "Delay-in-eligibility determination", LetDate, LetWorker, "1", "P");
                    rowIndex = 1;
                }
                else
                    gvApp.Rows.Add(false, "Delay-in-eligibility determination", LetDate, LetWorker, "1", "P");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "2").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                if (EligStatus == "E")
                {
                    gvApp.Rows.Add(true, "Eligibility/Denial Notification", LetDate, LetWorker, "2", "E");
                    rowIndex = 2;
                }
                else
                    gvApp.Rows.Add(false, "Eligibility/Denial Notification", LetDate, LetWorker, "2", "E");

                //if (LetterList.Count > 0)
                //{
                //    LetterHist = new LETRHISTCEntity();
                //    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "3").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                //    if (SelLetterList.Count > 0)
                //    {
                //        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                //        LetterHist = SelLetterList[0];
                //    }
                //}
                //if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                //if (EligStatus == "D")
                //{
                //    gvApp.Rows.Add(true, "Denial Notice", LetDate, LetWorker, "3", "D");
                //    rowIndex = 3;
                //}
                //else
                //    gvApp.Rows.Add(false, "Denial Notice", LetDate, LetWorker, "3", "D");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "4").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "Right to Appeal Notice", LetDate, LetWorker, "4", "D");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "5").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "CEAP Benefit fulfillment form", LetDate, LetWorker, "5", "");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "6").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "Client satisfaction survey", LetDate, LetWorker, "6", "");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "7").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "Termination Notification", LetDate, LetWorker, "7", "");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "8").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "CEAP Priority Rating Form", LetDate, LetWorker, "8", "");

                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "9").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "Declaration of Income Statement", LetDate, LetWorker, "9", "");

                if (rowIndex == 1)
                    gvApp.CurrentCell = gvApp.Rows[0].Cells[0];
                else if (rowIndex == 2)
                    gvApp.CurrentCell = gvApp.Rows[1].Cells[0];
                else if (rowIndex == 3)
                    gvApp.CurrentCell = gvApp.Rows[2].Cells[0];



                if (LetterList.Count > 0)
                {
                    LetterHist = new LETRHISTCEntity();
                    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == "10").OrderByDescending(u => u.DATE_ADD.Trim()).ToList();
                    if (SelLetterList.Count > 0)
                    {
                        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                        LetterHist = SelLetterList[0];
                    }
                }
                if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }
                gvApp.Rows.Add(false, "Client Intake & SAVE Form", LetDate, LetWorker, "10", "");

            }

            if (gvApp.Rows.Count > 0)
            {
                gvApp.Rows[RowSelectedIndex].Selected = true;
                gvApp.CurrentCell = gvApp.Rows[RowSelectedIndex].Cells[1];
            }


        }

        private void FillGrid()
        {
            this.gvApp.SelectionChanged -= new System.EventHandler(this.gvApp_SelectionChanged);
            gvApp.Rows.Clear();



            //List<LETRHISTCEntity> LetterList = _model.SPAdminData.GetLetrHistData(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear.Trim(), BaseForm.BaseApplicationNo);

            // if (LetterList.Count > 0) LetterList = LetterList.OrderByDescending(u => u.DATE_ADD).ThenBy(u => u.LETR_CODE).ToList();

            DataSet ds = DatabaseLayer.MainMenu.GET_PRINAPPCNTL(string.Empty, string.Empty, string.Empty, "L");
            DataTable dt1 = ds.Tables[0];

            DataRow[] drAgy = dt1.Select("PAC_AGY='" + BaseForm.BaseAgency + "' AND PAC_ENABLE = 'Y' AND PAC_TYPE='L'");

            if (drAgy.Length == 0)
            {
                drAgy = dt1.Select("PAC_AGY='**' AND PAC_ENABLE = 'Y'");
            }

            //LETRHISTCEntity LetterHist = new LETRHISTCEntity();
            // List<LETRHISTCEntity> SelLetterList = new List<LETRHISTCEntity>();
            string LetDate = string.Empty, LetWorker = string.Empty;
            DataTable dt = AlienTXDB.GET_DOCSIGNHIS(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg,
                    BaseForm.BaseYear, BaseForm.BaseApplicationNo, "", "", "A", "GET");

            int rowIndex = 0; int SelIndex = 0; int rowCnt = 0; string IsSign = string.Empty;
            foreach (DataRow dr in drAgy)
            {
                //LetterHist = new LETRHISTCEntity();
                //if (LetterList.Count > 0)
                //{
                //    SelLetterList = LetterList.FindAll(u => u.LETR_CODE == dr["PAC_FORM"].ToString().Trim());
                //    if (SelLetterList.Count > 0)
                //    {
                //        SelLetterList = SelLetterList.OrderByDescending(u => Convert.ToDateTime(u.DATE_ADD.Trim())).ToList();
                //        LetterHist = SelLetterList[0];
                //    }

                //}
                //if (LetterHist != null) { LetDate = LetterHist.DATE_ADD.Trim(); LetWorker = CaseworkerName(LetterHist.WORKER.Trim()); } else { LetDate = string.Empty; LetWorker = string.Empty; }

                LetDate = "";
                LetWorker = "";
                DataRow[] drLetHis = dt.Select("DCSN_HIS_DOC_CODE='" + dr["PAC_FORM"].ToString().Trim() + "'");
                if (drLetHis.Length > 0)
                {
                    LetDate = drLetHis[0]["DCSN_HIS_LSTC_DATE"].ToString();
                    LetWorker = CaseworkerName(drLetHis[0]["DCSN_HIS_LSTC_OPERATOR"].ToString().Trim());
                }



                if (dr["PAC_SIGN"].ToString() == "Y") IsSign = "Y";

                if (EligStatus == "P" && dr["PAC_FORM"].ToString().Trim() == "1")
                {
                    rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim(), LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                    RowSelectedIndex = rowCnt;
                }
                else if (EligStatus == "P" && dr["PAC_FORM"].ToString().Trim() == "2")
                {
                    rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim(), LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                    RowSelectedIndex = rowCnt;
                }
                else if (dr["PAC_FORM"].ToString().Trim() == "3") //&& (BaseForm.BaseAgencyControlDetails.AgyShortName=="RMPC" || BaseForm.BaseAgencyControlDetails.AgyShortName == "CVCAA" || BaseForm.BaseAgencyControlDetails.AgyShortName == "CCSCT" || BaseForm.BaseAgencyControlDetails.AgyShortName == "WCCAA"))
                {
                    if ((SP_ElectricActivity_Details.Count > 0 || SP_PrimArrears_Details.Count > 0) && (SP_OtherActivity_Details.Count > 0 || SP_SecArrears_Details.Count > 0))
                    {
                        rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim() + "- Primary", LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                        RowSelectedIndex = rowCnt;
                        //rowCnt++;

                        drLetHis = dt.Select("DCSN_HIS_DOC_CODE='" + "4" + "'");
                        if (drLetHis.Length > 0)
                        {
                            LetDate = drLetHis[0]["DCSN_HIS_LSTC_DATE"].ToString();
                            LetWorker = CaseworkerName(drLetHis[0]["DCSN_HIS_LSTC_OPERATOR"].ToString().Trim());
                        }

                        rowIndex = gvApp.Rows.Add(false, dr["PAC_DISP_NAME"].ToString().Trim() + "- Secondary", LetDate, LetWorker, "4", "", dr["PAC_SIGN"].ToString());
                        RowSelectedIndex = rowCnt;

                    }
                    else if (SP_ElectricActivity_Details.Count > 0 || SP_PrimArrears_Details.Count > 0)
                    {
                        rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim() + "- Primary", LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                        RowSelectedIndex = rowCnt;
                        rowCnt++;
                    }
                    else if (SP_OtherActivity_Details.Count > 0 || SP_SecArrears_Details.Count > 0)
                    {
                        drLetHis = dt.Select("DCSN_HIS_DOC_CODE='" + "4" + "'");
                        if (drLetHis.Length > 0)
                        {
                            LetDate = drLetHis[0]["DCSN_HIS_LSTC_DATE"].ToString();
                            LetWorker = CaseworkerName(drLetHis[0]["DCSN_HIS_LSTC_OPERATOR"].ToString().Trim());
                        }

                        rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim() + "- Secondary", LetDate, LetWorker, "4", "", dr["PAC_SIGN"].ToString());
                        RowSelectedIndex = rowCnt;
                        rowCnt++;
                    }
                    else
                    {
                        rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim(), LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                        RowSelectedIndex = rowCnt;
                    }

                    //if ((SP_ElectricActivity_Details.Count > 0 || SP_PrimArrears_Details.Count > 0) && (SP_OtherActivity_Details.Count > 0 || SP_SecArrears_Details.Count > 0))
                    //{
                    //    if ((SP_ElectricActivity_Details.Count > 0 || SP_PrimArrears_Details.Count > 0))
                    //    {
                    //        rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim() + "- Primary", LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                    //        RowSelectedIndex = rowCnt;
                    //        //rowCnt++;
                    //    }
                    //    if ((SP_OtherActivity_Details.Count > 0 || SP_SecArrears_Details.Count > 0))
                    //    {
                    //        drLetHis = dt.Select("DCSN_HIS_DOC_CODE='" + "4" + "'");
                    //        if (drLetHis.Length > 0)
                    //        {
                    //            LetDate = drLetHis[0]["DCSN_HIS_LSTC_DATE"].ToString();
                    //            LetWorker = CaseworkerName(drLetHis[0]["DCSN_HIS_LSTC_OPERATOR"].ToString().Trim());
                    //        }

                    //        rowIndex = gvApp.Rows.Add(false, dr["PAC_DISP_NAME"].ToString().Trim() + "- Secondary", LetDate, LetWorker, "4", "", dr["PAC_SIGN"].ToString());
                    //        RowSelectedIndex = rowCnt;
                    //    }
                    //}
                    //else if ((SP_ElectricActivity_Details.Count > 0 || SP_PrimArrears_Details.Count > 0) && (SP_OtherActivity_Details.Count == 0 && SP_SecArrears_Details.Count == 0))
                    //{
                    //    rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim() + "- Primary", LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                    //    RowSelectedIndex = rowCnt;
                    //    rowCnt++;
                    //}
                    //else if ((SP_ElectricActivity_Details.Count == 0 || SP_PrimArrears_Details.Count == 0) && (SP_OtherActivity_Details.Count > 0 && SP_SecArrears_Details.Count > 0))
                    //{
                    //    drLetHis = dt.Select("DCSN_HIS_DOC_CODE='" + "4" + "'");
                    //    if (drLetHis.Length > 0)
                    //    {
                    //        LetDate = drLetHis[0]["DCSN_HIS_LSTC_DATE"].ToString();
                    //        LetWorker = CaseworkerName(drLetHis[0]["DCSN_HIS_LSTC_OPERATOR"].ToString().Trim());
                    //    }

                    //    rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim() + "- Secondary", LetDate, LetWorker, "4", "", dr["PAC_SIGN"].ToString());
                    //    RowSelectedIndex = rowCnt;
                    //    rowCnt++;
                    //}
                    //else
                    //{
                    //    rowIndex = gvApp.Rows.Add(true, dr["PAC_DISP_NAME"].ToString().Trim(), LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());
                    //    RowSelectedIndex = rowCnt;
                    //}
                }
                else
                    rowIndex = gvApp.Rows.Add(false, dr["PAC_DISP_NAME"].ToString().Trim(), LetDate, LetWorker, dr["PAC_FORM"].ToString().Trim(), "", dr["PAC_SIGN"].ToString());

                rowCnt++;
            }
            this.gvApp.SelectionChanged += new System.EventHandler(this.gvApp_SelectionChanged);
            if (gvApp.Rows.Count > 0)
            {
                gvApp.Rows[SelrowIndex].Selected = true;
                gvApp.CurrentCell = gvApp.Rows[SelrowIndex].Cells[1];

                if (IsSign == "Y" && !string.IsNullOrEmpty(lblEmail.Text.Trim()))
                    chkbSend.Visible = true;
                else
                    chkbSend.Visible = false;

            }

        }

        int RowSelectedIndex = 0; int SelrowIndex = 0;
        private void gvApp_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1)
            {
                RowSelectedIndex = gvApp.SelectedRows[0].Index;
                if (e.ColumnIndex == 0)
                {
                    DataGridView AppGrid = sender as DataGridView;
                    string selectedHIE = AppGrid.SelectedRows[0].Cells["AppDet"].Value.ToString();
                    bool isSelect = false;
                    if (AppGrid.SelectedRows[0].Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True, StringComparison.CurrentCultureIgnoreCase))
                    {
                        isSelect = true;
                    }
                    foreach (DataGridViewRow dr in AppGrid.Rows)
                    {
                        string rowCode = dr.Cells["AppDet"].Value.ToString();
                        if (!rowCode.Equals(selectedHIE))
                        {
                            dr.Cells["Check"].Value = "false";
                            dr.DefaultCellStyle.ForeColor = Color.Black;
                        }
                        else
                        {
                            dr.DefaultCellStyle.ForeColor = Color.Black;
                        }
                    }
                }
            }
        }

        private void gvApp_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            //DataGridView AppGrid = sender as DataGridView;
            //string selectedHIE = AppGrid.SelectedRows[0].Cells["AppDet"].Value.ToString();
            //bool isSelect = false;
            //if (AppGrid.SelectedRows[0].Cells["Check"].Value.ToString().Equals(Consts.YesNoVariants.True, StringComparison.CurrentCultureIgnoreCase))
            //{
            //    isSelect = true;
            //}
            //foreach (DataGridViewRow dr in AppGrid.Rows)
            //{
            //    string rowCode = dr.Cells["AppDet"].Value.ToString();
            //    if (!rowCode.Equals(selectedHIE))
            //    {
            //        dr.Cells["Check"].Value = "false";
            //        dr.DefaultCellStyle.ForeColor = Color.Black;
            //    }
            //    else
            //    {
            //        dr.DefaultCellStyle.ForeColor = Color.Black;
            //    }
            //}

        }

        private void button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnPrev_Click(object sender, EventArgs e)
        {
            if (gvApp.Rows.Count > 0)
            {
                SelrowIndex = gvApp.CurrentRow.Index;

                if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "PCS")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    if(!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                                    {
                                        if(int.Parse(BaseForm.BaseYear)<2025)
                                            On_EligLetterNew();
                                        else
                                            On_PCSEligLetter2025();
                                    }
                                    
                                    // SavePrintRecord();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            if (BaseForm.BaseYear == "2022")
                                On_PCS_PriorityRankingForm2022();
                            else if (BaseForm.BaseYear == "2023")
                                On_PCS_PriorityRankingForm2023();
                            else //if (BaseForm.BaseYear == "2024")
                                On_PCS_PriorityRankingForm();
                            // SavePrintRecord();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "CACOST")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {

                                    CACOST_EligLetter_ENG();

                                    //HCCAA_EligLetter();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    CACOST_InEligLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_CACOST_PriorityRankingForm();
                            SavePrintRecord();
                            FillGrid();
                            break;
                        case "3":
                            Notice_of_Payment();
                            FillGrid();
                            break;
                        case "4":
                            Notice_of_Payment();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "RMPC")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    RPMC_Elig_Letter();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }
                            break;
                        case "2":
                            On_RPMC_PriorityRankingForm();
                            FillGrid();
                            break;
                        case "3":
                            Notice_of_Payment();//On_RPMC_NoticeofPaymentForm();
                            FillGrid();
                            break;
                        case "4":
                            Notice_of_Payment();//On_RPMC_NoticeofPaymentForm();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "NCCAA")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    On_NCCAAEligLetterNew();
                                    //On_FORTWORTHEligLetterNew();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_NCCAA_PriorityRankingForm();
                            SavePrintRecord();
                            FillGrid();
                            break;

                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "HCCAA")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    HCCAA_EligLetter();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_HCCAA_PriorityRankingForm();
                            SavePrintRecord();
                            FillGrid();
                            break;
                        case "3":
                            Notice_of_Payment();
                            FillGrid();
                            break;
                        case "4":
                            Notice_of_Payment();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "WCCAA")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    WCCAA_EligLetter_ENG();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    WCCAA_InEligLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_WCCAA_PriorityRankingForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                        case "3":
                            Notice_of_Payment();
                            FillGrid();
                            break;
                        case "4":
                            Notice_of_Payment();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "FTW")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    //NCCAA_RFP();
                                    On_FORTWORTHEligLetterNew();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_Fortworth_PriorityRankingForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;

                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "CVCAA")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    ////NCCAA_RFP();
                                    //On_FORTWORTHEligLetterNew();
                                    CVCAA_EligLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_CVCAA_PriorityRankingForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                        case "3":
                            Notice_of_Payment();//On_RPMC_NoticeofPaymentForm();
                            FillGrid();
                            break;
                        case "4":
                            Notice_of_Payment();//On_RPMC_NoticeofPaymentForm();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "CCSCT")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    CCSCT_EligLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    //SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_CCSCT_PriorityRankingForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                        case "3":
                            Notice_of_Payment();//On_RPMC_NoticeofPaymentForm();
                            FillGrid();
                            break;
                        case "4":
                            Notice_of_Payment();//On_RPMC_NoticeofPaymentForm();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else if (BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "CSNT" || BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper() == "BVCOG")
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {
                        case "1":
                            if (CASESPM_SP_List.Count > 0)
                            {
                                CASESPM_SP_List = CASESPM_SP_List.FindAll(u => u.SPM_EligStatus != string.Empty);

                                if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "P")
                                {
                                    CommonFunctions.MessageBoxDisplay("Letter will not be printed for the Pending Status.");
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "E"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "M"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "S"
                                         || CASESPM_SP_List[0].SPM_EligStatus.Trim() == "N")    // Elig Letter prints only for the Eligible,SSI categorical and Means Tested Statuses - 08/04/2022
                                {
                                    On_CSNTEligLetter();
                                    //On_FORTWORTHEligLetterNew();
                                    // SavePrintRecord();
                                    FillGrid();
                                }
                                else if (CASESPM_SP_List[0].SPM_EligStatus.Trim() == "D")
                                {
                                    On_PCS_DeniedLetter();
                                    // SavePrintRecord();
                                    FillGrid();
                                }
                            }
                            else
                            {
                                CommonFunctions.MessageBoxDisplay("Elig Record not existed so Pdf file is not generated.");
                            }

                            break;
                        case "2":
                            On_CSNT_PriorityRankingForm();
                            // SavePrintRecord();
                            FillGrid();
                            break;
                        case "10":
                            On_ClientIntake_AlienForm();
                            //SavePrintRecord();
                            FillGrid();
                            break;
                    }
                }
                else
                {
                    switch (gvApp.CurrentRow.Cells["gvCode"].Value.ToString())
                    {

                        case "1": On_Delay_Eligibility(); break;
                        case "2":
                            if (EligStatus == "Eligible")
                            {
                                On_EligLetterNew();

                            }
                            else if (EligStatus == "Denied") On_Denial_Notice();
                            else if (EligStatus == "Pending") CommonFunctions.MessageBoxDisplay("Eligibility Status is Pending so Pdf file is not generated.");
                            break;
                        //case "3": if (EligStatus == "Denied") On_Denial_Notice(); break;
                        case "4": On_Right_Appeal(); break;
                        case "5": if (BaseForm.BaseCaseMstListEntity[0].Language.Trim() == "01") On_Benefit_Fullfilment_English(); else On_Benefit_Fullfilment_Spanish(); break;
                        case "6": if (BaseForm.BaseCaseMstListEntity[0].Language.Trim() == "01") On_Client_Satisfaction_Survey_English(); else On_Client_Satisfaction_Survey_Spanish(); break;
                        case "7": On_Termination_Notice(); break;
                        case "8": On_CEAP_PriorityRankingForm(); break;
                        case "9": On_DIS(); break;
                        case "10": On_ClientIntake_AlienForm(); break;
                    }
                    //SavePrintRecord();
                    FillGrid();
                }
            }
            

            //gvApp.Rows[SelrowIndex].Selected = true;
            //gvApp.CurrentCell = gvApp.Rows[SelrowIndex].Cells[1];

        }

        //Vikash added on 10/17/2024 for Eligibility of Payment point in RPMC document
        private void On_RPMC_NoticeofPaymentForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            if (BaseForm.BaseAgencyControlDetails.AgyShortName == "RMPC")
            {
                ReaderName = propReportPath + "\\" + "RPMC_Notice_Vend_Pmt.pdf";
                PdfName = "RPMC_Notice_Vend_Pmt";
            }
            else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "CVCAA")
            {
                ReaderName = propReportPath + "\\" + "CVCAA_Notice_Vend_Pmt.pdf";
                PdfName = "CVCAA_Notice_Vend_Pmt";
            }

            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}

            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);

                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TblFontBoldd = new iTextSharp.text.Font(bf_times, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {
                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;

                    string MailAddress = string.Empty;
                    string MailAddress1 = string.Empty;

                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;

                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                        HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                        Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                    Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                        Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                        Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                        Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                    string zipplus = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                    {
                        if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                            zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                    }
                    AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                    AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;

                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";

                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            MailAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            MailAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                            zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }
                            MailAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            MailAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        MailAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        MailAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 60;
                    Y_Pos = 664;

                    //Vendor Details
                    string strAccountNumber = string.Empty;
                    string strVendorName = string.Empty;
                    string Add1 = string.Empty;
                    string Add2 = string.Empty;
                    string Add3 = string.Empty,VddCity=string.Empty,VddState=string.Empty,VddZip=string.Empty;
                    string VendBillName = string.Empty;
                    decimal PrimFundAmt = 0, ArrFundAmt = 0, CrisisFundAmt = 0;
                    if (SP_ElectricActivity_Details.Count > 0 && gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3")
                    {
                        strAccountNumber = string.Empty;
                        strVendorName = string.Empty;
                        Add1 = string.Empty;
                        Add2 = string.Empty;
                        Add3 = string.Empty;
                        VendBillName = string.Empty;

                        List<CASEACTEntity> SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No== SP_ElectricActivity_Details[0].Vendor_No);
                        //decimal PrimFundAmt = 0,ArrFundAmt=0, CrisisFundAmt = 0;
                        if (SelCaseact.Count > 0)
                        {
                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_PRIM_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_PRIM_CA.Trim()));
                            if(SelCaseact.Count>0)
                                PrimFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_ElectricActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_ARR_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_ARR_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                ArrFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_ElectricActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_HC_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_HC_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                CrisisFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                        }

                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strVendorName = vddname.Name;
                                Add1 = vddname.Addr1;
                                Add2 = vddname.Addr2;
                                Add3 = vddname.Addr3;
                                VddCity = vddname.City; VddState = vddname.State; VddZip = vddname.Zip;
                                VendBillName = vddname.FName + " " + vddname.LName;
                            }
                        }
                    }

                    if (SP_OtherActivity_Details.Count > 0 && (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "4" || (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3" && SP_ElectricActivity_Details.Count==0)))
                    {
                        strAccountNumber = string.Empty;
                        strVendorName = string.Empty;
                        Add1 = string.Empty;
                        Add2 = string.Empty;
                        Add3 = string.Empty;
                        VendBillName = string.Empty;

                        List<CASEACTEntity> SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No);
                        
                        if (SelCaseact.Count > 0)
                        {
                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_PRIM_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_PRIM_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                PrimFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_ARR_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_ARR_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                ArrFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_HC_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_HC_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                CrisisFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                        }

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strVendorName = vddname.Name;
                                Add1 = vddname.Addr1;
                                Add2 = vddname.Addr2;
                                Add3 = vddname.Addr3;
                                VddCity = vddname.City; VddState = vddname.State; VddZip = vddname.Zip;
                                VendBillName = vddname.FName + " " + vddname.LName;
                            }
                        }
                    }

                    X_Pos = 120;
                    Y_Pos -= 17;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    if(CASESPM_SP_List.Count>0)
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(CASESPM_SP_List[0].startdate.Trim()), TblFontBold), 490, Y_Pos-1, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Add1, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    if (!string.IsNullOrEmpty(Add2.Trim()))
                    {
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Add2, TblFontBold), X_Pos, Y_Pos, 0);
                    }
                    else if (!string.IsNullOrEmpty(Add3.Trim()))
                    {
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Add3, TblFontBold), X_Pos, Y_Pos, 0);
                    }
                    else if (string.IsNullOrEmpty(Add3.Trim()) && string.IsNullOrEmpty(Add2.Trim()))
                    {
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VddCity.Trim()+","+VddState.Trim()+" "+VddZip.Trim(), TblFontBold), X_Pos, Y_Pos, 0);
                    }

                    Y_Pos -= 15;
                    if(!string.IsNullOrEmpty(Add3.Trim()) && !string.IsNullOrEmpty(Add2.Trim()))
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Add3, TblFontBold), X_Pos, Y_Pos, 0);
                    else if (string.IsNullOrEmpty(Add3.Trim()) && !string.IsNullOrEmpty(Add2.Trim()))
                    {
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VddCity.Trim() + "," + VddState.Trim() + " " + VddZip.Trim(), TblFontBold), X_Pos, Y_Pos, 0);
                    }

                    if (!string.IsNullOrEmpty(Add3.Trim()) && !string.IsNullOrEmpty(Add2.Trim()))
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VddCity.Trim() + "," + VddState.Trim() + " " + VddZip.Trim(), TblFontBold), X_Pos, Y_Pos, 0);

                    //Household ID
                    Y_Pos -= 99;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);

                    //Client Name
                    Y_Pos -= 18;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    //Mailing Address
                    Y_Pos -= 18;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(MailAddress, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 420;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 120;
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(MailAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 420;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //Account Name & Account#
                    X_Pos = 120;
                    Y_Pos -= 79;
                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3")
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Bill_FName + " " + CASESPM_SP_List[0].SPM_Bill_LName, TblFontBold), X_Pos, Y_Pos, 0);
                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "4")
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Bill_FName + " " + CASESPM_SP_List[0].SPM_Gas_Bill_LName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    //added amounts 
                    Y_Pos -= 20; X_Pos = 35;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("A payment for $"+ArrFundAmt.ToString() +" for past due invoice(s) will be made in behalf of the client.", TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("A payment of $"+PrimFundAmt.ToString() +" for Regular Utility Assistance will be made in behalf of the client.", TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("An additional crisis payment will be made for $"+CrisisFundAmt.ToString()+".", TblFontBold), X_Pos, Y_Pos, 0);



                }
                catch (Exception ex) { }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }

        }

        private void On_ClientIntake_AlienForm()
        {
            if (BaseForm.BaseAgencyControlDetails.State == "TX" || BaseForm.BaseAgencyControlDetails.State == "IN")
            {
                if (BaseForm.BaseAgencyControlDetails.TXAlienSwitch == "Y")
                {
                    string SentApp = "N";
                    if (chkbSend.Checked) SentApp = "Y";

                    AlienForm objForm = new AlienForm(BaseForm, Privileges, BaseForm.BaseApplicationNo, SentApp);
                    objForm.FormClosed += new FormClosedEventHandler(ObjForm_FormClosed);
                    objForm.StartPosition = FormStartPosition.CenterScreen;
                    objForm.ShowDialog();
                }
            }
        }


        private void ObjForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            AlienForm form = sender as AlienForm;
            if (form.DialogResult == DialogResult.OK)
            {
                //SignPDFGeneration oSignPDFGeneration = new SignPDFGeneration(Privileges,BaseForm.BaseAgyTabsEntity, BaseForm.BaseCaseMstListEntity, BaseForm.BaseCaseSnpEntity,
                //    BaseForm.BaseAgencyControlDetails, BaseForm.UserProfile,BaseForm.BaseApplicationNo, BaseForm.BaseApplicationName,BaseForm.UserID, BaseForm.BaseAgency,
                //    BaseForm.BaseDept,BaseForm.BaseProg,BaseForm.BaseYear, BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper(),chkbSend.Checked,"","PL"); //PL - Print Letters
                //oSignPDFGeneration.PrintAlienFormPDF();

                string _docCode = gvApp.CurrentRow.Cells["gvCode"].Value.ToString();
                string _isSignReqired = gvApp.CurrentRow.Cells["gvSign"].Value.ToString();
                SignPDFGeneration oSignPDFGeneration = new SignPDFGeneration(BaseForm.UserID, BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg,
                    BaseForm.BaseYear, BaseForm.BaseApplicationNo, BaseForm.BaseApplicationName, BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper(), chkbSend.Checked, "",
                    "PL", _docCode, _isSignReqired, "", BaseForm.BaseAgencyControlDetails.AgyName); //PL - Print Letters
                oSignPDFGeneration.PrintAlienFormPDF();
            }
        }





        public string GetIncomeIntervalDesc(string Interval)
        {
            string Desc = string.Empty;

            if (IncomeInterValList.Count > 0)
            {

                CommonEntity IncInterval = IncomeInterValList.Find(u => u.Code.Trim().Equals(Interval.Trim()));

                if (IncInterval != null) Desc = IncInterval.Desc.Trim();

            }

            return Desc;
        }
        private void On_Delay_Eligibility()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "Delay_in_Eligibility_Determination.pdf";



            PdfName = "Delay_in_Eligibility_Determination";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 150; Y_Pos = 692;

                TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName.ToLower()), TableFont), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                X_Pos = 250; Y_Pos = Y_Pos - 25;
                string Phone = string.Empty;
                MaskedTextBox mskPhn = new MaskedTextBox();
                mskPhn.Mask = "(000)000-0000";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Area.Trim()) || !string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Phone.Trim()))
                {
                    mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                    Phone = mskPhn.Text.Trim();
                }
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Phone, TableFont), X_Pos, Y_Pos, 0);

                if (BaseForm.BaseCaseMstListEntity[0].Language == "01")
                {
                    X_Pos = 280; Y_Pos = 153;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.AddDays(10).ToShortDateString(), TblFontBold), X_Pos, Y_Pos, 0);
                }
                else
                {
                    X_Pos = 430; Y_Pos = 128;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.AddDays(10).ToShortDateString(), TblFontItalic), X_Pos, Y_Pos, 0);
                }

                X_Pos = 60; Y_Pos = 63;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(LookupDataAccess.GetMemberName(BaseForm.UserProfile.FirstName.Trim(), BaseForm.UserProfile.MI.Trim(), BaseForm.UserProfile.LastName.Trim(), "3")), TableFont), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 210, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();
            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Eligibility_Notification()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "Eligibility_Notification.pdf";



            PdfName = "Eligibility_Notification";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 80; Y_Pos = 682;

                TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName.ToLower()), TableFont), X_Pos, Y_Pos, 0);

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TableFont), X_Pos + 280, Y_Pos, 0);

                string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty; string strDirection = string.Empty;
                string Zip = string.Empty;
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                    Apt = "Apt  " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "   ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                    Floor = "Flr  " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim() + "   ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim()))
                    Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                    Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim();
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                    HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";

                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                    strDirection = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";


                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zip.Trim()) && BaseForm.BaseCaseMstListEntity[0].Zip != "0")
                    Zip = "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim();
                string Comma = string.Empty;
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()) && (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()) || !string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim())))
                    Comma = ", ";

                string Address = HN + strDirection+ Street + Suffix + Comma + Apt + Floor + ", " + BaseForm.BaseCaseMstListEntity[0].City.Trim() + ", " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip;

                string VendorName = string.Empty;
                if (CASESPM_SP_List.Count > 0)
                {
                    if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                        VendorName = Get_Vendor_Name(CASESPM_SP_List[0].SPM_Vendor.Trim());
                }


                Y_Pos = Y_Pos - 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((HN +strDirection+ Street + Suffix).ToLower()), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos = Y_Pos - 15;
                if (!string.IsNullOrEmpty(Apt.Trim()) || !string.IsNullOrEmpty(Floor.Trim()))
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((Apt + Floor).ToLower()), TableFont), X_Pos, Y_Pos, 0);

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VendorName, TableFont), X_Pos + 280, Y_Pos, 0);

                    Y_Pos = Y_Pos - 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((BaseForm.BaseCaseMstListEntity[0].City.Trim() + ", " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip).ToLower()), TableFont), X_Pos, Y_Pos, 0);



                }
                else
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((BaseForm.BaseCaseMstListEntity[0].City.Trim() + ", " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip).ToLower()), TableFont), X_Pos, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VendorName, TableFont), X_Pos + 280, Y_Pos, 0);
                }
                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Denial_Notice()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "Denial_Notice.pdf";



            PdfName = "Denial_Notice";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Consts.Icons.ico_Tick);
            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 80; Y_Pos = 682;

                PrintAddress(TableFont, cb);

                string VendorName = string.Empty;
                if (CASESPM_SP_List.Count > 0)
                {
                    if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                        VendorName = Get_Vendor_Name(CASESPM_SP_List[0].SPM_Vendor.Trim());
                }

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VendorName, TableFont), X_Pos + 280, Y_Pos, 0);

                //TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName), TableFont), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

                X_Pos = 40; Y_Pos = 175;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase((LookupDataAccess.GetMemberName(BaseForm.UserProfile.FirstName.Trim(), BaseForm.UserProfile.MI.Trim(), BaseForm.UserProfile.LastName.Trim(), "3")), TableFont), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 445, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Right_Appeal()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "Right_to_Appeal.pdf";



            PdfName = "Right_to_Appeal";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 150; Y_Pos = 692;

                //TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName), TableFont), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Benefit_Fullfilment_English()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "CEAP_Benefit_Fulfillment_Eng.pdf";



            PdfName = "CEAP_Benefit_Fulfillment";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 135; Y_Pos = 552;

                TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName.ToLower()), TableFont), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                X_Pos = 395; Y_Pos = 387;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseYear, TableFont), X_Pos, Y_Pos, 0);

                //byte[] data = Hreader.GetPageContent(1);
                //string xyz = PdfEncodings.ConvertToString(data, PdfObject.TEXT_PDFDOCENCODING);
                //string abc = xyz.Replace("2017", BaseForm.BaseYear);
                //Hreader.SetPageContent(1, PdfEncodings.ConvertToBytes(abc, PdfObject.TEXT_PDFDOCENCODING));


                //PdfDictionary dict = Hreader.GetPageN(1);
                //PdfObject obj = dict.GetDirectObject(iTextSharp.text.pdf.PdfName.CONTENTS);

                //PRStream stream = (PRStream)obj;
                //byte[] data = PdfReader.GetStreamBytes(stream);
                //string dd = new string(System.Text.Encoding.UTF8.GetString(data).ToCharArray());
                //dd = dd.Replace("2017", BaseForm.BaseYear);
                //stream.SetData(System.Text.Encoding.UTF8.GetBytes(dd));

                //var form = Hstamper.AcroFields;
                //var fieldKeys = form.Fields.Keys;
                //foreach (string fieldKey in fieldKeys)
                //{
                //    var value = Hreader.AcroFields.GetField(fieldKey);
                //    form.SetField(fieldKey, value.Replace("2017", BaseForm.BaseYear));
                //}

                //// Textfeld unbearbeitbar machen (sieht aus wie normaler text)
                //Hstamper.FormFlattening = true;



                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

                Y_Pos = 130; X_Pos = 55;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(LookupDataAccess.GetMemberName(BaseForm.UserProfile.FirstName.Trim(), BaseForm.UserProfile.MI.Trim(), BaseForm.UserProfile.LastName.Trim(), "3")), TableFont), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 320, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Benefit_Fullfilment_Spanish()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "CEAP_Benefit_Fulfillment_Spa.pdf";



            PdfName = "CEAP_Benefit_Fulfillment";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 175; Y_Pos = 552;

                TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName.ToLower()), TableFont), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

                Y_Pos = 130; X_Pos = 55;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(LookupDataAccess.GetMemberName(BaseForm.UserProfile.FirstName.Trim(), BaseForm.UserProfile.MI.Trim(), BaseForm.UserProfile.LastName.Trim(), "3")), TableFont), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 320, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Client_Satisfaction_Survey_English()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "Client_Satisfaction_Survey_Eng.pdf";



            PdfName = "Client_Satisfaction_Survey";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 510; Y_Pos = 57;

                int pageCount = Hreader.NumberOfPages;
                for (int i = 1; i <= pageCount; i++)
                {
                    if (i == 2)
                    {
                        cb = Hstamper.GetOverContent(i);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TableFont), X_Pos, Y_Pos, 0);
                    }
                }

                ////TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName), TableFont), X_Pos, Y_Pos, 0);
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                //    //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //    //MaskedTextBox mskPhn = new MaskedTextBox();
                //    //mskPhn.Mask = "(000)000-0000";
                //    //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Client_Satisfaction_Survey_Spanish()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "Client_Satisfaction_Survey_Spa.pdf";



            PdfName = "Client_Satisfaction_Survey";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 500; Y_Pos = 53;

                int pageCount = Hreader.NumberOfPages;
                for (int i = 1; i <= pageCount; i++)
                {
                    if (i == 2)
                    {
                        cb = Hstamper.GetOverContent(i);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TableFont), X_Pos, Y_Pos, 0);
                    }
                }

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_Termination_Notice()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "Termination_Notification.pdf";



            PdfName = "Termination_Notification";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 150; Y_Pos = 692;

                PrintAddress(TableFont, cb);
                string VendorName = string.Empty;
                if (CASESPM_SP_List.Count > 0)
                {
                    if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                        VendorName = Get_Vendor_Name(CASESPM_SP_List[0].SPM_Vendor.Trim());
                }

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(VendorName, TableFont), X_Pos + 280, Y_Pos, 0);

                //TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName), TableFont), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

                X_Pos = 40; Y_Pos = 218;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase((LookupDataAccess.GetMemberName(BaseForm.UserProfile.FirstName.Trim(), BaseForm.UserProfile.MI.Trim(), BaseForm.UserProfile.LastName.Trim(), "3")), TableFont), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 445, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void On_CEAP_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "CEAP_Priority_Rating.pdf";



            PdfName = "CEAP_Priority_Rating";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 150; Y_Pos -= 90;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 500;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0)
                {
                    inteldercount = 4;
                }
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0)
                {
                    intyoungercount = 4;
                }
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0)
                {
                    intdisablecount = 4;
                }
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0; int intsenvtyfive = 0; int inttwentyfive = 0; int inttwentytofifty = 0; int intfiftyone = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 10;
                    intfity = 10;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 7;
                    intsenvtyfive = 7;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 125)
                {
                    inttotalcount = inttotalcount + 3;
                    inttwentyfive = 3;
                }
                else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 1;
                    inttwentytofifty = 1;
                }
                else if (intmstpoverty <= 151)
                {

                    intfiftyone = 0;
                }

                int intExceedYes = 0; int intExceedNo = 0;
                if (doublesertotal > 1000)
                {
                    inttotalcount = inttotalcount + 4;
                    intExceedYes = 4;
                }
                else
                {
                    inttotalcount = inttotalcount + 1;
                    intExceedNo = 1;
                }


                int intthirty = 0; int inttwenty = 0; int inteleven = 0; int intsix = 0; int intfive = 0;
                if (doubleTotalAmount == 0 || doublesertotal == 0)
                {
                    if (doubleTotalAmount == 0)
                    {
                        inttotalcount = inttotalcount + 12;
                        intthirty = 12;
                    }
                    else
                        intfive = 0;
                }
                else
                {

                    if (totaldive >= 30)
                    {
                        inttotalcount = inttotalcount + 12;
                        intthirty = 12;
                    }
                    else if (totaldive >= 20 && totaldive <= 29.99)
                    {
                        inttotalcount = inttotalcount + 9;
                        inttwenty = 9;
                    }
                    else if (totaldive >= 11 && totaldive <= 19.99)
                    {
                        inttotalcount = inttotalcount + 6;
                        inteleven = 6;
                    }
                    else if (totaldive >= 6 && totaldive <= 10.99)
                    {
                        inttotalcount = inttotalcount + 3;
                        intsix = 3;
                    }
                    else if (totaldive <= 5.99)
                    {
                        if (doubleTotalAmount == 0 || doublesertotal == 0)
                        {
                            intfive = 0;
                        }
                        else
                        {
                            inttotalcount = inttotalcount + 1;
                            intfive = 1;
                        }
                    }
                }

                X_Pos = 535;
                Y_Pos -= 45;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 42;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 65; Y_Pos -= 45;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doublesertotal.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 200;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doubleTotalAmount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 400;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(totaldive.ToString().ToUpper() == "NAN" ? string.Empty : totaldive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 535;
                Y_Pos -= 37;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwenty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inteleven.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsix.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 40;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intExceedYes.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intExceedNo.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 30;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                if (inttotalcount >= 17)
                {
                    X_Pos = 40;
                    Y_Pos -= 30;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 11 && inttotalcount <= 16)
                {
                    X_Pos = 40;
                    Y_Pos -= 66;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 10)
                {
                    X_Pos = 40;
                    Y_Pos -= 93;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }


                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }

        }

        private void On_DIS()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
            ReaderName = propReportPath + "\\" + "DIS.pdf";



            PdfName = "Declaration_of_Income";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);

            try
            {
                X_Pos = 150; Y_Pos = 692;

                //TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName), TableFont), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

                //X_Pos = 250; Y_Pos = Y_Pos - 25;
                //MaskedTextBox mskPhn = new MaskedTextBox();
                //mskPhn.Mask = "(000)000-0000";
                //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

            }
            catch (Exception ex) { }


            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }


        }

        private void PrintAddress(iTextSharp.text.Font TableFont, PdfContentByte cb)
        {
            X_Pos = 80; Y_Pos = 682;

            TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName.ToLower()), TableFont), X_Pos, Y_Pos, 0);

            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TableFont), X_Pos + 280, Y_Pos, 0);

            string Apt = string.Empty; string Floor = string.Empty; string HN = string.Empty; string Suffix = string.Empty; string Street = string.Empty; string strDirection = string.Empty;
            string Zip = string.Empty;
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                Apt = "Apt  " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "   ";
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                Floor = "Flr  " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim() + "   ";
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim()))
                Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim();
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";

            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                strDirection = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";


            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zip.Trim()) && BaseForm.BaseCaseMstListEntity[0].Zip != "0")
                Zip = "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim();
            string Comma = string.Empty;
            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()) && (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()) || !string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim())))
                Comma = ", ";

            string Address = HN + Street + strDirection+ Suffix + Comma + Apt + Floor + ", " + BaseForm.BaseCaseMstListEntity[0].City.Trim() + ", " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip;


            Y_Pos = Y_Pos - 15;
            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((HN + strDirection+ Street + Suffix).ToLower()), TableFont), X_Pos, Y_Pos, 0);

            Y_Pos = Y_Pos - 15;
            if (!string.IsNullOrEmpty(Apt.Trim()) || !string.IsNullOrEmpty(Floor.Trim()))
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((Apt + Floor).ToLower()), TableFont), X_Pos, Y_Pos, 0);

                Y_Pos = Y_Pos - 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((BaseForm.BaseCaseMstListEntity[0].City.Trim() + ", " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip).ToLower()), TableFont), X_Pos, Y_Pos, 0);
            }
            else
            {
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase((BaseForm.BaseCaseMstListEntity[0].City.Trim() + ", " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + " " + Zip).ToLower()), TableFont), X_Pos, Y_Pos, 0);
            }
        }

        private void SavePrintRecord()
        {
            //LETRHISTCEntity Entity = new LETRHISTCEntity();
            //string Msg = string.Empty;
            //Entity.AGENCY = BaseForm.BaseAgency;
            //Entity.DEPT = BaseForm.BaseDept;
            //Entity.PROGRAM = BaseForm.BaseProg;
            //Entity.YEAR = BaseForm.BaseYear;
            //Entity.APPNO = BaseForm.BaseApplicationNo;
            //Entity.LETR_CODE = gvApp.CurrentRow.Cells["gvCode"].Value.ToString();
            //Entity.DATE = DateTime.Now.ToShortDateString();
            //Entity.SEQ = "1";

            //if (CaseWorker != null)
            //    Entity.WORKER = CaseWorker.CaseWorker.Trim();
            //Entity.ADD_OPERATOR = BaseForm.UserID;

            //_model.SPAdminData.InsertLETRHIST(Entity, out Msg);
        }

        PdfContentByte cb;
        int X_Pos, Y_Pos;
        string strFolderPath = string.Empty;
        string Random_Filename = null; string PdfName = "Pdf File";


        private void On_Delete_PDF_File(object sender, FormClosedEventArgs e)
        {
            System.IO.File.Delete(PdfName);
        }

        private void SetLine()
        {
            cb.SetLineWidth(2f);
            cb.SetLineCap(5);
            cb.MoveTo(X_Pos, Y_Pos);
            cb.LineTo(780, Y_Pos);
            cb.Stroke();
        }

        DataTable dtIncome = new DataTable();
        private string Get_IncomeType_Desc(string Type_Code)
        {
            string Income_Desc = string.Empty;
            foreach (DataRow drIncome in dtIncome.Rows)
            {
                if (Type_Code == drIncome["Code"].ToString().Trim())
                {
                    Income_Desc = drIncome["LookUpDesc"].ToString().Trim(); break;
                }
            }

            return Income_Desc;
        }

        DataTable dtCaseSNP = new DataTable();
        //private string Get_Member_Name(string Mem_Seq, string NameFormat)
        //{
        //    string Member_NAme = string.Empty;
        //    foreach (DataRow drCaseSnp in dtCaseSNP.Rows)
        //    {
        //        if (Mem_Seq == drCaseSnp["SNP_FAMILY_SEQ"].ToString().Trim())
        //        {
        //            if (NameFormat == "First")
        //            {
        //                Member_NAme = drCaseSnp["SNP_NAME_IX_FI"].ToString().Trim(); break;
        //            }
        //            else
        //                Member_NAme = LookupDataAccess.GetMemberName(drCaseSnp["SNP_NAME_IX_FI"].ToString().Trim(), drCaseSnp["SNP_NAME_IX_MI"].ToString().Trim(), drCaseSnp["SNP_NAME_IX_LAST"].ToString().Trim(), strNameFormat) + "  "; break;
        //        }
        //    }

        //    return Member_NAme;
        //}



        //int pageNumber = 1;
        //private void CheckBottomBorderReached(Document document, PdfWriter writer)
        //{
        //    if (Y_Pos <= 20)
        //    {
        //        cb.EndText();
        //        //cb.BeginText();
        //        //Y_Pos = 07;
        //        //X_Pos = 20;
        //        //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES).BaseFont, 12);
        //        //cb.SetCMYKColorFill(0, 0, 0, 255);
        //        ////PrintRec(DateTime.Now.ToLocalTime().ToString(), 130);
        //        //Y_Pos = 07;
        //        //X_Pos = 550;
        //        //PrintRec("Page:", 28);
        //        //PrintRec(pageNumber.ToString(), 15);
        //        //cb.EndText();

        //        document.NewPage();
        //        pageNumber = writer.PageNumber - 1;

        //        //cb.BeginText();

        //        //X_Pos = 50;
        //        //Y_Pos -= 5;

        //        //cb.EndText();

        //        Y_Pos = 770;
        //        X_Pos = 40;                                                           //modified

        //        cb.BeginText();

        //    }
        //}

        //private void CheckBottomBorderReachedLetterHead(PdfStamper Hstamper)
        //{
        //    if (Y_Pos <= 20)
        //    {
        //        cb.EndText();
        //        //cb.BeginText();
        //        //Y_Pos = 07;
        //        //X_Pos = 20;
        //        //cb.SetFontAndSize(FontFactory.GetFont(FontFactory.TIMES).BaseFont, 12);
        //        //cb.SetCMYKColorFill(0, 0, 0, 255);
        //        ////PrintRec(DateTime.Now.ToLocalTime().ToString(), 130);
        //        //Y_Pos = 07;
        //        //X_Pos = 550;
        //        //PrintRec("Page:", 28);
        //        //PrintRec(pageNumber.ToString(), 15);
        //        //cb.EndText();
        //        Document document = new Document(PageSize.A4, 25, 25, 30, 30);
        //        ////document.SetPageSize(new iTextSharp.text.Rectangle(iTextSharp.text.PageSize.A4.Width, iTextSharp.text.PageSize.A4.Height));

        //        document.NewPage();
        //        //pageNumber = Hstamper.PageNumber - 1;

        //        //cb.BeginText();

        //        //X_Pos = 50;
        //        //Y_Pos -= 5;

        //        //cb.EndText();

        //        Y_Pos = 770;
        //        X_Pos = 90;                                                           //modified

        //        cb.BeginText();

        //    }
        //}



        //private void PrintSpaceCell(PdfPTable table, int Spacesnum, iTextSharp.text.Font TableFont, float Height)
        //{
        //    if (Spacesnum == 1)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 2)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 2;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 3)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 3;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 4)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 4;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 6)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 6;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 7)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 7;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 10)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 10;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 15)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 15;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //    else if (Spacesnum == 12)
        //    {
        //        PdfPCell S2 = new PdfPCell(new Phrase("", TableFont));
        //        S2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        S2.Colspan = 12;
        //        if (Height > 0)
        //            S2.FixedHeight = Height;
        //        S2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        table.AddCell(S2);
        //    }
        //}

        //public string GetDaySuffix(int day)
        //{
        //    switch (day)
        //    {
        //        case 1:
        //        case 21:
        //        case 31:
        //            return "st";
        //        case 2:
        //        case 22:
        //            return "nd";
        //        case 3:
        //        case 23:
        //            return "rd";
        //        default:
        //            return "th";
        //    }
        //}

        //public string HumanisedDate(string date1)
        //{
        //    DateTime date = Convert.ToDateTime(date1.Trim());

        //    string ordinal;

        //    switch (date.Day)
        //    {
        //        case 1:
        //        case 21:
        //        case 31:
        //            ordinal = "st";
        //            break;
        //        case 2:
        //        case 22:
        //            ordinal = "nd";
        //            break;
        //        case 3:
        //        case 23:
        //            ordinal = "rd";
        //            break;
        //        default:
        //            ordinal = "th";
        //            break;
        //    }

        //    return string.Format("{0:MMMM dd}{1} ", date, ordinal);
        //}

        //private string SetLeadingZeros(string TmpSeq)
        //{
        //    int Seq_len = TmpSeq.Trim().Length;
        //    string TmpCode = null;
        //    TmpCode = TmpSeq.ToString().Trim();
        //    switch (Seq_len)
        //    {
        //        case 8: TmpCode = "0" + TmpCode; break;
        //        case 7: TmpCode = "00" + TmpCode; break;
        //        case 6: TmpCode = "000" + TmpCode; break;
        //        case 5: TmpCode = "0000" + TmpCode; break;
        //        case 4: TmpCode = "00000" + TmpCode; break;
        //        case 3: TmpCode = "000000" + TmpCode; break;
        //        case 2: TmpCode = "0000000" + TmpCode; break;
        //        case 1: TmpCode = "00000000" + TmpCode; break;
        //            //default: MessageBox.Show("Table Code should not be blank", "CAP Systems", MessageBoxButtons.OK);  TxtCode.Focus();
        //            //    break;
        //    }
        //    return (TmpCode);
        //}

        private void btnHistory_Click(object sender, EventArgs e)
        {
            LetterHistory letterHist = new LetterHistory(BaseForm, Privileges, "CASE0016", string.Empty);
            letterHist.StartPosition = FormStartPosition.CenterScreen;
            letterHist.ShowDialog();
        }

        //public string GetIncomeIntervalDesc(string Interval)
        //{
        //    string Desc = string.Empty;

        //    if (IncomeInterValList.Count > 0)
        //    {
        //        CommonEntity IncInterval = IncomeInterValList.Find(u => u.Code.Trim().Equals(Interval.Trim()));

        //        if (IncInterval != null) Desc = IncInterval.Desc.Trim();

        //    }

        //    return Desc;
        //}


        //private void On_Shrinkpage()
        //{
        //    Random_Filename = null;

        //    string ReaderName = string.Empty;

        //    //if(BaseForm.BaseCaseMstListEntity[0].Language.Trim()=="01")
        //    ReaderName = propReportPath + "\\" + "Client_Satisfaction_Survey_Eng.pdf";



        //    PdfName = "Client_Satisfaction_Survey";//form.GetFileName();
        //    //PdfName = strFolderPath + PdfName;
        //    PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
        //    try
        //    {
        //        if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
        //        { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
        //    }
        //    catch (Exception ex)
        //    {
        //        CommonFunctions.MessageBoxDisplay("Error");
        //    }

        //    try
        //    {
        //        string Tmpstr = PdfName + ".pdf";
        //        if (File.Exists(Tmpstr))
        //            File.Delete(Tmpstr);
        //    }
        //    catch (Exception ex)
        //    {
        //        int length = 8;
        //        string newFileName = System.Guid.NewGuid().ToString();
        //        newFileName = newFileName.Replace("-", string.Empty);

        //        Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
        //    }

        //    if (!string.IsNullOrEmpty(Random_Filename))
        //        PdfName = Random_Filename;
        //    else
        //        PdfName += ".pdf";

        //    //PdfReader Hreader = new PdfReader(ReaderName);

        //    //PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
        //    //Hstamper.Writer.SetPageSize(PageSize.A5);
        //    //PdfContentByte cb = Hstamper.GetOverContent(1);


        //    BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        //    iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
        //    BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
        //    iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
        //    BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

        //    iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
        //    iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
        //    iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
        //    iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
        //    iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
        //    iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
        //    iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
        //    iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

        //    iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
        //    // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

        //    _image_Tick.ScalePercent(60f);

        //    try
        //    {
        //        X_Pos = 500; Y_Pos = 60;

        //        AddwhiteSpaceinPage(ReaderName, PdfName, TableFont);


        //        //int page = 1;
        //        //float factor = .9f;
        //        //shrink(Hstamper, page, factor);

        //        ////Hreader.SetPageContent(1, Hreader.GetPageContent(1), PdfStream.BEST_COMPRESSION);

        //        //iTextSharp.text.Rectangle box = Hreader.GetCropBox(page);
        //        //box.Top = box.Top - factor * box.Height;

        //        //PdfContentByte cb = Hstamper.GetOverContent(page);
        //        //cb.SetColorFill(BaseColor.YELLOW);
        //        //cb.SetColorStroke(BaseColor.RED);
        //        //cb.Rectangle(box.Left, box.Bottom, box.Width, box.Height);
        //        //cb.FillStroke();
        //        //cb.SetColorFill(BaseColor.BLACK);

        //        //ColumnText ct = new ColumnText(cb);

        //        //ct.AddElement(new Paragraph("This is some text added to the front page of the front page of this document."));

        //        //ct.SetSimpleColumn(box.Left, box.Bottom, box.Width, box.Height);
        //        //ct.Go();



        //        //int pageCount = Hreader.NumberOfPages;
        //        //for (int i = 1; i <= pageCount; i++)
        //        //{
        //        //    if(i==2)
        //        //    {
        //        //        cb = Hstamper.GetOverContent(i);
        //        //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TableFont), X_Pos, Y_Pos, 0);
        //        //    }
        //        //}

        //        ////TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

        //        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ti.ToTitleCase(BaseForm.BaseApplicationName), TableFont), X_Pos, Y_Pos, 0);
        //        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(DateTime.Now.ToShortDateString(), TableFont), X_Pos + 300, Y_Pos, 0);

        //        //    //X_Pos = 250; Y_Pos = Y_Pos - 25;
        //        //    //MaskedTextBox mskPhn = new MaskedTextBox();
        //        //    //mskPhn.Mask = "(000)000-0000";
        //        //    //mskPhn.Text = BaseForm.BaseCaseMstListEntity[0].Area.Trim() + BaseForm.BaseCaseMstListEntity[0].Phone.Trim();
        //        //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(mskPhn.Text, TableFont), X_Pos, Y_Pos, 0);

        //    }
        //    catch (Exception ex) { }


        //    //Hstamper.Close();

        //    if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
        //    {
        //        PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
        //        objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
        //        objfrm.StartPosition = FormStartPosition.CenterScreen;
        //        objfrm.ShowDialog();
        //    }
        //    else
        //    {
        //        FrmViewer objfrm = new FrmViewer(PdfName);
        //        objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
        //        objfrm.StartPosition = FormStartPosition.CenterScreen;
        //        objfrm.ShowDialog();
        //    }


        //}


        //public void shrink(PdfStamper stamper, int page, float factor)
        //{
        //    iTextSharp.text.Rectangle crop = stamper.Reader.GetCropBox(page);
        //    float diffX = crop.Right * (1 - factor);
        //    float diffY = crop.Top * (1 - factor);
        //    PdfDictionary pageN = stamper.Reader.GetPageN(page);
        //    //stamper.MarkUsed(pageN);
        //    PdfArray ar = null;
        //    //PdfObject content = PdfReader.GetPdfObject(pageN.Get(PdfName.CONTENTS), pageN);
        //    //if (content == null)
        //    //    return;
        //    //if (content.IsArray())
        //    //{
        //    //    ar = new PdfArray((PdfArray)content);
        //    //    pageN.Put(PdfName.CONTENTS, ar);
        //    //}
        //    //else if (content.IsStream())
        //    //{
        //    //    ar = new PdfArray();
        //    //    ar.Add(pageN.Get(PdfName.CONTENTS));
        //    //    pageN.Put(PdfName.CONTENTS, ar);
        //    //}
        //    //else
        //    //    return;
        //    ByteBuffer out_p = new ByteBuffer();
        //    out_p.Append(factor).Append(" 0 0 ").Append(factor).Append(' ').Append(diffX).Append(' ').Append(diffY).Append(" cm ");
        //    PdfStream stream = new PdfStream(out_p.ToByteArray());
        //    ar.AddFirst(stamper.Writer.AddToBody(stream).IndirectReference);
        //    out_p.Reset();
        //}

        private void AddwhiteSpaceinPage(string inputFile, string outputFile, iTextSharp.text.Font TableFont)
        {
            try
            {
                var inputPdf = new PdfReader(inputFile);   // Get input document

                int pageCount = inputPdf.NumberOfPages;

                //if (end < start || end > pageCount)
                //    end = pageCount;

                var inputDoc = new Document(inputPdf.GetPageSize(1)); //GetPageSizeWithRotation

                using (var fs = new FileStream(outputFile, FileMode.Create))
                {
                    var outputWriter = PdfWriter.GetInstance(inputDoc, fs);
                    inputDoc.Open();

                    PdfContentByte cb1 = outputWriter.DirectContent;

                    // Copy pages from input to output document
                    for (int i = 1; i <= pageCount; i++)
                    {
                        var existingRec = inputPdf.GetPageSize(i);
                        var newRec = new iTextSharp.text.Rectangle(0.0f, 0.0f, existingRec.Width, existingRec.Height);
                        if (i == 1)
                            newRec = new iTextSharp.text.Rectangle(0.0f, 0.0f, existingRec.Width, existingRec.Height + 100);

                        inputDoc.SetPageSize(newRec);
                        inputDoc.NewPage();

                        PdfImportedPage page = outputWriter.GetImportedPage(inputPdf, i);
                        int rotation = inputPdf.GetPageRotation(i);

                        if (rotation == 90 || rotation == 270)
                        {
                            cb1.AddTemplate(page, 0, -1f, 1f, 0, 0, inputPdf.GetPageSize(i).Height);
                        }
                        else
                        {
                            cb1.AddTemplate(page, 1f, 0, 0, 1f, 0, 13);
                        }

                        ColumnText.ShowTextAligned(cb1, PdfContentByte.ALIGN_LEFT, new Phrase("Sudheer", TableFont), 50, 870, 0);
                        ColumnText.ShowTextAligned(cb1, PdfContentByte.ALIGN_LEFT, new Phrase("Sudheer", TableFont), 50, 855, 0);
                    }

                    inputDoc.Close();
                }
            }
            catch
            {
            }
        }

        #region PCS Priority Sheet Form

        private void On_PCS_PriorityRankingForm2022()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "PCS_Priority_Ranking_2022.pdf";



            PdfName = "PCS_Priority_Sheet";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 100; Y_Pos -= 140;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 280;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                int inteldercount = 0;//casesnpElder.Count * 3;
                if (casesnpElder.Count > 0) inteldercount = 3;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0; //casesnpyounger.Count * 3;
                if (casesnpyounger.Count > 0) intyoungercount = 3;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0; //casesnpdisable.Count * 3;
                if (casesnpdisable.Count > 0) intdisablecount = 3;
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 5;
                    intfity = 5;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 4;
                    intsenvtyfive = 4;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 3;
                    intonefiftyfive = 3;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal > 1000)
                {
                    inttotalcount = inttotalcount + 5;
                    int1000plus = 5;
                }
                else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                {
                    inttotalcount = inttotalcount + 4;
                    int500above = 4;
                }
                else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                {
                    inttotalcount = inttotalcount + 3;
                    int250above = 3;
                }
                else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                {
                    inttotalcount = inttotalcount + 2;
                    int250below = 2;
                }



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                if (doubleTotalAmount == 0 || doublesertotal == 0)
                {
                    if (doubleTotalAmount == 0)
                    {
                        inttotalcount = inttotalcount + 8;
                        intthirty = 8;
                    }
                    else
                        intfive = 0;
                }
                else
                {

                    if (totaldive >= 30)
                    {
                        inttotalcount = inttotalcount + 8;
                        intthirty = 8;
                    }
                    else if (totaldive >= 17 && totaldive <= 29.99)
                    {
                        inttotalcount = inttotalcount + 7;
                        intseventto29 = 7;
                    }
                    else if (totaldive >= 11 && totaldive <= 16.99)
                    {
                        inttotalcount = inttotalcount + 6;
                        intelevento16 = 6;
                    }
                    else if (totaldive >= 6 && totaldive <= 10.99)
                    {
                        inttotalcount = inttotalcount + 2;
                        intsixtoten = 2;
                    }
                    else if (totaldive <= 5.99)
                    {
                        //if (doubleTotalAmount == 0 || doublesertotal == 0)
                        if (doublesertotal == 0)
                        {
                            intfive = 0;

                        }
                        else
                        {
                            inttotalcount = inttotalcount + 1;
                            intfive = 1;
                        }
                    }
                }

                X_Pos = 510;
                Y_Pos -= 58;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 510;
                Y_Pos -= 45;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Consumption Rate

                X_Pos = 510;
                Y_Pos -= 44;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 510;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                Y_Pos -= 40;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0".ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 36;
                X_Pos = 510;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 60;
                if (inttotalcount >= 20)
                {
                    X_Pos = 40;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 11 && inttotalcount <= 19)
                {
                    X_Pos = 205;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 10)
                {
                    X_Pos = 370;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            /** SEND EMAIL **/
            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }

        }

        private void On_PCS_PriorityRankingForm2023()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "PCS_Priority_Ranking_2023.pdf";



            PdfName = "PCS_Priority_Sheet";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 10, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 100; Y_Pos -= 140;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 280;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                //List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 4;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 4;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 4;
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 4;
                    intfity = 4;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 3;
                    intsenvtyfive = 3;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 2;
                    intonefiftyfive = 2;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 4;
                    int1000plus = 4;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                //if (doubleTotalAmount == 0 || doublesertotal == 0)
                //{
                //    if (doubleTotalAmount == 0)
                //    {
                //        inttotalcount = inttotalcount + 8;
                //        intthirty = 8;
                //    }
                //    else
                //        intfive = 0;
                //}
                //else
                {

                    if (totaldive >= 11)
                    {
                        inttotalcount = inttotalcount + 5;
                        intthirty = 5;
                    }
                    //else if (totaldive >= 17 && totaldive <= 29.99)
                    //{
                    //    inttotalcount = inttotalcount + 7;
                    //    intseventto29 = 7;
                    //}
                    //else if (totaldive >= 11 && totaldive <= 16.99)
                    //{
                    //    inttotalcount = inttotalcount + 6;
                    //    intelevento16 = 6;
                    //}
                    //else if (totaldive >= 6 && totaldive <= 10.99)
                    //{
                    //    inttotalcount = inttotalcount + 2;
                    //    intsixtoten = 2;
                    //}
                    //else if (totaldive <= 5.99)
                    //{
                    //    if (doubleTotalAmount == 0 || doublesertotal == 0)
                    //    {
                    //        intfive = 0;

                    //    }
                    //    else
                    //    {
                    //        inttotalcount = inttotalcount + 1;
                    //        intfive = 1;
                    //    }
                    //}
                }

                X_Pos = 510;
                Y_Pos -= 58;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 510;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Consumption Rate

                X_Pos = 510;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 510;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty; string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi; dob = SnpEntity.AltBdate.Trim();
                }


                //DataSet ds = Captain.DatabaseLayer.MainMenu.MainMenuSearch("ALS", "ALL", string.Empty, string.Empty, string.Empty, string.Empty, Fname, string.Empty,
                //              string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, dob, BaseForm.UserID, string.Empty, string.Empty);
                //int FirstTime = 0;
                //if(ds.Tables[0].Rows.Count>0)
                //{
                //    if(ds.Tables[0].Rows.Count==1) FirstTime = 3;

                //    //foreach(DataRow dr in ds.Tables[0].Rows)
                //    //{
                //    //    if(dr["Agency"].ToString()!=BaseForm.BaseAgency && dr["Dept"].ToString() != BaseForm.BaseDept && dr["Prog"].ToString() != BaseForm.BaseProg && dr["SnpYear"].ToString() != BaseForm.BaseYear)
                //    //    {
                //    //        FirstTime = 3;
                //    //        break;
                //    //    }
                //    //}
                //}


                Y_Pos -= 42;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 36;
                X_Pos = 510;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 60;
                if (inttotalcount >= 20)
                {
                    X_Pos = 40;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 11 && inttotalcount <= 19)
                {
                    X_Pos = 205;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 10)
                {
                    X_Pos = 370;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();
            /** SEND EMAIL **/
            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        private void On_PCS_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;


            if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                ReaderName = propReportPath + "\\" + "PCS_Priority_Ranking_" + BaseForm.BaseYear + ".pdf";
            else
                ReaderName = propReportPath + "\\" + "PCS_Priority_Ranking_" + DateTime.Now.Year.ToString() + ".pdf";



            PdfName = "PCS_Priority_Sheet";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 10, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            //if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
            //    CEAPCNTL_List = _model.SPAdminData.GetCEAPCNTLData(string.Empty, BaseForm.BaseYear, string.Empty, string.Empty);

            List<AddCustEntity> propADDCUST = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            propADDCUST = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");

            List<CEAPINVEntity> CEAPINVs = new List<CEAPINVEntity>();
            if (CEAPCNTL_List.Count > 0)
                CEAPINVs = _model.SPAdminData.GetCEAPINVData(CEAPCNTL_List[0].CPCT_CODE, CEAPCNTL_List[0].CPCT_YEAR, "GET");

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 100; Y_Pos -= 140;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 280;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                //List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 4;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 4;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 4;
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 4;
                    intfity = 4;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 3;
                    intsenvtyfive = 3;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 2;
                    intonefiftyfive = 2;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 4;
                    int1000plus = 4;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                //if (doubleTotalAmount == 0 || doublesertotal == 0)
                //{
                //    if (doubleTotalAmount == 0)
                //    {
                //        inttotalcount = inttotalcount + 8;
                //        intthirty = 8;
                //    }
                //    else
                //        intfive = 0;
                //}
                //else
                {

                    if (totaldive >= 11)
                    {
                        inttotalcount = inttotalcount + 5;
                        intthirty = 5;
                    }
                    //else if (totaldive >= 17 && totaldive <= 29.99)
                    //{
                    //    inttotalcount = inttotalcount + 7;
                    //    intseventto29 = 7;
                    //}
                    //else if (totaldive >= 11 && totaldive <= 16.99)
                    //{
                    //    inttotalcount = inttotalcount + 6;
                    //    intelevento16 = 6;
                    //}
                    //else if (totaldive >= 6 && totaldive <= 10.99)
                    //{
                    //    inttotalcount = inttotalcount + 2;
                    //    intsixtoten = 2;
                    //}
                    //else if (totaldive <= 5.99)
                    //{
                    //    if (doubleTotalAmount == 0 || doublesertotal == 0)
                    //    {
                    //        intfive = 0;

                    //    }
                    //    else
                    //    {
                    //        inttotalcount = inttotalcount + 1;
                    //        intfive = 1;
                    //    }
                    //}
                }

                X_Pos = 525;
                Y_Pos -= 48;//58;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 525;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Consumption Rate

                X_Pos = 525;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 525;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty; string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi; dob = SnpEntity.AltBdate.Trim();
                }


                //DataSet ds = Captain.DatabaseLayer.MainMenu.MainMenuSearch("ALS", "ALL", string.Empty, string.Empty, string.Empty, string.Empty, Fname, string.Empty,
                //              string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, dob, BaseForm.UserID, string.Empty, string.Empty);
                //int FirstTime = 0;
                //if(ds.Tables[0].Rows.Count>0)
                //{
                //    if(ds.Tables[0].Rows.Count==1) FirstTime = 3;

                //    //foreach(DataRow dr in ds.Tables[0].Rows)
                //    //{
                //    //    if(dr["Agency"].ToString()!=BaseForm.BaseAgency && dr["Dept"].ToString() != BaseForm.BaseDept && dr["Prog"].ToString() != BaseForm.BaseProg && dr["SnpYear"].ToString() != BaseForm.BaseYear)
                //    //    {
                //    //        FirstTime = 3;
                //    //        break;
                //    //    }
                //    //}
                //}
                int FirstApp = 0; int ECMS = 0;
                if (propADDCUST.Count > 0)
                {
                    AddCustEntity CusEnt = propADDCUST.Find(u => u.ACTCODE == "C01667" && u.ACTSNPFAMILYSEQ == "9999999");
                    if (CusEnt != null)
                    {
                        if (CusEnt.ACTMULTRESP.Trim() == "Y") { FirstApp = 3; inttotalcount = inttotalcount + FirstApp; }
                    }

                    AddCustEntity CusEnt1 = propADDCUST.Find(u => u.ACTCODE == "C01668" && u.ACTSNPFAMILYSEQ == "9999999");
                    if (CusEnt1 != null)
                    {
                        if (CusEnt1.ACTMULTRESP.Trim() == "Y") { ECMS = 3; inttotalcount = inttotalcount + ECMS; }
                    }

                }


                Y_Pos -= 42;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(FirstApp.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(ECMS.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 36;
                X_Pos = 525;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 60;

                if (CEAPINVs.Count > 0)
                {
                    CEAPINVEntity entity = CEAPINVs.Find(u => u.CPINV_PRIORTY == "1");
                    if (entity != null)
                    {
                        X_Pos = 200;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_LOW.ToString() + "-" + entity.CPINV_HIGH.ToString() + " Points", TableFont), X_Pos, Y_Pos - 7, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_MAX_INV.ToString(), Times), 191, Y_Pos - 20, 0);

                        if (int.Parse(entity.CPINV_LOW) <= inttotalcount && int.Parse(entity.CPINV_HIGH) >= inttotalcount)
                        {
                            _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                            cb.AddImage(_image_Tick);
                        }

                    }
                    entity = CEAPINVs.Find(u => u.CPINV_PRIORTY == "2");
                    if (entity != null)
                    {
                        Y_Pos -= 33;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_LOW.ToString() + "-" + entity.CPINV_HIGH.ToString() + " Points", TableFont), X_Pos, Y_Pos - 7, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_MAX_INV.ToString(), Times), 192, Y_Pos - 18, 0);

                        if (int.Parse(entity.CPINV_LOW) <= inttotalcount && int.Parse(entity.CPINV_HIGH) >= inttotalcount)
                        {
                            _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                            cb.AddImage(_image_Tick);
                        }

                    }
                    entity = CEAPINVs.Find(u => u.CPINV_PRIORTY == "3");
                    if (entity != null)
                    {
                        Y_Pos -= 33;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_LOW.ToString() + "-" + entity.CPINV_HIGH.ToString() + " Points", TableFont), X_Pos, Y_Pos - 7, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_MAX_INV.ToString(), Times), 192, Y_Pos - 18, 0);

                        if (int.Parse(entity.CPINV_LOW) <= inttotalcount && int.Parse(entity.CPINV_HIGH) >= inttotalcount)
                        {
                            _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                            cb.AddImage(_image_Tick);
                        }
                    }
                }
                else
                {
                    X_Pos = 200;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("20-31 Points", TableFont), X_Pos, Y_Pos - 7, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("12", Times), 191, Y_Pos - 20, 0);

                    if (inttotalcount >= 20)
                    {
                        _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                        cb.AddImage(_image_Tick);
                    }

                    Y_Pos -= 33;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("11-19 Points", TableFont), X_Pos, Y_Pos - 7, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("8", Times), 192, Y_Pos - 20, 0);

                    if (inttotalcount >= 11 && inttotalcount <= 19)
                    {
                        _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                        cb.AddImage(_image_Tick);
                    }

                    Y_Pos -= 33;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0-10 Points", TableFont), X_Pos, Y_Pos - 7, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("6", Times), 192, Y_Pos - 20, 0);

                    if (inttotalcount <= 10)
                    {
                        _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                        cb.AddImage(_image_Tick);
                    }

                }


                //if (inttotalcount >= 20)
                //{
                //    X_Pos = 40;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 15);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount >= 11 && inttotalcount <= 19)
                //{
                //    X_Pos = 40;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 15);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount <= 10)
                //{
                //    X_Pos = 370;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                //    cb.AddImage(_image_Tick);
                //}

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            /** SEND EMAIL **/
            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }


        #region WCCAA Priority Sheet Form

        private void On_WCCAA_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "WCCAA_Priority.pdf";



            PdfName = "WCCAA_Priority_Sheet";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);

            

            try
            {
                X_Pos = 30; Y_Pos = 760;

                Y_Pos -= 116; X_Pos = 110;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 110; Y_Pos -= 22;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 460;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].FamilyId, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                int inteldercount = 0;//casesnpElder.Count * 3;
                if (casesnpElder.Count > 0) inteldercount = 6;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0; //casesnpyounger.Count * 3;
                if (casesnpyounger.Count > 0) intyoungercount = 6;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0; //casesnpdisable.Count * 3;
                if (casesnpdisable.Count > 0) intdisablecount = 6;
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 0;
                }
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;int intmore150 = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 4;
                    intfity = 4;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 3;
                    intsenvtyfive = 3;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 2;
                    intonefiftyfive = 2;
                }
                else if(intmstpoverty>150)
                {
                    inttotalcount = inttotalcount + 0;
                    intmore150 = 0;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal > 1000)
                {
                    inttotalcount = inttotalcount + 6;
                    int1000plus = 6;
                }
                else if (doublesertotal >= 600 && doublesertotal <= 999.99)
                {
                    inttotalcount = inttotalcount + 5;
                    int500above = 5;
                }
                else if (doublesertotal >= 200 && doublesertotal <= 599.99)
                {
                    inttotalcount = inttotalcount + 4;
                    int250above = 4;
                }
                else if (doublesertotal >= 0 && doublesertotal <= 199.99)
                {
                    inttotalcount = inttotalcount + 3;
                    int250below = 3;
                }



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                if (doubleTotalAmount == 0 || doublesertotal == 0)
                {
                    if (doubleTotalAmount == 0)
                    {
                        inttotalcount = inttotalcount + 8;
                        intthirty = 8;
                    }
                    else
                        intfive = 0;
                }
                else
                {

                    if (totaldive >= 30)
                    {
                        inttotalcount = inttotalcount + 9;
                        intthirty = 9;
                    }
                    else if (totaldive >= 20 && totaldive <= 29.99)
                    {
                        inttotalcount = inttotalcount + 8;
                        intseventto29 = 8;
                    }
                    else if (totaldive >= 11 && totaldive <= 19.99)
                    {
                        inttotalcount = inttotalcount + 7;
                        intelevento16 = 7;
                    }
                    else if (totaldive >= 1 && totaldive <= 10.99)
                    {
                        inttotalcount = inttotalcount + 3;
                        intsixtoten = 3;
                    }
                    //else if (totaldive <= 5.99)
                    //{
                    //    //if (doubleTotalAmount == 0 || doublesertotal == 0)
                    //    if (doublesertotal == 0)
                    //    {
                    //        intfive = 0;

                    //    }
                    //    else
                    //    {
                    //        inttotalcount = inttotalcount + 1;
                    //        intfive = 1;
                    //    }
                    //}
                }

                X_Pos = 540;
                Y_Pos -= 42;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 16;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 16;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 16;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                int HOHparttimeemployment = 0;int HOHUnemp = 0; int RecSS = 0; int zeroinc = 0;
                CaseSnpEntity SnpApplicant = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                if (SnpApplicant != null)
                {
                    if (SnpApplicant.WorkStatus.Trim() == "B")
                    { HOHparttimeemployment = 6; inttotalcount = inttotalcount + 6; }
                    if (SnpApplicant.WorkStatus.Trim() == "D" || SnpApplicant.WorkStatus.Trim() == "E" || SnpApplicant.WorkStatus.Trim() == "F")
                    { HOHUnemp = 6; inttotalcount = inttotalcount + 6; }
                    List<CaseIncomeEntity> caseIncomeList = _model.CaseMstData.GetCaseIncomeadpynf(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                    if(caseIncomeList.Count>0)
                    {
                        CaseIncomeEntity SnpInc = caseIncomeList.Find(u => u.Type == "C" || u.Type == "D");
                        if (SnpInc != null) { RecSS = 6; inttotalcount = inttotalcount + 6; }
                    }
                    //if (SnpApplicant.SnpIncomeTypes.Trim().Contains('C') || SnpApplicant.SnpIncomeTypes.Trim().Contains('D'))
                    //{ RecSS = 6; inttotalcount = inttotalcount + 6; }
                    
                }
                

                if (BaseForm.BaseCaseMstListEntity[0].ProgIncome.Trim() == "0.00")
                { zeroinc = 6; inttotalcount = inttotalcount + 6; }


                X_Pos = 540;
                Y_Pos -= 45;
                //HOH Part-Time Employment 
                
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(HOHparttimeemployment.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //HOH Receives SS/SSI Benefits 
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(RecSS.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //HOH Unemployed 
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(HOHUnemp.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Household Member Receives Means Tested Veterans Program Payments 
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(0.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Zero Income for Household 
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(zeroinc.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Poverty 

                X_Pos = 540;
                Y_Pos -= 48;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(0.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Consumption Rate

                X_Pos = 540;
                Y_Pos -= 44;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 540;
                Y_Pos -= 50;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 15;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                //Y_Pos -= 40;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0".ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 38;
                X_Pos = 540;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 21; X_Pos = 540;
                if (inttotalcount >= 15)
                {
                    X_Pos = 540;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("1".ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    //_image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    //cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 10 && inttotalcount <= 14)
                {
                    //X_Pos = 205;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("2".ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    //_image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    //cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 9)
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("3".ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    //X_Pos = 370;
                    //_image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    //cb.AddImage(_image_Tick);
                }

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            /** SEND EMAIL **/
            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }

        }

        #endregion


        #endregion

        #region NCCAA Priority Sheet Form

        private void On_NCCAA_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "NCCAA_Priority_Rating.pdf";



            PdfName = "NCCAA_Priority_Rating";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 100; Y_Pos -= 138;//105;

                int inttotalcount = 0;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("App# ", TblFontBold), X_Pos - 50, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 550;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Name: " + BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                //List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 5;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 5;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 5;
                inttotalcount = inttotalcount + intdisablecount;

                List<CaseSnpEntity> casesnpvetran = casesnpEligbulity.FindAll(u => u.MilitaryStatus.ToString().ToUpper() == "V" && u.Status == "A");
                int intVetCount = 0;
                if (casesnpvetran.Count > 0) intVetCount = 5;
                inttotalcount = inttotalcount + intVetCount;

                //int intNoneabove = 0;
                //if (inttotalcount == 0)
                //{
                //    inttotalcount = inttotalcount + intNoneabove;
                //    intNoneabove = 1;
                //}
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 5;
                    intfity = 5;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 5;
                    intsenvtyfive = 5;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 5;
                    intonefiftyfive = 5;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal > 1000)
                {
                    inttotalcount = inttotalcount + 5;
                    int1000plus = 5;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                if (doubleTotalAmount == 0 || doublesertotal == 0)
                {
                    //if (doubleTotalAmount == 0)
                    //{
                    //    inttotalcount = inttotalcount + 8;
                    //    intthirty = 8;
                    //}
                    //else
                    //    intfive = 0;
                }
                else
                {

                    ////if (totaldive >= 30)
                    ////{
                    ////    inttotalcount = inttotalcount + 8;
                    ////    intthirty = 8;
                    ////}
                    ////else if (totaldive >= 17 && totaldive <= 29.99)
                    ////{
                    ////    inttotalcount = inttotalcount + 7;
                    ////    intseventto29 = 7;
                    ////}
                    //if (totaldive >= 11) //&& totaldive <= 16.99
                    //{
                    //    inttotalcount = inttotalcount + 6;
                    //    intelevento16 = 6;
                    //}
                    ////else if (totaldive >= 6 && totaldive <= 10.99)
                    ////{
                    ////    inttotalcount = inttotalcount + 2;
                    ////    intsixtoten = 2;
                    ////}
                    ////else if (totaldive <= 5.99)
                    ////{
                    ////    if (doubleTotalAmount == 0 || doublesertotal == 0)
                    ////    {
                    ////        intfive = 0;

                    ////    }
                    ////    else
                    ////    {
                    ////        inttotalcount = inttotalcount + 1;
                    ////        intfive = 1;
                    ////    }
                    ////}
                }

                X_Pos = 510;
                Y_Pos -= 74;//58;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 24;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 25;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intVetCount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


             //   // Energy Burden

             //   X_Pos = 510;
             //   Y_Pos -= 36;
             //   //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
             //   //Y_Pos -= 14;
             //   //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
             //   //Y_Pos -= 14;
             //////   ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
             //   //Y_Pos -= 14;
             //   //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
             //   //Y_Pos -= 14;
             //   //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

             //   //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doublesertotal.ToString(), TblFontBold), 210, 476, 0);
             //   //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doubleTotalAmount.ToString(), TblFontBold), 210, 461, 0);

             //   ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(doublesertotal.ToString("0.00"), TblFontBold), 240, Y_Pos - 14, 0);
             //   ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(doubleTotalAmount.ToString("0.00"), TblFontBold), 240, Y_Pos - 28, 0);

                // Consumption Rate

                X_Pos = 510;
                Y_Pos -= 29;//63;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 510;
                Y_Pos -= 50;//52;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 23;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 23;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                //Y_Pos -= 40;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0".ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 34;//32;
                X_Pos = 510;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 24;
                if (inttotalcount >= 29)
                {
                    X_Pos = 140;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 19 && inttotalcount <= 28)
                {
                    X_Pos = 330;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 18)
                {
                    X_Pos = 510;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();
            SendEmail();
            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }

        }


        #endregion

        #region CSNT Priority Sheet Form
        private void On_CSNT_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            if (BaseForm.BaseAgencyControlDetails.AgyShortName == "BVCOG")
                ReaderName = propReportPath + "\\" + "BVCOG_Priority.pdf";
            else
                ReaderName = propReportPath + "\\" + "CSNT_Priority.pdf";



            PdfName = "CSNT_Priority";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 135; Y_Pos -= 115;

                int inttotalcount = 0;

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("App# ", TblFontBold), X_Pos - 50, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 300;//280;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                //List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 10;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 10;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 10;
                inttotalcount = inttotalcount + intdisablecount;

                //List<CaseSnpEntity> casesnpvetran = casesnpEligbulity.FindAll(u => u.MilitaryStatus.ToString().ToUpper() == "V" && u.Status == "A");
                //int intVetCount = 0;
                //if (casesnpvetran.Count > 0) intVetCount = 5;
                //inttotalcount = inttotalcount + intVetCount;

                ////int intNoneabove = 0;
                ////if (inttotalcount == 0)
                ////{
                ////    inttotalcount = inttotalcount + intNoneabove;
                ////    intNoneabove = 1;
                ////}
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 5;
                    intfity = 5;
                }
                if (intfity == 0)
                {
                    List<CaseVerEntity> caseVerList = _model.CaseMstData.GetCASEVeradpyalst(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty, string.Empty);
                    if (caseVerList.Count > 0)
                    {
                        if (caseVerList[0].CatElig == "A" || caseVerList[0].CatElig == "B" || caseVerList[0].CatElig == "O")
                        {
                            inttotalcount = inttotalcount + 5;
                            intfity = 5;
                        }
                    }
                }

                //else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                //{
                //    inttotalcount = inttotalcount + 5;
                //    intsenvtyfive = 5;
                //}
                //else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 5;
                //    intonefiftyfive = 5;
                //}
                ////else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                ////{
                ////    inttotalcount = inttotalcount + 1;
                ////    inttwentytofifty = 1;
                ////}
                ////else if (intmstpoverty <= 151)
                ////{

                ////    intfiftyone = 0;
                ////}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal > 1000)
                {
                    inttotalcount = inttotalcount + 5;
                    int1000plus = 5;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                if (doubleTotalAmount == 0 || doublesertotal == 0)
                {
                    //if (doubleTotalAmount == 0)
                    //{
                    //    inttotalcount = inttotalcount + 8;
                    //    intthirty = 8;
                    //}
                    //else
                    //    intfive = 0;
                }
                else
                {

                    //if (totaldive >= 30)
                    //{
                    //    inttotalcount = inttotalcount + 8;
                    //    intthirty = 8;
                    //}
                    //else if (totaldive >= 17 && totaldive <= 29.99)
                    //{
                    //    inttotalcount = inttotalcount + 7;
                    //    intseventto29 = 7;
                    //}
                    if (totaldive >= 11) //&& totaldive <= 16.99
                    {
                        if (BaseForm.BaseAgencyControlDetails.AgyShortName.Trim() == "CSNT")
                        {
                            inttotalcount = inttotalcount + 15;
                            intelevento16 = 15;
                        }
                        else
                        {
                            inttotalcount = inttotalcount + 5;
                            intelevento16 = 5;
                        }
                    }
                    //else if (totaldive >= 6 && totaldive <= 10.99)
                    //{
                    //    inttotalcount = inttotalcount + 2;
                    //    intsixtoten = 2;
                    //}
                    //else if (totaldive <= 5.99)
                    //{
                    //    if (doubleTotalAmount == 0 || doublesertotal == 0)
                    //    {
                    //        intfive = 0;

                    //    }
                    //    else
                    //    {
                    //        inttotalcount = inttotalcount + 1;
                    //        intfive = 1;
                    //    }
                    //}
                }

                X_Pos = 510;
                Y_Pos -= 73;//58;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 24;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 24;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intVetCount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden 

                X_Pos = 510;
                Y_Pos -= 30;//36;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 14;
                ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 14;
                ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doublesertotal.ToString(), TblFontBold), 210, 476, 0);
                ////ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doubleTotalAmount.ToString(), TblFontBold), 210, 461, 0);

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(doublesertotal.ToString("0.00"), TblFontBold), 250, Y_Pos - 19, 0);    //14
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(doubleTotalAmount.ToString("0.00"), TblFontBold), 250, Y_Pos - 33, 0);  //28

                // Consumption Rate

                X_Pos = 510;
                Y_Pos -= 22;//75;//63;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 510;
                Y_Pos -= 50;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 23;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 23;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                //Y_Pos -= 40;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0".ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                //Y_Pos -= 10;//32;
                X_Pos = 510;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 42;
                if (inttotalcount >= 20)
                {
                    X_Pos = 150;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 10 && inttotalcount <= 15)
                {
                    X_Pos = 345;

                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount == 5)
                {
                    X_Pos = 480;//510;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                    cb.AddImage(_image_Tick);
                }

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            SendEmail();
            // CopytoSignFolder(PdfName, "Priority_Sheet");


            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }

        }

        #endregion

        #region FORTWORTH Priority Sheet Form

        private void On_Fortworth_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "FORTWORTH_Priority_Rating.pdf";



            PdfName = "FORTWORTH_Priority_Rating";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30; Y_Pos = 760;

                X_Pos = 150; Y_Pos -= 135;

                int inttotalcount = 0;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doublesertotal.ToString(), TblFontBold), X_Pos - 70, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doubleTotalAmount.ToString(), TblFontBold), X_Pos-200, Y_Pos, 0);


                X_Pos = 240;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doubleTotalAmount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 390;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(totaldive.ToString() + "%", TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60)))); //&& (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 4;
                //inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 4;
                //inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 4;
                //inttotalcount = inttotalcount + intdisablecount;

                List<CaseSnpEntity> casesnpvetran = casesnpEligbulity.FindAll(u => u.MilitaryStatus.ToString().ToUpper() == "V" && u.Status == "A");
                int intVetCount = 0;
                if (casesnpvetran.Count > 0) intVetCount = 4;
                //inttotalcount = inttotalcount + intVetCount;

                //int intNoneabove = 0;
                //if (inttotalcount == 0)
                //{
                //    inttotalcount = inttotalcount + intNoneabove;
                //    intNoneabove = 1;
                //}
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 4;
                    intfity = 4;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 3;
                    intsenvtyfive = 3;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 2;
                    intonefiftyfive = 2;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal > 1000)
                {
                    inttotalcount = inttotalcount + 4;
                    int1000plus = 4;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}


                int Householcnt = 0;
                if (intdisablecount > 0) Householcnt = 4;
                else if (inteldercount > 0) Householcnt = 4;
                else if (intyoungercount > 0) Householcnt = 4;
                else if (intVetCount > 0) Householcnt = 4;

                if (Householcnt > 0) { inttotalcount = inttotalcount + Householcnt; }

                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                if (doubleTotalAmount == 0 || doublesertotal == 0)
                {
                    //if (doubleTotalAmount == 0)
                    //{
                    //    inttotalcount = inttotalcount + 8;
                    //    intthirty = 8;
                    //}
                    //else
                    //    intfive = 0;
                }
                else
                {
                    if (totaldive >= 5 && totaldive <= 7.99)
                    {
                        inttotalcount = inttotalcount + 2;
                        intelevento16 = 2;
                    }
                    else if (totaldive >= 8 && totaldive <= 10.99)
                    {
                        inttotalcount = inttotalcount + 3;
                        intelevento16 = 3;
                    }
                    else if (totaldive >= 11)
                    {
                        inttotalcount = inttotalcount + 5;
                        intelevento16 = 5;
                    }

                }

                int Poverty = 0;
                if (intfity > 0) { Poverty = intfity; }
                else if (intsenvtyfive > 0) { Poverty = intsenvtyfive; }
                else if (intonefiftyfive > 0) { Poverty = intonefiftyfive; }

                X_Pos = 470;
                Y_Pos -= 58;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 25;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 17;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intVetCount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 470;
                Y_Pos -= 50;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doublesertotal.ToString(), TblFontBold), 210, 476, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(doubleTotalAmount.ToString(), TblFontBold), 210, 461, 0);


                Y_Pos -= 103;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Householcnt.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Consumption Rate

                //X_Pos = 510;
                Y_Pos -= 72;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Poverty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 470;
                Y_Pos -= 28;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 23;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 23;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                //Y_Pos -= 40;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0".ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                //Y_Pos -= 32;
                //X_Pos = 510;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                if (inteldercount > 0 || intyoungercount > 0 || intdisablecount > 0)
                {
                    X_Pos = 60; Y_Pos -= 27;
                    if (inttotalcount >= 14)
                    {
                        _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                        cb.AddImage(_image_Tick);
                    }
                    else if (inttotalcount <= 13)
                    {
                        Y_Pos -= 24;
                        _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 34);
                        cb.AddImage(_image_Tick);
                    }
                }
                else
                {
                    X_Pos = 60; Y_Pos -= 27;
                    if (inttotalcount >= 14)
                    {
                        X_Pos = 305;
                        _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                        cb.AddImage(_image_Tick);
                    }
                    else if (inttotalcount <= 13)
                    {
                        Y_Pos -= 24; X_Pos = 305;
                        _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 34);
                        cb.AddImage(_image_Tick);
                    }
                }

                Y_Pos -= 85; X_Pos = 185;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 455;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                //Y_Pos -= 24;
                //if (inttotalcount >= 29)
                //{
                //    X_Pos = 140;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount >= 19 && inttotalcount <= 28)
                //{
                //    X_Pos = 330;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount <= 18)
                //{
                //    X_Pos = 305;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                //    cb.AddImage(_image_Tick);
                //}



                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.StartPosition = FormStartPosition.CenterScreen;
                objfrm.ShowDialog();
            }

        }


        #endregion

        #region RPMC Priority Rating Form 2024

        private void On_RPMC_PriorityRankingForm()
        {

            #region  PDF Name

            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "RPMC_Priority_Rating.pdf";

            PdfName = "RPMC_Priority_Sheet";

            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                {
                    DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);

            #endregion

            #region Font Styles

            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 13);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

            _image_Tick.ScalePercent(60f);

            #endregion

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            List<CEAPINVEntity> CEAPINVs = new List<CEAPINVEntity>();
            if (CEAPCNTL_List.Count > 0)
                CEAPINVs = _model.SPAdminData.GetCEAPINVData(CEAPCNTL_List[0].CPCT_CODE, CEAPCNTL_List[0].CPCT_YEAR, "GET");

            List<AddCustEntity> propADDCUST = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            propADDCUST = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0;
            int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30;
                Y_Pos = 760;

                X_Pos = 116;
                Y_Pos -= 118;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 276;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");

                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));

                int inteldercount = 0;
                if (casesnpElder.Count > 0)
                    inteldercount = 4;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0)
                    intyoungercount = 4;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0)
                    intdisablecount = 4;
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0;
                int intsenvtyfive = 0;
                int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 4;
                    intfity = 4;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 3;
                    intsenvtyfive = 3;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 2;
                    intonefiftyfive = 2;
                }

                int int1000plus = 0;

                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 4;
                    int1000plus = 4;
                }

                int intthirty = 0;

                if (totaldive >= 11)
                {
                    inttotalcount = inttotalcount + 5;
                    intthirty = 5;
                }

                X_Pos = 525;
                Y_Pos -= 51;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Family Characterisitics 

                //List<CaseSnpEntity> casesnpEnrlSecEduc = casesnpEligbulity.FindAll(u => u.Education == "C");

                //int intEnrlSecEduc = 0;
                //if (casesnpEnrlSecEduc.Count > 0)
                //    intEnrlSecEduc = 3;
                //inttotalcount = inttotalcount + intEnrlSecEduc;

                List<CaseSnpEntity> casesnpVetStatus = casesnpEligbulity.FindAll(u => u.MilitaryStatus == "V");

                int intVetStatus = 0;
                if (casesnpVetStatus.Count > 0)
                    intVetStatus = 3;
                inttotalcount = inttotalcount + intVetStatus;

                //List<CaseSnpEntity> casesnpEnrlSecEduc = casesnpEligbulity.FindAll(u => u.Education == "C");

                //int intEnrlSecEduc = 0;
                //if (casesnpEnrlSecEduc.Count > 0)
                //    intEnrlSecEduc = 3;
                //inttotalcount = inttotalcount + intEnrlSecEduc;

                int RegTexas = 0;int EnrlCM = 0;
                if (propADDCUST.Count > 0)
                {
                    AddCustEntity CusEnt = propADDCUST.Find(u => u.ACTCODE == "C01617" && u.ACTSNPFAMILYSEQ == "9999999");
                    if (CusEnt != null)
                    {
                        if (CusEnt.ACTMULTRESP.Trim() == "Y") { RegTexas = 3; inttotalcount = inttotalcount + RegTexas; }
                    }
                    
                    CusEnt = propADDCUST.Find(u => u.ACTCODE == "C01619" && u.ACTSNPFAMILYSEQ == "9999999");
                    if (CusEnt != null)
                    {
                        if (CusEnt.ACTMULTRESP.Trim() == "Y") { EnrlCM = 3; inttotalcount = inttotalcount + EnrlCM; }
                    }
                }


                X_Pos = 525;
                Y_Pos -= 54;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(EnrlCM.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVetStatus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                
                
                
                
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(RegTexas.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Poverty 

                X_Pos = 525;
                Y_Pos -= 54;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Energy Burden

                X_Pos = 525;
                Y_Pos -= 54;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Consumption Rate

                X_Pos = 525;
                Y_Pos -= 54;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // First Time Participant

                int FirstApp = 0;
                //if (CASESPM_SP_List.Count>0)
                //{
                //    if (CASESPM_SP_List[0].SPM_FIRST_APP == "Y") { FirstApp = 3; inttotalcount = inttotalcount + FirstApp; }
                //}

                if(propADDCUST.Count>0)
                {
                    AddCustEntity CusEnt = propADDCUST.Find(u => u.ACTCODE == "C01618" && u.ACTSNPFAMILYSEQ == "9999999");
                    if(CusEnt!=null)
                    {
                        if(CusEnt.ACTMULTRESP.Trim() == "Y") { FirstApp = 3; inttotalcount = inttotalcount + FirstApp; }
                    }
                }


                X_Pos = 525;
                Y_Pos -= 32;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(FirstApp.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty;
                string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi;
                    dob = SnpEntity.AltBdate.Trim();
                }

                Y_Pos -= 42;
                X_Pos = 525;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 35;

                if (inttotalcount <= 10)
                {
                    cb.Rectangle(384, 163, 172, 22);
                }
                if (inttotalcount >= 11 && inttotalcount <= 16)
                {
                    cb.Rectangle(212, 163, 172, 22);

                }
                if (inttotalcount >= 17 && inttotalcount <= 50)
                {
                    cb.Rectangle(39, 163, 172, 22);
                }

                cb.SetColorFill(new BaseColor(179, 216, 167));

                PdfGState gs = new PdfGState();
                gs.FillOpacity = 0.5f;
                cb.SetGState(gs);

                cb.Fill();

                //if (CEAPINVs.Count > 0)
                //{
                //    CEAPINVEntity entity = CEAPINVs.Find(u => u.CPINV_PRIORTY == "1");
                //    if (entity != null)
                //    {
                //        X_Pos = 200;
                //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_LOW.ToString() + "-" + entity.CPINV_HIGH.ToString() + " Points", TableFont), X_Pos, Y_Pos - 7, 0);
                //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_MAX_INV.ToString(), Times), 191, Y_Pos - 20, 0);

                //    }
                //    entity = CEAPINVs.Find(u => u.CPINV_PRIORTY == "2");
                //    if (entity != null)
                //    {
                //        Y_Pos -= 33;
                //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_LOW.ToString() + "-" + entity.CPINV_HIGH.ToString() + " Points", TableFont), X_Pos, Y_Pos - 7, 0);
                //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_MAX_INV.ToString(), Times), 192, Y_Pos - 18, 0);

                //    }
                //    entity = CEAPINVs.Find(u => u.CPINV_PRIORTY == "3");
                //    if (entity != null)
                //    {
                //        Y_Pos -= 33;
                //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_LOW.ToString() + "-" + entity.CPINV_HIGH.ToString() + " Points", TableFont), X_Pos, Y_Pos - 7, 0);
                //        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(entity.CPINV_MAX_INV.ToString(), Times), 192, Y_Pos - 18, 0);
                //    }
                //}
                //else
                //{
                //    //X_Pos = 200;
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("20-31 Points", TableFont), X_Pos, Y_Pos - 7, 0);
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("12", Times), 191, Y_Pos - 20, 0);

                //    //Y_Pos -= 33;
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("11-19 Points", TableFont), X_Pos, Y_Pos - 7, 0);
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("8", Times), 192, Y_Pos - 20, 0);

                //    //if (inttotalcount >= 11 && inttotalcount <= 19)
                //    //{
                //    //    _image_Tick.SetAbsolutePosition(40, Y_Pos - 15);
                //    //    cb.AddImage(_image_Tick);
                //    //}

                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0-10 Points", TableFont), X_Pos, Y_Pos - 7, 0);
                //    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("6", Times), 192, Y_Pos - 20, 0);

                //}

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }
            }
            catch (Exception ex) { }

            Hstamper.Close();

            /** SEND EMAIL **/
            SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion


        #region CACOST Priority Sheet Form

        private void On_CACOST_PriorityRankingForm()
        {

            #region  PDF Name

            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "CACOST_PRIORITY.pdf";

            PdfName = "CACOST_PRIORITY_Sheet";

            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                {
                    DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);

            #endregion

            #region Font Styles

            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 13);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\Green_rect_tick.png"));

            //_image_Tick.ScalePercent(50f);

            iTextSharp.text.Image _image_UnChecked = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxUnchecked.JPG"));
            iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));
            _image_UnChecked.ScalePercent(80f);
            _image_Checked.ScalePercent(80f);


            #endregion

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            List<CEAPINVEntity> CEAPINVs = new List<CEAPINVEntity>();
            if (CEAPCNTL_List.Count > 0)
                CEAPINVs = _model.SPAdminData.GetCEAPINVData(CEAPCNTL_List[0].CPCT_CODE, CEAPCNTL_List[0].CPCT_YEAR, "GET");

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0;
            int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = 0;
            if(doubleTotalAmount>0)
                totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30;
                Y_Pos = 760;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), 508, 767, 0);

                X_Pos = 215;//192
                Y_Pos -= 32;//20;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 465; //442

                List<CaseSnpEntity> casesnplist = BaseForm.BaseCaseSnpEntity.FindAll(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);

                if(casesnplist.Count>0)
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(casesnplist[0].AltBdate.Trim()), TblFontBold), X_Pos, Y_Pos+1, 0);

                string HN = string.Empty;
                string Apt = string.Empty;
                string Floor = string.Empty;
                string Suffix = string.Empty;
                string Street = string.Empty;
                string Direction = string.Empty;

                //string MailAddress = string.Empty;
                //string MailAddress1 = string.Empty;

                string AppAddress = string.Empty;
                string AppAddress1 = string.Empty;

                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                    HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                    Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                    Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                    Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                    Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                string zipplus = string.Empty;
                if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                {
                    if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                        zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                }
                AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;

                X_Pos = 215;//192
                Y_Pos -= 24; //41
                
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress+ AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");

                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));

                int intSSI = 0; int intVABen = 0;
                if (BaseForm.BaseCaseMstListEntity[0].IncomeTypes.Contains("D "))
                {
                    intSSI = 2;
                    inttotalcount = inttotalcount + intSSI;
                }
                if (BaseForm.BaseCaseMstListEntity[0].IncomeTypes.Contains("VN") || BaseForm.BaseCaseMstListEntity[0].IncomeTypes.Contains("VS"))
                {
                    intVABen = 0;
                    inttotalcount = inttotalcount + intVABen;
                }

                int inteldercount = 0;
                //if (casesnpElder.Count > 0)
                //    inteldercount = 4;
                //inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                //if (casesnpyounger.Count > 0)
                //    intyoungercount = 4;
                //inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                //if (casesnpdisable.Count > 0)
                //    intdisablecount = 4;
                //inttotalcount = inttotalcount + intdisablecount;

                if (casesnpElder.Count > 0 || casesnpdisable.Count > 0 || casesnpyounger.Count > 0)
                    inteldercount = 4;
                inttotalcount = inttotalcount + inteldercount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0;
                int intsenvtyfive = 0;
                int intonefiftyfive = 0; int intmore150 = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                //if (intmstpoverty <= 50)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    intfity = 3;
                //}
                //else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    intsenvtyfive = 2;
                //}
                //else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    intonefiftyfive = 1;
                //}
                //else if (intmstpoverty >= 151)
                //{
                //    inttotalcount = inttotalcount + 0;
                //    intmore150 = 0;
                //}

                int int1000plus = 0;

                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 1;
                    int1000plus = 1;
                }

                int intthirty = 0; int intbelowThirty = 0;

                if (totaldive >= 11)
                {
                    inttotalcount = inttotalcount + 5;
                    intthirty = 5;
                }
                //else
                //{
                //    inttotalcount = inttotalcount + 2;
                //    intbelowThirty = 2;
                //}

                X_Pos = 543;
                Y_Pos -= 117;//135;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;//18
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22; //18
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                int intnonabove = 0;
                if (intyoungercount == 0 && intdisablecount == 0 && inteldercount == 0)
                {
                    inttotalcount = inttotalcount + 1;
                    intnonabove = 1;
                }
                Y_Pos -= 35; //24
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(BaseForm.BaseCaseMstListEntity[0].FamIncome.Trim(), TblFontBold), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intnonabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 60;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intSSI.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 19;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVABen.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Family Characterisitics 

                //List<CaseSnpEntity> casesnpEnrlSecEduc = casesnpEligbulity.FindAll(u => u.Education == "C");

                //int intEnrlSecEduc = 0;
                //if (casesnpEnrlSecEduc.Count > 0)
                //    intEnrlSecEduc = 3;
                //inttotalcount = inttotalcount + intEnrlSecEduc;

                //List<CaseSnpEntity> casesnpVetStatus = casesnpEligbulity.FindAll(u => u.MilitaryStatus == "V");

                //int intVetStatus = 0;
                //if (casesnpVetStatus.Count > 0)
                //    intVetStatus = 3;
                //inttotalcount = inttotalcount + intVetStatus;

                //List<CaseSnpEntity> casesnpEnrlSecEduc = casesnpEligbulity.FindAll(u => u.Education == "C");

                //int intEnrlSecEduc = 0;
                //if (casesnpEnrlSecEduc.Count > 0)
                //    intEnrlSecEduc = 3;
                //inttotalcount = inttotalcount + intEnrlSecEduc;

                //// Poverty 
                //X_Pos = 510;
                //Y_Pos -= 62;//54;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 20;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intmore150.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVetStatus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);


                //// Poverty 

                //X_Pos = 525;
                //Y_Pos -= 54;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Consumption Rate

                X_Pos = 543;
                Y_Pos -= 35;//30
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(doublesertotal.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 48; //43
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Energy Burden

                X_Pos = 543;
                Y_Pos -= 37; //37
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(totaldive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 63; //45
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                //// First Time Participant

                //X_Pos = 525;
                //Y_Pos -= 32;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);

                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty;
                string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi;
                    dob = SnpEntity.AltBdate.Trim();
                }

                Y_Pos -= 39;
                X_Pos = 543;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                if(CEAPCNTL_List.Count>0)
                {
                    Vulner_Flag = Get_SNP_Vulnerable_Status();
                    Y_Pos -= 100; X_Pos = 80;
                    if (Vulner_Flag)
                    {
                        if (intmstpoverty < 51)
                        {
                            _image_Checked.SetAbsolutePosition(60, Y_Pos-2);
                            cb.AddImage(_image_Checked);
                        }
                        else
                        {
                            _image_UnChecked.SetAbsolutePosition(60, Y_Pos-2);
                            cb.AddImage(_image_UnChecked);
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0% TO 50.999%", TblFontBold), X_Pos, Y_Pos, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("$"+decimal.Parse(CEAPCNTL_List[0].CPCT_VUL_50).ToString("N0"), TblFontBold), 545, Y_Pos, 0);
                        Y_Pos -= 20;
                        if (intmstpoverty >= 51 && intmstpoverty <= 75)
                        {
                            _image_Checked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_Checked);
                        }
                        else
                        {
                            _image_UnChecked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_UnChecked);
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("51% TO 75.999%", TblFontBold), X_Pos, Y_Pos, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("$" + decimal.Parse(CEAPCNTL_List[0].CPCT_VUL_75).ToString("N0"), TblFontBold), 545, Y_Pos, 0);
                        Y_Pos -= 20;
                        if (intmstpoverty >= 76 && intmstpoverty <= 150)
                        {
                            _image_Checked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_Checked);
                        }
                        else
                        {
                            _image_UnChecked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_UnChecked);
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("76% TO 150%", TblFontBold), X_Pos, Y_Pos, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("$" + decimal.Parse(CEAPCNTL_List[0].CPCT_VUL_150).ToString("N0"), TblFontBold), 545, Y_Pos, 0);

                    }
                    else
                    {
                        if (intmstpoverty < 51)
                        {
                            _image_Checked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_Checked);
                        }
                        else
                        {
                            _image_UnChecked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_UnChecked);
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("0% TO 50.999%", TblFontBold), X_Pos, Y_Pos, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("$" + decimal.Parse(CEAPCNTL_List[0].CPCT_NONVUL_50).ToString("N0"), TblFontBold), 545, Y_Pos, 0);
                        Y_Pos -= 20;
                        if (intmstpoverty >= 51 && intmstpoverty <= 75)
                        {
                            _image_Checked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_Checked);
                        }
                        else
                        {
                            _image_UnChecked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_UnChecked);
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("51% TO 75.999%", TblFontBold), X_Pos, Y_Pos, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("$" + decimal.Parse(CEAPCNTL_List[0].CPCT_NONVUL_75).ToString("N0"), TblFontBold), 545, Y_Pos, 0);
                        Y_Pos -= 20;
                        if (intmstpoverty >= 76 && intmstpoverty <= 150)
                        {
                            _image_Checked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_Checked);
                        }
                        else
                        {
                            _image_UnChecked.SetAbsolutePosition(60, Y_Pos - 2);
                            cb.AddImage(_image_UnChecked);
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("76% TO 150%", TblFontBold), X_Pos, Y_Pos, 0);
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("$" + decimal.Parse(CEAPCNTL_List[0].CPCT_NONVUL_150).ToString("N0"), TblFontBold), 545, Y_Pos, 0);
                    }



                }


                //X_Pos = 50;
                //if (inttotalcount <= 7)
                //{
                //    Y_Pos -= 115;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                //    cb.AddImage(_image_Tick);
                //}
                //if (inttotalcount >= 8 && inttotalcount <= 15)
                //{
                //    Y_Pos -= 96;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                //    cb.AddImage(_image_Tick);

                //}
                //if (inttotalcount >= 16 && inttotalcount <= 23)
                //{
                //    Y_Pos -= 78;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                //    cb.AddImage(_image_Tick);
                //}
                //if (inttotalcount >= 24 && inttotalcount <= 50)
                //{
                //    Y_Pos -= 60;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                //    cb.AddImage(_image_Tick);
                //}

                //cb.SetColorFill(new BaseColor(179, 216, 167));

                //PdfGState gs = new PdfGState();
                //gs.FillOpacity = 0.5f;
                //cb.SetGState(gs);

                //cb.Fill();

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }
            }
            catch (Exception ex) { }

            Hstamper.Close();

            /** SEND EMAIL **/
            //SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        bool Vulner_Flag = false;
        bool Age_Grt_60 = false, Age_Les_6 = false, Disable_Flag = false, FoodStamps_Flag = false;
        private bool Get_SNP_Vulnerable_Status()
        {
            //bool Vulner_Flag = false;
            Vulner_Flag = false;
            DateTime MST_Intake_Date = DateTime.Today, SNP_DOB = DateTime.Today;
            DateTime zeroTime = new DateTime(1, 1, 1);
            TimeSpan Time_Span;
            int Age_In_years = 0;

            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].IntakeDate.Trim()))
                MST_Intake_Date = Convert.ToDateTime(BaseForm.BaseCaseMstListEntity[0].IntakeDate);
            string Non_Qual_Alien_SW = "N";
            foreach (CaseSnpEntity Entity in BaseForm.BaseCaseSnpEntity)
            {
                SNP_DOB = MST_Intake_Date;
                if (!string.IsNullOrEmpty(Entity.AltBdate.Trim()))
                    SNP_DOB = Convert.ToDateTime(Entity.AltBdate);

                Age_In_years = 0;

                if (MST_Intake_Date > SNP_DOB)
                {
                    Time_Span = (MST_Intake_Date - SNP_DOB);
                    Age_In_years = (zeroTime + Time_Span).Year - 1;
                }
                //Age_In_years = (Time_Span). - 1;

                if (Age_In_years > 59)
                    Age_Grt_60 = true;

                if (Age_In_years < 6)
                    Age_Les_6 = true;

                if (Entity.Disable == "Y")
                    Disable_Flag = true;

                if (Entity.FootStamps == "Y")
                    FoodStamps_Flag = true;

                if (Entity.SsnReason == "Q" && BaseForm.BaseAgencyControlDetails.State == "TX") Non_Qual_Alien_SW = "Y";
            }

            string Tmp_Age_Dis = string.Empty;
            //if (Sel_Activity == "B")
            //{
            //    if (((ListItem)Cmb_Age_Dis.SelectedItem).Value.ToString() != null)
            //        Tmp_Age_Dis = ((ListItem)Cmb_Age_Dis.SelectedItem).Value.ToString();
            //}
            //else
            //    Tmp_Age_Dis = PassLIHEAPB_List[0].Age_dis;


            if ((Age_Grt_60 || Age_Les_6 || Disable_Flag) && Non_Qual_Alien_SW == "N")
            {
                //if (Tmp_Age_Dis == "1" || Tmp_Age_Dis == "2" || Tmp_Age_Dis == "3")
                Vulner_Flag = true;

                if (Age_Les_6)
                    Vulner_Flag = true;
            }



            return Vulner_Flag;
        }


        #endregion

        #region HCCAA Priority Sheet Form

        private void On_HCCAA_PriorityRankingForm()
        {

            #region  PDF Name

            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "HCCAA_Priority.pdf";

            PdfName = "HCCAA_Priority_Sheet";

            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                {
                    DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);

            #endregion

            #region Font Styles

            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 13);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\Green_rect_tick.png"));

            _image_Tick.ScalePercent(50f);

            #endregion

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            List<CEAPINVEntity> CEAPINVs = new List<CEAPINVEntity>();
            if (CEAPCNTL_List.Count > 0)
                CEAPINVs = _model.SPAdminData.GetCEAPINVData(CEAPCNTL_List[0].CPCT_CODE, CEAPCNTL_List[0].CPCT_YEAR, "GET");

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0;
            int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 30;
                Y_Pos = 760;

                X_Pos = 116;
                Y_Pos -= 95;//118;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                X_Pos = 480;

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");

                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));

                int intSSI = 0; int intVABen = 0;
                if (BaseForm.BaseCaseMstListEntity[0].IncomeTypes.Contains("D "))
                {
                    intSSI = 2;
                    inttotalcount = inttotalcount + intSSI;
                }
                if (BaseForm.BaseCaseMstListEntity[0].IncomeTypes.Contains("VN") || BaseForm.BaseCaseMstListEntity[0].IncomeTypes.Contains("VS"))
                {
                    intVABen = 0;
                    inttotalcount = inttotalcount + intVABen;
                }

                int inteldercount = 0;
                if (casesnpElder.Count > 0)
                    inteldercount = 4;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0)
                    intyoungercount = 4;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0)
                    intdisablecount = 4;
                inttotalcount = inttotalcount + intdisablecount;

                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0;
                int intsenvtyfive = 0;
                int intonefiftyfive = 0; int intmore150 = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 3;
                    intfity = 3;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 2;
                    intsenvtyfive = 2;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 1;
                    intonefiftyfive = 1;
                }
                else if (intmstpoverty >= 151)
                {
                    inttotalcount = inttotalcount + 0;
                    intmore150 = 0;
                }

                int int1000plus = 0;

                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 4;
                    int1000plus = 4;
                }

                int intthirty = 0; int intbelowThirty = 0;

                if (totaldive >= 11)
                {
                    inttotalcount = inttotalcount + 5;
                    intthirty = 5;
                }
                else
                {
                    inttotalcount = inttotalcount + 2;
                    intbelowThirty = 2;
                }

                X_Pos = 510;
                Y_Pos -= 42;//51;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22;//18
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22; //18
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                int intnonabove = 0;
                if (intyoungercount == 0 && intdisablecount == 0 && inteldercount == 0)
                {
                    inttotalcount = inttotalcount + 1;
                    intnonabove = 1;
                }
                Y_Pos -= 22; //18
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intnonabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 60;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intSSI.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 19;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVABen.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Family Characterisitics 

                //List<CaseSnpEntity> casesnpEnrlSecEduc = casesnpEligbulity.FindAll(u => u.Education == "C");

                //int intEnrlSecEduc = 0;
                //if (casesnpEnrlSecEduc.Count > 0)
                //    intEnrlSecEduc = 3;
                //inttotalcount = inttotalcount + intEnrlSecEduc;

                List<CaseSnpEntity> casesnpVetStatus = casesnpEligbulity.FindAll(u => u.MilitaryStatus == "V");

                int intVetStatus = 0;
                if (casesnpVetStatus.Count > 0)
                    intVetStatus = 3;
                inttotalcount = inttotalcount + intVetStatus;

                //List<CaseSnpEntity> casesnpEnrlSecEduc = casesnpEligbulity.FindAll(u => u.Education == "C");

                //int intEnrlSecEduc = 0;
                //if (casesnpEnrlSecEduc.Count > 0)
                //    intEnrlSecEduc = 3;
                //inttotalcount = inttotalcount + intEnrlSecEduc;

                // Poverty 
                X_Pos = 510;
                Y_Pos -= 62;//54;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intmore150.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVetStatus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 22;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);


                //// Poverty 

                //X_Pos = 525;
                //Y_Pos -= 54;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                // Consumption Rate

                X_Pos = 510;
                Y_Pos -= 54;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 510;
                Y_Pos -= 60;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intbelowThirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                //// First Time Participant

                //X_Pos = 525;
                //Y_Pos -= 32;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);

                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty;
                string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi;
                    dob = SnpEntity.AltBdate.Trim();
                }

                Y_Pos -= 39;
                X_Pos = 510;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 50;
                if (inttotalcount <= 7)
                {
                    Y_Pos -= 115;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                    cb.AddImage(_image_Tick);
                }
                if (inttotalcount >= 8 && inttotalcount <= 15)
                {
                    Y_Pos -= 96;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                    cb.AddImage(_image_Tick);

                }
                if (inttotalcount >= 16 && inttotalcount <= 23)
                {
                    Y_Pos -= 78;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                    cb.AddImage(_image_Tick);
                }
                if (inttotalcount >= 24 && inttotalcount <= 50)
                {
                    Y_Pos -= 60;
                    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 8);
                    cb.AddImage(_image_Tick);
                }

                //cb.SetColorFill(new BaseColor(179, 216, 167));

                //PdfGState gs = new PdfGState();
                //gs.FillOpacity = 0.5f;
                //cb.SetGState(gs);

                //cb.Fill();

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }
            }
            catch (Exception ex) { }

            Hstamper.Close();

            /** SEND EMAIL **/
            //SendEmail();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion


        #region CVCAA Priority Sheet Form

        private void On_CVCAA_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "CVCAA_Priority_Ranking_" + BaseForm.BaseYear + ".pdf";

            //ReaderName = propReportPath + "\\" + "PCS_Priority_Ranking_" + BaseForm.BaseYear + ".pdf";

            PdfName = "CVCAA_Priority_Sheet";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 10, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            List<AddCustEntity> propADDCUST = new List<AddCustEntity>();
            AddCustEntity Search_AddCust = new AddCustEntity(true);
            Search_AddCust.ACTAGENCY = BaseForm.BaseAgency; Search_AddCust.ACTDEPT = BaseForm.BaseDept; Search_AddCust.ACTPROGRAM = BaseForm.BaseProg;
            Search_AddCust.ACTYEAR = BaseForm.BaseYear; Search_AddCust.ACTAPPNO = BaseForm.BaseApplicationNo;
            propADDCUST = _model.CaseMstData.Browse_ADDCUST(Search_AddCust, "Browse");

            //if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
            //    CEAPCNTL_List = _model.SPAdminData.GetCEAPCNTLData(string.Empty, BaseForm.BaseYear, string.Empty, string.Empty);

            List<CEAPINVEntity> CEAPINVs = new List<CEAPINVEntity>();
            if (CEAPCNTL_List.Count > 0)
                CEAPINVs = _model.SPAdminData.GetCEAPINVData(CEAPCNTL_List[0].CPCT_CODE, CEAPCNTL_List[0].CPCT_YEAR, "GET");

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 50; Y_Pos = 760;

                X_Pos = 105; Y_Pos -= 145;//91;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos, 0);


                X_Pos = 280;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                //List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 5;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 5;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 5;
                inttotalcount = inttotalcount + intdisablecount;

                int intVeterancount = 0;
                //if (BaseForm.BaseYear == "2024")
                //{
                //    List<CaseSnpEntity> casesnpVetran = casesnpEligbulity.FindAll(u => (u.MilitaryStatus.ToString().ToUpper() == "V") && u.Status == "A");
                //    if (casesnpVetran.Count > 0) intVeterancount = 4;
                //}
                //else
                {
                    List<CaseSnpEntity> casesnpVetran = casesnpEligbulity.FindAll(u => (u.MilitaryStatus.ToString().ToUpper() == "V" || u.MilitaryStatus.ToString().ToUpper() == "A") && u.Status == "A");
                    if (casesnpVetran.Count > 0) intVeterancount = 4;
                }
                inttotalcount = inttotalcount + intVeterancount;

                int intage6to8 = 0;
                //if (BaseForm.BaseYear == "2024")
                //{
                //    List<CaseSnpEntity> casesnp6to8 = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(6))) && ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(8))));
                //    if (casesnp6to8.Count > 0) intage6to8 = 3;
                //}
                //else
                {
                    List<CaseSnpEntity> casesnp6to18 = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(6))) && ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(18))));
                    if (casesnp6to18.Count > 0) intage6to8 = 3;
                }
                inttotalcount = inttotalcount + intage6to8;

                int RuralClient = 0; int CMC = 0;
                if (propADDCUST.Count > 0)
                {
                    AddCustEntity CusEnt = propADDCUST.Find(u => u.ACTCODE == "C01622" && u.ACTSNPFAMILYSEQ == "9999999");
                    if (CusEnt != null)
                    {
                        if (CusEnt.ACTMULTRESP.Trim() == "Y") { RuralClient = 4; inttotalcount = inttotalcount + RuralClient; }
                    }

                    AddCustEntity CusEnt1 = propADDCUST.Find(u => u.ACTCODE == "C01623" && u.ACTSNPFAMILYSEQ == "9999999");
                    if (CusEnt1 != null)
                    {
                        if (CusEnt1.ACTMULTRESP.Trim() == "Y") { CMC = 3; inttotalcount = inttotalcount + CMC; }
                    }

                }


                int intNoneabove = 0;
                if (inttotalcount == 0)
                {
                    inttotalcount = inttotalcount + intNoneabove;
                    intNoneabove = 1;
                }
                int intfity = 0; int intsenvtyfive = 0; int intonefiftyfive = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 5;
                    intfity = 5;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 4;
                    intsenvtyfive = 4;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 3;
                    intonefiftyfive = 3;
                }
                //else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                //{
                //    inttotalcount = inttotalcount + 1;
                //    inttwentytofifty = 1;
                //}
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 7;
                    int1000plus = 7;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                //if (doubleTotalAmount == 0 || doublesertotal == 0)
                //{
                //    if (doubleTotalAmount == 0)
                //    {
                //        inttotalcount = inttotalcount + 8;
                //        intthirty = 8;
                //    }
                //    else
                //        intfive = 0;
                //}
                //else
                {

                    if (totaldive >= 11)
                    {
                        inttotalcount = inttotalcount + 9;
                        intthirty = 9;
                    }
                    //else if (totaldive >= 17 && totaldive <= 29.99)
                    //{
                    //    inttotalcount = inttotalcount + 7;
                    //    intseventto29 = 7;
                    //}
                    //else if (totaldive >= 11 && totaldive <= 16.99)
                    //{
                    //    inttotalcount = inttotalcount + 6;
                    //    intelevento16 = 6;
                    //}
                    //else if (totaldive >= 6 && totaldive <= 10.99)
                    //{
                    //    inttotalcount = inttotalcount + 2;
                    //    intsixtoten = 2;
                    //}
                    //else if (totaldive <= 5.99)
                    //{
                    //    if (doubleTotalAmount == 0 || doublesertotal == 0)
                    //    {
                    //        intfive = 0;

                    //    }
                    //    else
                    //    {
                    //        inttotalcount = inttotalcount + 1;
                    //        intfive = 1;
                    //    }
                    //}
                }

                X_Pos = 525;
                Y_Pos -= 55;//48;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVeterancount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;//14
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(RuralClient.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intage6to8.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;//15
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(CMC.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 525;
                Y_Pos -= 58; //43
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Consumption Rate

                X_Pos = 525;
                Y_Pos -= 43;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Poverty 

                X_Pos = 525;
                Y_Pos -= 44;//42
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 22;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty; string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi; dob = SnpEntity.AltBdate.Trim();
                }


                //DataSet ds = Captain.DatabaseLayer.MainMenu.MainMenuSearch("ALS", "ALL", string.Empty, string.Empty, string.Empty, string.Empty, Fname, string.Empty,
                //              string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, dob, BaseForm.UserID, string.Empty, string.Empty);
                //int FirstTime = 0;
                //if(ds.Tables[0].Rows.Count>0)
                //{
                //    if(ds.Tables[0].Rows.Count==1) FirstTime = 3;

                //    //foreach(DataRow dr in ds.Tables[0].Rows)
                //    //{
                //    //    if(dr["Agency"].ToString()!=BaseForm.BaseAgency && dr["Dept"].ToString() != BaseForm.BaseDept && dr["Prog"].ToString() != BaseForm.BaseProg && dr["SnpYear"].ToString() != BaseForm.BaseYear)
                //    //    {
                //    //        FirstTime = 3;
                //    //        break;
                //    //    }
                //    //}
                //}


                //Y_Pos -= 35; //42
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 26;//20 //36
                X_Pos = 525;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 40;//60

                if (inttotalcount >= 30)
                {
                    _image_Tick.SetAbsolutePosition(125, Y_Pos - 15);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount >= 16 && inttotalcount <= 29) //inttotalcount >= 10
                {
                    _image_Tick.SetAbsolutePosition(320, Y_Pos - 15);
                    cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 15)
                {
                    _image_Tick.SetAbsolutePosition(500, Y_Pos - 15);
                    cb.AddImage(_image_Tick);
                }


                //if (inttotalcount >= 20)
                //{
                //    X_Pos = 40;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 15);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount >= 11 && inttotalcount <= 19)
                //{
                //    X_Pos = 40;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 15);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount <= 10)
                //{
                //    X_Pos = 370;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                //    cb.AddImage(_image_Tick);
                //}

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

            Hstamper.Close();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion

        #region CCSCT Priority Sheet Form

        private void On_CCSCT_PriorityRankingForm()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "CCSCT_Priority_2025.pdf";



            PdfName = "CCSCT_Priority_Sheet";//form.GetFileName();
            //PdfName = strFolderPath + PdfName;
            PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
            try
            {
                if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
            }
            catch (Exception ex)
            {
                CommonFunctions.MessageBoxDisplay("Error");
            }

            try
            {
                string Tmpstr = PdfName + ".pdf";
                if (File.Exists(Tmpstr))
                    File.Delete(Tmpstr);
            }
            catch (Exception ex)
            {
                int length = 8;
                string newFileName = System.Guid.NewGuid().ToString();
                newFileName = newFileName.Replace("-", string.Empty);

                Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
            }

            if (!string.IsNullOrEmpty(Random_Filename))
                PdfName = Random_Filename;
            else
                PdfName += ".pdf";

            PdfReader Hreader = new PdfReader(ReaderName);

            PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
            Hstamper.Writer.SetPageSize(PageSize.A4);
            PdfContentByte cb = Hstamper.GetOverContent(1);


            BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
            iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
            BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
            iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
            BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

            iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 10);
            iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
            iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
            iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 10, 1);
            iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
            iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
            iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

            iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
            //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Images\\Tick_icon.png"));
            // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

            _image_Tick.ScalePercent(60f);
            //_image_Checked.ScalePercent(60f);

            List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
            custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

            //if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
            //    CEAPCNTL_List = _model.SPAdminData.GetCEAPCNTLData(string.Empty, BaseForm.BaseYear, string.Empty, string.Empty);

            List<CEAPINVEntity> CEAPINVs = new List<CEAPINVEntity>();
            if (CEAPCNTL_List.Count > 0)
                CEAPINVs = _model.SPAdminData.GetCEAPINVData(CEAPCNTL_List[0].CPCT_CODE, CEAPCNTL_List[0].CPCT_YEAR, "GET");

            ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);
            int intfromage = 0; int inttoage = 0;
            if (programEntity != null)
            {
                intfromage = Convert.ToInt16(programEntity.DepSENFromAge == string.Empty ? "0" : programEntity.DepSENFromAge);
                inttoage = Convert.ToInt16(programEntity.DepSENToAge == string.Empty ? "0" : programEntity.DepSENToAge);
            }
            double doublesertotal = 0;
            CustomQuestionsEntity responsetot = custResponses.Find(u => u.USAGE_MONTH.Equals("TOT"));
            if (responsetot != null)
            {
                doublesertotal = Convert.ToDouble(responsetot.USAGE_TOTAL == string.Empty ? "0" : responsetot.USAGE_TOTAL);
            }

            double doubleTotalAmount = Convert.ToDouble(BaseForm.BaseCaseMstListEntity[0].ProgIncome == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].ProgIncome);
            double totaldive = 0;
            if (doubleTotalAmount > 0)
                totaldive = (doublesertotal / doubleTotalAmount) * 100;
            totaldive = Math.Round(totaldive, 2);
            try
            {
                X_Pos = 50; Y_Pos = 760;

                X_Pos = 110; Y_Pos -= 125;//91;

                int inttotalcount = 0;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationNo, TblFontBold), X_Pos, Y_Pos+3, 0);


                X_Pos = 310;


                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos+3, 0);

                List<CaseSnpEntity> casesnpEligbulity = BaseForm.BaseCaseSnpEntity.FindAll(u => u.DobNa.Equals("0") && u.Status == "A");
                //List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(intfromage)) && (Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(inttoage))));
                List<CaseSnpEntity> casesnpElder = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(60))));
                int inteldercount = 0;
                if (casesnpElder.Count > 0) inteldercount = 9;
                inttotalcount = inttotalcount + inteldercount;

                List<CaseSnpEntity> casesnpyounger = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(5))));
                int intyoungercount = 0;
                if (casesnpyounger.Count > 0) intyoungercount = 9;
                inttotalcount = inttotalcount + intyoungercount;

                List<CaseSnpEntity> casesnpdisable = casesnpEligbulity.FindAll(u => u.Disable.ToString().ToUpper() == "Y" && u.Status == "A");
                int intdisablecount = 0;
                if (casesnpdisable.Count > 0) intdisablecount = 9;
                inttotalcount = inttotalcount + intdisablecount;


                //List<CaseSnpEntity> casesnpVetran = casesnpEligbulity.FindAll(u => u.MilitaryStatus.ToString().ToUpper() == "V" && u.Status == "A");
                //int intVeterancount = 0;
                //if (casesnpVetran.Count > 0) intVeterancount = 4;
                //inttotalcount = inttotalcount + intVeterancount;

                //List<CaseSnpEntity> casesnp6to8 = casesnpEligbulity.FindAll(u => ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) >= Convert.ToDecimal(6))) && ((Convert.ToDecimal(u.Age == string.Empty ? 0 : Convert.ToDecimal(u.Age)) <= Convert.ToDecimal(8))));
                //int intage6to8 = 0;
                //if (casesnp6to8.Count > 0) intage6to8 = 3;
                //inttotalcount = inttotalcount + intage6to8;


                //int intNoneabove = 0;
                //if (inttotalcount == 0)
                //{
                //    inttotalcount = inttotalcount + intNoneabove;
                //    intNoneabove = 1;
                //}
                int intfity = 0; int intsenvtyfive = 0; int inthundred = 0; int intonefiftyfive = 0; int inttwentytofifty = 0;
                decimal intmstpoverty = Convert.ToDecimal(BaseForm.BaseCaseMstListEntity[0].Poverty == string.Empty ? "0" : BaseForm.BaseCaseMstListEntity[0].Poverty);

                if (intmstpoverty <= 50)
                {
                    inttotalcount = inttotalcount + 5;
                    intfity = 5;
                }
                else if (intmstpoverty >= 51 && intmstpoverty <= 75)
                {
                    inttotalcount = inttotalcount + 4;
                    intsenvtyfive = 4;
                }
                else if (intmstpoverty >= 76 && intmstpoverty <= 100)
                {
                    inttotalcount = inttotalcount + 3;
                    inthundred = 3;
                }
                else if (intmstpoverty >= 101 && intmstpoverty <= 125)
                {
                    inttotalcount = inttotalcount + 2;
                    inttwentytofifty = 2;
                }
                else if (intmstpoverty >= 126 && intmstpoverty <= 150)
                {
                    inttotalcount = inttotalcount + 1;
                    intonefiftyfive = 1;
                }
                //else if (intmstpoverty <= 151)
                //{

                //    intfiftyone = 0;
                //}

                int int1000plus = 0; int int500above = 0; int int250above = 0; int int250below = 0;
                if (doublesertotal >= 1000)
                {
                    inttotalcount = inttotalcount + 5;
                    int1000plus = 5;
                }
                //else if (doublesertotal >= 500 && doublesertotal <= 999.99)
                //{
                //    inttotalcount = inttotalcount + 4;
                //    int500above = 4;
                //}
                //else if (doublesertotal >= 250 && doublesertotal <= 499.99)
                //{
                //    inttotalcount = inttotalcount + 3;
                //    int250above = 3;
                //}
                //else if (doublesertotal >= 1 && doublesertotal <= 249.99)
                //{
                //    inttotalcount = inttotalcount + 2;
                //    int250below = 2;
                //}



                int intthirty = 0; int intseventto29 = 0; int intelevento16 = 0; int intsixtoten = 0; int intfive = 0;
                //if (doubleTotalAmount == 0 || doublesertotal == 0)
                //{
                //    if (doubleTotalAmount == 0)
                //    {
                //        inttotalcount = inttotalcount + 8;
                //        intthirty = 8;
                //    }
                //    else
                //        intfive = 0;
                //}
                //else
                {

                    if (totaldive >= 11 || doubleTotalAmount == 0)
                    {
                        inttotalcount = inttotalcount + 10;
                        intthirty = 10;
                    }
                    //else if (totaldive >= 17 && totaldive <= 29.99)
                    //{
                    //    inttotalcount = inttotalcount + 7;
                    //    intseventto29 = 7;
                    //}
                    //else if (totaldive >= 11 && totaldive <= 16.99)
                    //{
                    //    inttotalcount = inttotalcount + 6;
                    //    intelevento16 = 6;
                    //}
                    //else if (totaldive >= 6 && totaldive <= 10.99)
                    //{
                    //    inttotalcount = inttotalcount + 2;
                    //    intsixtoten = 2;
                    //}
                    //else if (totaldive <= 5.99)
                    //{
                    //    if (doubleTotalAmount == 0 || doublesertotal == 0)
                    //    {
                    //        intfive = 0;

                    //    }
                    //    else
                    //    {
                    //        inttotalcount = inttotalcount + 1;
                    //        intfive = 1;
                    //    }
                    //}
                }

                X_Pos = 550;
                Y_Pos -= 85;//48;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inteldercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intdisablecount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intyoungercount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 20;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase((intyoungercount + inteldercount + intdisablecount).ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intVeterancount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;//14
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intage6to8.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 18;//15
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);


                // Energy Burden

                X_Pos = 110; Y_Pos -= 70;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(doublesertotal.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(doubleTotalAmount.ToString(), TblFontBold), 300, Y_Pos, 0);
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(totaldive.ToString(), TblFontBold), 500, Y_Pos, 0);

                X_Pos = 550;
                Y_Pos -= 77; //43
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intthirty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intseventto29.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intelevento16.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsixtoten.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);



                // Consumption Rate

                X_Pos = 550;
                Y_Pos -= 19;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(int1000plus.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int500above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250above.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(int250below.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 30;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase((int1000plus + intthirty).ToString(), TblFontBold), X_Pos, Y_Pos+3, 0);


                // Poverty 

                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(BaseForm.BaseCaseMstListEntity[0].Poverty.ToString(), TblFontBold), 135, 252, 0);

                X_Pos = 550;
                Y_Pos -= 65;//42
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 18;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 15;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inthundred.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 16;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                Y_Pos -= 16;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(intonefiftyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 21;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase((intfity + intsenvtyfive + inthundred + inttwentytofifty + intonefiftyfive).ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                CaseSnpEntity SnpEntity = BaseForm.BaseCaseSnpEntity.Find(u => u.FamilySeq == BaseForm.BaseCaseMstListEntity[0].FamilySeq);
                string Fname = string.Empty; string dob = string.Empty;
                if (SnpEntity != null)
                {
                    Fname = SnpEntity.NameixFi; dob = SnpEntity.AltBdate.Trim();
                }


                //DataSet ds = Captain.DatabaseLayer.MainMenu.MainMenuSearch("ALS", "ALL", string.Empty, string.Empty, string.Empty, string.Empty, Fname, string.Empty,
                //              string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, dob, BaseForm.UserID, string.Empty, string.Empty);
                //int FirstTime = 0;
                //if(ds.Tables[0].Rows.Count>0)
                //{
                //    if(ds.Tables[0].Rows.Count==1) FirstTime = 3;

                //    //foreach(DataRow dr in ds.Tables[0].Rows)
                //    //{
                //    //    if(dr["Agency"].ToString()!=BaseForm.BaseAgency && dr["Dept"].ToString() != BaseForm.BaseDept && dr["Prog"].ToString() != BaseForm.BaseProg && dr["SnpYear"].ToString() != BaseForm.BaseYear)
                //    //    {
                //    //        FirstTime = 3;
                //    //        break;
                //    //    }
                //    //}
                //}


                //Y_Pos -= 35; //42
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);
                //Y_Pos -= 14;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("0", TblFontBold), X_Pos, Y_Pos, 0);


                Y_Pos -= 47;//20 //36
                X_Pos = 550;
                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(inttotalcount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);


                // Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intNoneabove.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                ////Y_Pos -= 42;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfity.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intsenvtyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentyfive.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(inttwentytofifty.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                //Y_Pos -= 17;
                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(intfiftyone.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                Y_Pos -= 45;//60

                if (inttotalcount >= 21)
                {
                    //_image_Tick.SetAbsolutePosition(125, Y_Pos - 15);
                    //cb.AddImage(_image_Tick);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(1.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                }
                else if (inttotalcount >= 11 && inttotalcount <= 20) //inttotalcount >= 10
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(2.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    //_image_Tick.SetAbsolutePosition(320, Y_Pos - 15);
                    //cb.AddImage(_image_Tick);
                }
                else if (inttotalcount <= 10)
                {
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(3.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                    //_image_Tick.SetAbsolutePosition(500, Y_Pos - 15);
                    //cb.AddImage(_image_Tick);
                }


                //if (inttotalcount >= 20)
                //{
                //    X_Pos = 40;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 15);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount >= 11 && inttotalcount <= 19)
                //{
                //    X_Pos = 40;

                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 15);
                //    cb.AddImage(_image_Tick);
                //}
                //else if (inttotalcount <= 10)
                //{
                //    X_Pos = 370;
                //    _image_Tick.SetAbsolutePosition(X_Pos, Y_Pos - 10);
                //    cb.AddImage(_image_Tick);
                //}

                StringBuilder strMstAppl = new StringBuilder();
                strMstAppl.Append("<Applicants>");
                strMstAppl.Append("<Details MSTApplDetails = \"" + BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + (BaseForm.BaseYear.Trim() == string.Empty ? "    " : BaseForm.BaseYear.Trim()) + BaseForm.BaseApplicationNo + "\" MST_RANK1 = \"" + inttotalcount.ToString() + "\" MST_RANK2 = \"" + "0" + "\" MST_RANK3 = \"" + "0" + "\" MST_RANK4 = \"" + "0" + "\" MST_RANK5 = \"" + "0" + "\" MST_RANK6 = \"" + "0" + "\"   />");
                strMstAppl.Append("</Applicants>");

                if (_model.CaseMstData.UpdateCaseMstRanks(strMstAppl.ToString(), "Single"))
                {
                    BaseForm.BaseCaseMstListEntity[0].Rank1 = inttotalcount.ToString();
                }



            }
            catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }
            SendEmail();
            Hstamper.Close();

            if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
            {
                PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }
            else
            {
                FrmViewer objfrm = new FrmViewer(PdfName);
                objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                objfrm.ShowDialog();
            }

        }

        #endregion


        #region  Elig Letter

        private void On_PCS_EligLet()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;
            if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            {
                ReaderName = propReportPath + "\\" + "PCS_EligLet_Spanish.pdf";
            }
            else
            {
                ReaderName = propReportPath + "\\" + "PCS_EligLet.pdf";
            }


            PdfName = "PCS_EligLet";//form.GetFileName();
            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
                // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    //string Direction = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    //string Street = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    //string Suffix = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    //string Address = HN + Direction + Street + Suffix;

                    string HN = string.Empty; string Apt = string.Empty; string Floor = string.Empty; string Suffix = string.Empty; string Street = string.Empty; string Direction = string.Empty;
                    string AppAddress = string.Empty; string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }


                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 120; Y_Pos -= 103;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 460;


                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 120; Y_Pos -= 14;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 120; Y_Pos -= 14;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 120; Y_Pos -= 14;





                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 120; Y_Pos -= 92;

                    string strAccountNumber = string.Empty;
                    string strVendorName = string.Empty;
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strVendorName = vddname.Name;
                            }
                        }
                    }
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 370;

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 20;






                    decimal ResAmount = 0; string ChkNo = string.Empty; string ChkDate = string.Empty; string ServsDate = string.Empty; string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0; ChkNo = string.Empty; ChkDate = string.Empty; ServsDate = string.Empty; SeekDate = string.Empty; CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        Y_Pos -= 14;
                        X_Pos = 165;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 400;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 14;
                        X_Pos = 400;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(dectotalAmount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                    }




                    if (SP_OtherActivity_Details.Count > 0)
                    {


                        Y_Pos = 359;
                        strAccountNumber = string.Empty;
                        strVendorName = string.Empty;

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strVendorName = vddname.Name;
                            }
                        }

                        X_Pos = 120;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 370;

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    }
                    strElec = "O";
                    Y_Pos = 337;
                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        Y_Pos -= 14;
                        X_Pos = 165;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 400;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 165;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 400;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 14;
                        X_Pos = 400;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(dectotalAmount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);

                    }






                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        private void On_EligLetterNew()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "EligLet_ENG.pdf";
            PdfName = "EligLet_ENG";
            if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            {
                ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
                PdfName = "EligLet_SPAN";
            }
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty; string Apt = string.Empty; string Floor = string.Empty; string Suffix = string.Empty; string Street = string.Empty; string Direction = string.Empty;
                    string AppAddress = string.Empty; string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }


                    //    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";

                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";

                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";

                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";


                    //string Address = HN + Direction + Street + Suffix;


                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 117; Y_Pos -= 99;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 470;


                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 117; Y_Pos -= 17;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    // X_Pos = 120; Y_Pos -= 14;
                    // ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 75; Y_Pos -= 20;





                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 117; Y_Pos -= 92;

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }
                    if(string.IsNullOrEmpty(strFirstVendorName.Trim()))
                    {
                        strAccountNumber = CASESPM_SP_List[0].SPM_Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }



                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 430;

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 26;






                    decimal ResAmount = 0; string ChkNo = string.Empty; string ChkDate = string.Empty; string ServsDate = string.Empty; string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0; ChkNo = string.Empty; ChkDate = string.Empty; ServsDate = string.Empty; SeekDate = string.Empty; CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        Y_Pos -= 14;
                        X_Pos = 240;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 500;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 14;
                        X_Pos = 500;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor1Amount = dectotalAmount.ToString();
                    }


                    string strsecondVendorName = string.Empty;

                    if (SP_OtherActivity_Details.Count > 0)
                    {


                        Y_Pos = 388;
                        strAccountNumber = string.Empty;
                        strsecondVendorName = string.Empty;

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strsecondVendorName = vddname.Name;
                            }
                        }
                        if (string.IsNullOrEmpty(strsecondVendorName.Trim()))
                        {
                            strAccountNumber = CASESPM_SP_List[0].SPM_Gas_Account;
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                                if (vddname != null)
                                {
                                    strsecondVendorName = vddname.Name;
                                }
                            }
                        }

                        X_Pos = 117;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 430;

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    }
                    strElec = "O";
                    Y_Pos = 362;
                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        Y_Pos -= 14;
                        X_Pos = 240;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 500;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 14;
                        X_Pos = 500;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor2Amount = dectotalAmount.ToString();

                    }
                    Y_Pos = 220;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName.ToString(), TblFontBold), 110, Y_Pos, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendor1Amount.ToString(), TblFontBold), 410, Y_Pos, 0);

                    Y_Pos = 240;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName.ToString(), TblFontBold), 110, Y_Pos, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendor2Amount.ToString(), TblFontBold), 410, Y_Pos, 0);

                    if (FileName == "EligLet_SPAN")
                    {
                        if (BaseForm.BaseAgencyControlDetails.AgyShortName == "STDC") Y_Pos = 100;
                        else Y_Pos = 97;
                    }
                    else
                        Y_Pos = 95;//85; 97
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.Date.ToShortDateString()), TblFontBold), 410, Y_Pos, 0);



                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        private void On_PCSEligLetter2025()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "PCS_EligLet_ENG_2025.pdf";
            PdfName = "PCS_EligLet_ENG_2025";
            if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            {
                ReaderName = propReportPath + "\\" + "PCS_EligLet_SPAN_2025.pdf";
                PdfName = "PCS_EligLet_SPAN_2025";
            }
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                List<CustomQuestionsEntity> custResponses = new List<CustomQuestionsEntity>();
                custResponses = _model.CaseMstData.CAPS_CASEUSAGE_GET(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty; string Apt = string.Empty; string Floor = string.Empty; string Suffix = string.Empty; string Street = string.Empty; string Direction = string.Empty;
                    string AppAddress = string.Empty; string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }


                    //    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";

                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";

                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";

                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";


                    //string Address = HN + Direction + Street + Suffix;


                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 117; Y_Pos -= 78;//99;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 470;


                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 117; Y_Pos -= 19;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress , TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 117; Y_Pos -= 19;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    // X_Pos = 120; Y_Pos -= 14;
                    // ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 75; Y_Pos -= 20;





                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 110; Y_Pos -= 90;

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(strFirstVendorName.Trim()))
                    {
                        strAccountNumber = CASESPM_SP_List[0].SPM_Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }



                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 380;

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 26;






                    decimal ResAmount = 0; string ChkNo = string.Empty; string ChkDate = string.Empty; string ServsDate = string.Empty; string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0; ChkNo = string.Empty; ChkDate = string.Empty; ServsDate = string.Empty; SeekDate = string.Empty; CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        /*Caseusage data
                        if(custResponses.Count>0)
                        {
                            CustomQuestionsEntity SelRec = new CustomQuestionsEntity();
                            List<CustomQuestionsEntity> PrimRecs = custResponses.FindAll(u => u.USAGE_LUMP_PRIM != string.Empty);
                            if(PrimRecs.Count>0)
                            {
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "JAN");
                                if(SelRec!=null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                Y_Pos -= 16;
                                X_Pos = 240;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "JUL");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 16;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "FEB");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "AUG");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 16;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "MAR");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "SEP");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 16;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "APR");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "OCT");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 16;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "MAY");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "NOV");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 16;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "JUN");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "DEC");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_PRIM).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                            }
                        }
                        */

                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        Y_Pos -= 16;
                        X_Pos = 240;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 16;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 16;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 16;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 16;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 500;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 16;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 19;
                        X_Pos = 500;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor1Amount = dectotalAmount.ToString();
                    }


                    string strsecondVendorName = string.Empty;

                    if (SP_OtherActivity_Details.Count > 0)//SP_OtherActivity_Details
                    {

                        Y_Pos = 362;
                        strAccountNumber = string.Empty;
                        strsecondVendorName = string.Empty;

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strsecondVendorName = vddname.Name;
                            }
                        }
                        if (string.IsNullOrEmpty(strsecondVendorName.Trim()))
                        {
                            strAccountNumber = CASESPM_SP_List[0].SPM_Gas_Account;
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                                if (vddname != null)
                                {
                                    strsecondVendorName = vddname.Name;
                                }
                            }
                        }

                        X_Pos = 117;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 380;

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    }
                    strElec = "O";
                    Y_Pos -= 26;

                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        /*Caseusage data
                        if (custResponses.Count > 0)
                        {
                            CustomQuestionsEntity SelRec = new CustomQuestionsEntity();
                            List<CustomQuestionsEntity> PrimRecs = custResponses.FindAll(u => u.USAGE_LUMP_SEC != string.Empty);
                            if (PrimRecs.Count > 0)
                            {
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "JAN");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                Y_Pos -= 15;
                                X_Pos = 240;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "JUL");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 15;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "FEB");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "AUG");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 15;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "MAR");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "SEP");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 15;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "APR");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "OCT");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 15;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "MAY");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "NOV");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 15;
                                X_Pos = 240; strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "JUN");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                                X_Pos = 500;
                                strAmount = string.Empty;
                                SelRec = PrimRecs.Find(u => u.USAGE_MONTH == "DEC");
                                if (SelRec != null)
                                {
                                    strAmount = Convert.ToDecimal(SelRec.USAGE_LUMP_SEC).ToString("N2");
                                }
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                            }
                        }
                        */

                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        Y_Pos -= 15;
                        X_Pos = 240;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 15;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 15;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 15;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 15;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 500;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 15;
                        X_Pos = 240;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 500;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 20;
                        X_Pos = 500;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor1Amount = dectotalAmount.ToString();
                    }



                    //if (SP_OtherActivity_Details.Count > 0)
                    //{
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }

                    //    Y_Pos -= 14;
                    //    X_Pos = 240;
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                    //    X_Pos = 500;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    Y_Pos -= 14;
                    //    X_Pos = 240;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    X_Pos = 500;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                    //    Y_Pos -= 14;
                    //    X_Pos = 240;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    X_Pos = 500;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                    //    Y_Pos -= 14;
                    //    X_Pos = 240;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    X_Pos = 500;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    Y_Pos -= 14;
                    //    X_Pos = 240;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }

                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                    //    strAmount = string.Empty;
                    //    X_Pos = 500;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    Y_Pos -= 14;
                    //    X_Pos = 240;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                    //    X_Pos = 500;
                    //    strAmount = string.Empty;
                    //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                    //    if (CaseactList.Count > 0)
                    //    {
                    //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                    //    }
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //    List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                    //    decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                    //    Y_Pos -= 14;
                    //    X_Pos = 500;
                    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                    //    strVendor2Amount = dectotalAmount.ToString();

                    //}



                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        void SendEmail()
        {
            //if (chkbSend.Checked)
            // {
            int docno = 0;
            string _docoutputname = "";
            string _docCode = gvApp.CurrentRow.Cells["gvCode"].Value.ToString();
            string _isSignReqired = gvApp.CurrentRow.Cells["gvSign"].Value.ToString();

            if (_docCode != "")
            {
                DataSet ds = DatabaseLayer.MainMenu.GET_PRINAPPCNTL(string.Empty, string.Empty, string.Empty, "L");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        DataRow[] dr = ds.Tables[0].Select("PAC_FORM='" + _docCode + "' AND PAC_AGY='" + BaseForm.BaseAgency + "'");
                        if (dr.Length > 0)
                        {
                            docno = AlienTXDB.getMaxDocNo(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo, _docCode, "DOCSEQNO");
                            string dcname = dr[0]["PAC_DISP_NAME"].ToString().Replace("&", "").Replace(" ", "_").Replace("__", "_");
                            if (_isSignReqired.ToString().Trim() == "Y")
                            {
                                if (dcname.Contains("/"))
                                    dcname = dcname.Replace('/', '_');

                                if (docno > 1)
                                    _docoutputname = dcname + "_" + docno.ToString();
                                else
                                    _docoutputname = dcname;
                            }
                            else
                            {
                                if (dcname.Contains("/"))
                                    _docoutputname = dcname.Replace('/', '_');
                                else
                                    _docoutputname = dcname;
                            }
                        }
                    }
                }
            }

            CopytoSignFolder(PdfName, _docoutputname, _docCode, _isSignReqired, docno.ToString());
            // }
        }

        void CopytoSignFolder(string _PdfName, string outputFileName, string docCode, string _isSignReqired, string _docseqNo)
        {
            /***************************************** COPY PDF File to Signatures folder *******************************************************/
            /***********************************************************************************************************************************/
            //if (_isSendMail)
            // {
            string fromPDFPath = _PdfName;
            string pdfFileName = outputFileName + ".pdf"; // outputFileName + "_" + _baseApplicationNo + ".pdf";

            string AppFolderName = BaseForm.BaseAgency + BaseForm.BaseDept + BaseForm.BaseProg + BaseForm.BaseApplicationNo;
            string HIEAppno = AppFolderName;
            //string AppFolderPath = Application.StartupPath + "\\custdocsignpdfs\\" + AppFolderName + "\\";
            string SignFolder = propReportPath + "\\SignForms\\";
            if (!Directory.Exists(SignFolder))
                Directory.CreateDirectory(SignFolder);

            string AppFolderPath = SignFolder + AppFolderName + "\\";
            if (!Directory.Exists(AppFolderPath))
                Directory.CreateDirectory(AppFolderPath);

            string _toPDFPath = AppFolderPath + "\\" + pdfFileName;

            File.Copy(fromPDFPath, _toPDFPath, true);
            var model = new CaptainModel();
            var AgyCntrlDets = model.ZipCodeAndAgency.GetAgencyControlFile("00");

            string strStreet = "", strCity = "", strState = "", strZIP = "";
            if (AgyCntrlDets != null)
            {
                if (AgyCntrlDets.Street != "")
                    strStreet = AgyCntrlDets.Street + ", ";
                if (AgyCntrlDets.City != "")
                    strCity = AgyCntrlDets.City + ", ";
                if (AgyCntrlDets.State != "")
                    strState = AgyCntrlDets.State + ", ";
                if (AgyCntrlDets.Zip1 != "")
                    strZIP = AgyCntrlDets.Zip1 + ".";
            }

           string _officeAddress = strStreet + strCity + (strCity != "" ? ("" + strState) : strState) + strZIP;


            //if (BaseForm.BaseCaseMstListEntity[0].Email.Trim().ToLower() == "kranthivardhan@gmail.com" || BaseForm.BaseCaseMstListEntity[0].Email.Trim().ToLower() == "ram@capsystems.com"
            //        || BaseForm.BaseCaseMstListEntity[0].Email.Trim().ToLower() == "vikashchatla1516@gmail.com"
            //        || BaseForm.BaseCaseMstListEntity[0].Email.Trim().ToLower() == "bcayer@capsystems.com" || BaseForm.BaseCaseMstListEntity[0].Email.Trim().ToLower() == "sudheergedala@gmail.com")
            //{
                if (chkbSend.Checked)
                    SendEmail(BaseForm.BaseCaseMstListEntity[0].Email.Trim(), HIEAppno, "1", _officeAddress, (BaseForm.BaseCaseMstListEntity[0].FirstName + " " + BaseForm.BaseCaseMstListEntity[0].LastName));

           // }

            if (SaveDocSignHist(pdfFileName, docCode, _isSignReqired, _docseqNo))
            {
                if (chkbSend.Checked && _isemailSent == "Y")
                {
                    //AlertBox.Show("Sent to client’s email: " + BaseForm.BaseCaseMstListEntity[0].Email.Trim());
                }
            }
            // }
            /************************************************************************************************/
        }
        string _isemailSent = "N";
        AlienTXData _oAlienTXData = new AlienTXData();
        bool SaveDocSignHist(string _DocName, string docCode, string _isSignReqired, string docseqNo)
        {
            string _strPrintFor = "R";
            if (chkbSend.Checked)
                _strPrintFor = "S";

            bool _isSaveFlag = _oAlienTXData.INSUPDEL_DOCSIGNHIS("", BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, BaseForm.BaseYear, BaseForm.BaseApplicationNo,
                docCode, BaseForm.BaseCaseMstListEntity[0].Email.Trim(), _isSignReqired, "", "", BaseForm.UserID, docseqNo, _DocName, _strPrintFor, 
                (chkbSend.Checked == true ? "Y" : "N"),_emailStatus,_emailStatusDate, "ADD");

            return _isSaveFlag;
        }

        private void SendEmail(string ToemailID, string HIEAppno, string Keycode, string _officeAddr, string ApplicantName)
        {
            _isemailSent = "N";
            try
            {
                var model = new CaptainModel();
                var dtMailConfig = model.UserProfileAccess.GetEMailSetting("SIGNPDF");

                if (dtMailConfig.Rows.Count > 0)
                {
                    //var mailMessage = new MailMessage();
                    //mailMessage.From = new MailAddress(dtMailConfig.Rows[0]["MAIL_EMAILID"].ToString(), BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper());
                    //mailMessage.Subject = dtMailConfig.Rows[0]["MAIL_SUBJECT"].ToString();

                    /******************************* PARAMETERS FOR URL ***************************************/
                    /*****************************************************************************************/
                    List<SignParams> _signParams = new List<SignParams>();
                    SignParams _sgParms = new SignParams();
                    _sgParms.HIEAppno = HIEAppno;
                    //_sgParms.baseprivileges = _baseprivileges;
                    //_sgParms.baseAgyTabsEntity = _baseAgyTabsEntity;
                    //_sgParms.baseCaseMstListEntity = _baseCaseMstListEntity;
                    //_sgParms.baseCaseSnpEntity = _baseCaseSnpEntity;
                    //_sgParms.baseAgencyControlDetails = _baseAgencyControlDetails;
                    //_sgParms.baseUserProfile = _baseUserProfile;
                    _sgParms.baseApplicationNo = BaseForm.BaseApplicationNo;
                    _sgParms.baseApplicationName = BaseForm.BaseApplicationName;
                    _sgParms.baseUSERID = BaseForm.UserID;
                    _sgParms.baseAgency = BaseForm.BaseAgency;
                    _sgParms.baseDept = BaseForm.BaseDept;
                    _sgParms.baseProg = BaseForm.BaseProg;
                    _sgParms.baseYear = BaseForm.BaseYear;
                    _sgParms.baseAgyShortName = BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper();
                    _sgParms.keyCode = Keycode;
                    _signParams.Add(_sgParms);
                    var jsonParms = JsonConvert.SerializeObject(_signParams);
                    //byte[] bytes = Encoding.ASCII.GetBytes(jsonParms);
                    /**********************************************************************/
                    /**********************************************************************/
                    var body = dtMailConfig.Rows[0]["MAIL_CONTENT"].ToString() + " <a href=" + Application.Uri.AbsoluteUri + "/custdocsign.aspx?idparms=" + WM_EncryptUrl(jsonParms.ToString()) + "  target='_blank' style='background-color: #ff6a00; border-radius:15px; border: none;color: white;padding: 10px 20px;text-align: center;text-decoration: none;display: inline-block;font-size: 18px;margin: 4px 2px;cursor: pointer;'>Click here to sign on your documents</a>";
                    body = body + "<br/><br/><br/><br/><br/>Thank You,<br/><b>" + BaseForm.BaseAgencyControlDetails.AgyName.ToUpper() + "</b><br/><b>" + _officeAddr+"</b>";

                    body = body.Replace("User,", BaseForm.BaseApplicationName + ", ");
                  
                    //mailMessage.Body = body;
                    //mailMessage.IsBodyHtml = true;

                    //mailMessage.To.Add(ToemailID);


                    //var smtp = new SmtpClient();
                    //smtp.Host = dtMailConfig.Rows[0]["MAIL_HOST"].ToString();
                    //smtp.EnableSsl = true;
                    //var NetworkCred = new System.Net.NetworkCredential();
                    //NetworkCred.UserName = dtMailConfig.Rows[0]["MAIL_EMAILID"].ToString();
                    //NetworkCred.Password = dtMailConfig.Rows[0]["MAIL_PASSWORD"].ToString();
                    //smtp.UseDefaultCredentials = true;
                    //smtp.Credentials = NetworkCred;
                    //smtp.Port = int.Parse(dtMailConfig.Rows[0]["MAIL_PORT"].ToString());
                    //smtp.Send(mailMessage);

                    /*******************************************************/
                    TwilloSendGridEmail obj = new TwilloSendGridEmail();
                    obj.SendEmailAsync(ToemailID, dtMailConfig.Rows[0]["MAIL_SUBJECT"].ToString(), body, BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper(),
                        BaseForm.BaseAgencyControlDetails.AgyShortName.ToUpper(),"Alien Form Sign Doc", "Sent to client’s email: " + ToemailID);
                    /*******************************************************/

                    _emailStatus = obj.Emailstatus;
                    _emailStatusDate = obj.EmailstatusDate;

                    if (_emailStatus == "delivered")
                        _isemailSent = "Y";
                    else
                        _isemailSent = "N";
                }
            }
            catch (Exception ex)
            {
                _isemailSent = "N";
                // pnlUserlogin.Visible = true;
                AlertBox.Show("Failed to send email.", MessageBoxIcon.Warning);
                //AlertBox.Show(ex.Message, MessageBoxIcon.Warning);

                //lblerrormsg.Text = ex.Message; //"email not delivered!";

                //lblerrormsg.Text = "email not delivered!";          
                //Response.Write(ex.Message);
            }
        }

        public string _emailStatus = "";
        public string _emailStatusDate = "";
        public string WM_EncryptUrl(string ourl)
        {
            string result = string.Empty;

            try
            {
                string _encrypturl = HttpUtility.UrlEncode(AlienTXDB.Encrypt(ourl.ToString()));
                result = _encrypturl;
            }
            catch (Exception ex)
            {
                result = ex.Message;
            }
            return result;
        }

        private void On_NCCAAEligLetterNew()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "NCCAA_CEAP_ELIG.pdf";
            PdfName = "NCCAA_CEAP_ELIG";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    //string Direction = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    //string Street = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    //string Suffix = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    //string Address = HN + Direction + Street + Suffix;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    string City = string.Empty; string State = string.Empty;string Zip = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                            City = caseDiffDetails.City.Trim(); State = caseDiffDetails.State.Trim();Zip= "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                            City = BaseForm.BaseCaseMstListEntity[0].City.Trim(); State = BaseForm.BaseCaseMstListEntity[0].State.Trim(); Zip = "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        City = BaseForm.BaseCaseMstListEntity[0].City.Trim(); State = BaseForm.BaseCaseMstListEntity[0].State.Trim(); Zip = "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }


                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 123; Y_Pos -= 96;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 450;


                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 127; Y_Pos -= 24;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 450;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 78; Y_Pos -= 24;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(City, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 270;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(State, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 430;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Zip, TblFontBold), X_Pos, Y_Pos, 0);

                    //// X_Pos = 120; Y_Pos -= 14;
                    //// ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    ////X_Pos = 75; Y_Pos -= 20;


                    X_Pos = 131; Y_Pos -= 103;

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 440;

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 26;
                    string strsecondVendorName = string.Empty;

                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        //Y_Pos = 388;
                        strAccountNumber = string.Empty;
                        strsecondVendorName = string.Empty;

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strsecondVendorName = vddname.Name;
                            }
                        }

                        X_Pos = 140;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 440;//365;

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    }

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(SecondarySourceName.ToString(), TblFontBold), 207, Y_Pos - 50, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(SecondarySourceName.ToString(), TblFontBold), 483, Y_Pos - 50, 0);

                    Y_Pos -= 50;


                    decimal ResAmount = 0; string ChkNo = string.Empty; string ChkDate = string.Empty; string ServsDate = string.Empty; string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0; ChkNo = string.Empty; ChkDate = string.Empty; ServsDate = string.Empty; SeekDate = string.Empty; CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        Y_Pos -= 17;
                        X_Pos = 150;//175;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 215;//240;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 270;//305;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "1");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }


                        X_Pos = 428;// 453;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 488;// 513;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;// 573;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "7");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }


                        Y_Pos -= 20;
                        X_Pos = 150;//175;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 215;//240;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 270;//305;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "2");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        X_Pos = 428;// 453;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 488;// 513;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;// 573;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "8");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 20;
                        X_Pos = 150;//175;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 215;//240;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 270;// 305;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "3");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        X_Pos = 428;// 453;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 488;// 513;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;// 573;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "9");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }


                        Y_Pos -= 20;
                        X_Pos = 150;//175;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 215;//240;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 270;// 305;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "4");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        X_Pos = 428;// 453;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 488;// 513;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;// 573;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "10");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 20;
                        X_Pos = 150;//175;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 215;//240;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 270;//305;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "5");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        strAmount = string.Empty;
                        X_Pos = 428;// 453;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 488;// 513;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;// 573;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "11");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 20;
                        X_Pos = 150;//175;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 215;// 240;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 270;// 305;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "6");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        X_Pos = 428;// 453;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 488;// 513;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;// 573;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "12");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 22;//20;
                        X_Pos = 428;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor1Amount = dectotalAmount.ToString();

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            List<CASEACTEntity> SPOthToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                            decimal decOthtotalAmount = SPOthToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                            //Y_Pos -= 20;
                            X_Pos = 488;// 513;
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(decOthtotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                            strVendor2Amount = decOthtotalAmount.ToString();
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 548;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                    }


                    Y_Pos = 170;//85; 97
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.Date.ToShortDateString()), TblFontBold), 445, Y_Pos, 0);

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                SendEmail();
                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }


        private void On_FORTWORTHEligLetterNew()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "FORTWORTH_CEAP_ELIG.pdf";
            PdfName = "FORTWORTH_CEAP_ELIG";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBold10 = new iTextSharp.text.Font(bf_times, 10);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    //string Direction = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    //string Street = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    //string Suffix = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    //string Address = HN + Direction + Street + Suffix;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 200; Y_Pos -= 100;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    //X_Pos = 450;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 137; Y_Pos -= 14;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold10), X_Pos, Y_Pos, 0);

                    //X_Pos = 450;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 147; Y_Pos -= 12;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold10), X_Pos, Y_Pos, 0);

                    //X_Pos = 270;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].State, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 430;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);

                    //// X_Pos = 120; Y_Pos -= 14;
                    //// ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    //X_Pos = 75; Y_Pos -= 20;


                    X_Pos = 470; Y_Pos -= 45;

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        if (dectotalAmount > 0) strVendor1Amount = dectotalAmount.ToString();

                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendor1Amount, TblFontBold), X_Pos, Y_Pos, 0);


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 440;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 26;
                    string strsecondVendorName = string.Empty;

                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        //Y_Pos = 388;
                        strAccountNumber = string.Empty;
                        strsecondVendorName = string.Empty;

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        if (dectotalAmount > 0) strVendor2Amount = dectotalAmount.ToString();
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strsecondVendorName = vddname.Name;
                            }
                        }

                        X_Pos = 140;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 440;//365;

                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    }


                    Y_Pos -= 50;



                    decimal ResAmount = 0; string ChkNo = string.Empty; string ChkDate = string.Empty; string ServsDate = string.Empty; string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0; ChkNo = string.Empty; ChkDate = string.Empty; ServsDate = string.Empty; SeekDate = string.Empty; CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";
                    if (SP_ElectricActivity_Details.Count > 0 || SP_OtherActivity_Details.Count > 0)
                    {
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //}

                        //Y_Pos -= 20;
                        //X_Pos = 175;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //if (SP_OtherActivity_Details.Count > 0)
                        //{
                        //    X_Pos = 240;
                        //    strAmount = string.Empty;
                        //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == "O");
                        //    if (CaseactList.Count > 0)
                        //    {
                        //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    }
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        //}


                        //X_Pos = 453;
                        //strAmount = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //}
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //if (SP_OtherActivity_Details.Count > 0)
                        //{
                        //    X_Pos = 513;
                        //    strAmount = string.Empty;
                        //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == "O");
                        //    if (CaseactList.Count > 0)
                        //    {
                        //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    }
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        //}


                        //Y_Pos -= 20;
                        //X_Pos = 175;
                        //strAmount = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //}
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //if (SP_OtherActivity_Details.Count > 0)
                        //{
                        //    X_Pos = 240;
                        //    strAmount = string.Empty;
                        //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == "O");
                        //    if (CaseactList.Count > 0)
                        //    {
                        //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    }
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        //}

                        //X_Pos = 453;
                        //strAmount = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //}
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //if (SP_OtherActivity_Details.Count > 0)
                        //{
                        //    X_Pos = 513;
                        //    strAmount = string.Empty;
                        //    CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == "O");
                        //    if (CaseactList.Count > 0)
                        //    {
                        //        strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    }
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        //}

                        Y_Pos -= 20;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), 360, Y_Pos, 0);

                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), 425, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "3");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 24;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "4");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 24;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "5");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 24;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "6");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 23;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "7");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 23;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "8");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 23;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "9");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 23;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "10");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 23;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "11");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }

                        Y_Pos -= 23;
                        X_Pos = 297;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            X_Pos = 362;
                            strAmount = string.Empty;
                            CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == "O");
                            if (CaseactList.Count > 0)
                            {
                                strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ACT_Date).Month.ToString() == "12");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }


                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 23;
                        X_Pos = 297;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor1Amount = dectotalAmount.ToString();

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            List<CASEACTEntity> SPOthToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                            decimal decOthtotalAmount = SPOthToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                            //Y_Pos -= 20;
                            X_Pos = 362;
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(decOthtotalAmount.ToString("N2"), TblFontBold), X_Pos, Y_Pos, 0);
                            strVendor2Amount = decOthtotalAmount.ToString();
                        }
                        if (SP_WaterActivity_Details.Count > 0)
                        {
                            X_Pos = 427;
                            strAmount = string.Empty;
                            CaseactList = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != "");
                            if (CaseactList.Count > 0)
                            {
                                decimal decAmount = CaseactList.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                                strAmount = decAmount.ToString("N2");
                            }
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        }
                    }


                    Y_Pos = 75;//85; 97
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CaseworkerName(BaseForm.BaseCaseMstListEntity[0].IntakeWorker.Trim()), TblFontBold), 110, Y_Pos, 0);



                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();

                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        private void On_CSNTEligLetter1()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;
            if (BaseForm.BaseAgencyControlDetails.AgyShortName == "BVCOG")
                ReaderName = propReportPath + "\\" + "BVCOG_EligLet.pdf";
            else
                ReaderName = propReportPath + "\\" + "CSNT_EligLet.pdf";
            PdfName = "CSNT_CEAP_ELIG";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);

                try
                {

                    //string HN = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    //string Direction = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    //string Street = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    //string Suffix = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    //string Address = HN + Direction + Street + Suffix;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 560;//Y_Pos = 686;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Date: " + LookupDataAccess.Getdate(DateTime.Now.ToString()), TblFontBold), X_Pos, 686, 0);

                    X_Pos = 27; Y_Pos -= 96;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);


                    //X_Pos = 450;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 20;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 450;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 20;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 270;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].State, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 430;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);

                    //// X_Pos = 120; Y_Pos -= 14;
                    //// ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    ////X_Pos = 75; Y_Pos -= 20;


                    X_Pos = 300; Y_Pos -= 64;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseYear, TblFontBold), X_Pos, Y_Pos, 0);



                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;

                    X_Pos = 35;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);
                    Y_Pos -= 30;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strAmount = string.Empty; string MonthName = string.Empty;

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    //PdfPTable head = new PdfPTable(1);
                    //head.HorizontalAlignment = Element.ALIGN_CENTER;
                    //head.TotalWidth = 50f;
                    //PdfPCell headcell = new PdfPCell(new Phrase(""));
                    //headcell.HorizontalAlignment = Element.ALIGN_CENTER;
                    //headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //head.AddCell(headcell);

                    PdfPTable Table = new PdfPTable(3);
                    Table.TotalWidth = 350f;
                    Table.WidthPercentage = 100;
                    Table.LockedWidth = true;
                    float[] widths = new float[] { 22f,80f,18f};   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
                    Table.SetWidths(widths);
                    Table.HorizontalAlignment = Element.ALIGN_CENTER;
                    //Table.SpacingBefore = 200f;




                    //SP_ElectricActivity_Details = SP_ElectricActivity_Details.OrderBy(u => u.ACT_Date.ToString()).ToList();
                    if (CaseactList.Count > 0)
                    {
                        //strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        //if (CaseVddlist.Count > 0)
                        //{
                        //    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CaseactList[0].Vendor_No);
                        //    if (vddname != null)
                        //    {
                        //        strFirstVendorName = vddname.Name;
                        //    }
                        //}

                        Y_Pos -= 20;
                        foreach (CASEACTEntity Entity in CaseactList)
                        {
                            //Y_Pos -= 20;
                            strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                            MonthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                            MonthName = LookupDataAccess.GetFixedLengthString(MonthName, 15);

                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                if (vddname != null)
                                {
                                    strFirstVendorName = vddname.Name;
                                }
                            }
                            strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                            PdfPCell row1 = new PdfPCell(new Phrase(MonthName, TblFontBold));
                            row1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //row1.FixedHeight = 15f;
                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Table.AddCell(row1);

                            row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                            row1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //row1.FixedHeight = 15f;
                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Table.AddCell(row1);

                            row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                            row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            //row1.FixedHeight = 15f;
                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Table.AddCell(row1);

                            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(MonthName + "   " + strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), 390, Y_Pos, 0);

                        }

                    }

                    PdfTemplate template = cb.CreateTemplate(600, 400);
                    iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                    cb.AddTemplate(template, 30, 325); // Position of the template x-axis and y-axis

                    ColumnText ct = new ColumnText(template);
                    ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 
                    //ct.SetSimpleColumn(new Phrase("SUDHEER", TblFontBold), 30, 30, X_Pos, Y_Pos, 3, 1);
                    ct.AddElement(Table);
                    ct.Go();





                    //PdfTemplate tableTemplate = cb.CreateTemplate(1500, 1300);
                    //Table.WriteSelectedRows(0, Table.Rows.Count, X_Pos, Y_Pos, Hstamper.GetOverContent(-1));



                    //X_Pos = 30;
                    //string DepZip = string.Empty, DepPhone = string.Empty, DepFax = string.Empty;
                    //if(!string.IsNullOrEmpty(programEntity.Zip.Trim())) DepZip= programEntity.Zip.Trim();
                    //if (!string.IsNullOrEmpty(programEntity.Phone.Trim())) DepPhone = "Phone: "+ programEntity.Phone.Trim();
                    //if (!string.IsNullOrEmpty(programEntity.DepFax.Trim())) DepFax = "Fax: " + programEntity.DepFax.Trim();
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(programEntity.Address1+" "+programEntity.City+" "+programEntity.State+" ", TblFontBold), X_Pos, 25, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DepPhone+" "+DepFax, TblFontBold), 575, 25, 0);

                    X_Pos = 30;
                    if(BaseForm.BaseAgencyControlDetails.AgyShortName.Trim()=="BVCOG")
                    {
                        BaseFont bf_Tahoma = BaseFont.CreateFont("c:/windows/fonts/tahoma.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                        iTextSharp.text.Font Tahoma = new iTextSharp.text.Font(bf_Tahoma, 12, 1,BaseColor.DARK_GRAY.Brighter());

                        if (CASESITEList.Count>0) 
                        {
                            CaseSiteEntity siteEntity = CASESITEList.Find(u => u.SiteNUMBER == BaseForm.BaseCaseMstListEntity[0].Site.Trim());
                            if(siteEntity!=null)
                            {
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(siteEntity.SiteSTREET.Trim() + ", " + siteEntity.SiteCITY.Trim()+", "+ siteEntity.SiteSTATE.Trim()+", "+ siteEntity.SiteZIP.Trim(), Tahoma), X_Pos, 25, 0);
                                string DepPhone = string.Empty, DepFax = string.Empty;
                                if (!string.IsNullOrEmpty(siteEntity.SitePHONE.Trim())) DepPhone = "Phone: " + siteEntity.SitePHONE.Trim();
                                if (!string.IsNullOrEmpty(siteEntity.SiteFAX.Trim())) DepFax = "Fax: " + siteEntity.SiteFAX.Trim();
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DepPhone + " " + DepFax, Tahoma), 575, 25, 0);
                            }

                        }


                        //Hreader = Hreader.SelectPages("2");
                        //if (siteEntity != null)
                        //{
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(siteEntity.SiteSTREET.Trim() + ", " + siteEntity.SiteCITY.Trim() + ", " + siteEntity.SiteSTATE.Trim() + ", " + siteEntity.SiteZIP.Trim(), Tahoma), X_Pos, 25, 0);
                        //    string DepPhone = string.Empty, DepFax = string.Empty;
                        //    if (!string.IsNullOrEmpty(siteEntity.SitePHONE.Trim())) DepPhone = "Phone: " + siteEntity.SitePHONE.Trim();
                        //    if (!string.IsNullOrEmpty(siteEntity.SiteFAX.Trim())) DepFax = "Fax: " + siteEntity.SiteFAX.Trim();
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DepPhone + " " + DepFax, Tahoma), 575, 25, 0);
                        //}
                    }


                    Hstamper.Close();

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();

                SendEmail();


                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        private void On_CSNTEligLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;
            if (BaseForm.BaseAgencyControlDetails.AgyShortName == "BVCOG")
                ReaderName = propReportPath + "\\" + "BVCOG_EligLet.pdf";
            else if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
            {
                if (int.Parse(BaseForm.BaseYear) > 2023)
                    ReaderName = propReportPath + "\\" + BaseForm.BaseYear+"_CSNT_EligLet.pdf";
                else
                    ReaderName = propReportPath + "\\" + "CSNT_EligLet.pdf";
            }
            else
                ReaderName = propReportPath + "\\" + "CSNT_EligLet.pdf";

            PdfName = "CSNT_CEAP_ELIG";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                //Hstamper.Writer.SetPageSize(PageSize.A4);
                //PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                ProgramDefinitionEntity programEntity = _model.HierarchyAndPrograms.GetCaseDepadp(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg);

                try
                {

                    //string HN = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    //string Direction = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    //string Street = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    //string Suffix = string.Empty;
                    //if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    //string Address = HN + Direction + Street + Suffix;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    //PdfLayer layer = new PdfLayer("Layer", Hstamper.Writer);
                    int pagecnt = Hreader.NumberOfPages;

                    for (int i = 1; i <= pagecnt; i++)
                    {
                        Hstamper.Writer.SetPageSize(PageSize.A4);
                        PdfContentByte cb = Hstamper.GetOverContent(i);
                        //cb.BeginLayer(layer);
                        if (i==1)
                        {
                            List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                            string strAmount = string.Empty; string MonthName = string.Empty;

                            if (PropCaseactList.Count > 0)
                                CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                            if (CaseactList.Count > 0)
                                CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                            CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                            string strAccountNumber = string.Empty;
                            string strFirstVendorName = string.Empty;
                            string strVendor1Amount = string.Empty;
                            string strVendor2Amount = string.Empty;

                            if(!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseYear) > 2023 && BaseForm.BaseAgencyControlDetails.AgyShortName == "CSNT")
                                {
                                    X_Pos = 350; Y_Pos = 630;

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(BaseForm.BaseApplicationName.Trim(), TblFontBold), X_Pos, Y_Pos, 0);
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(BaseForm.BaseApplicationNo.Trim(), TblFontBold), X_Pos, Y_Pos - 20, 0);
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos - 40, 0);
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos - 55, 0);

                                    PdfPTable Table = new PdfPTable(3);
                                    Table.TotalWidth = 350f;
                                    Table.WidthPercentage = 100;
                                    Table.LockedWidth = true;
                                    float[] widths = new float[] { 22f, 80f, 18f };   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
                                    Table.SetWidths(widths);
                                    Table.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //Table.SpacingBefore = 200f;

                                    if (CaseactList.Count > 0)
                                    {

                                        Y_Pos -= 20;
                                        foreach (CASEACTEntity Entity in CaseactList)
                                        {
                                            //Y_Pos -= 20;
                                            strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                            MonthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                            MonthName = LookupDataAccess.GetFixedLengthString(MonthName, 15);

                                            if (CaseVddlist.Count > 0)
                                            {
                                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                                if (vddname != null)
                                                {
                                                    strFirstVendorName = vddname.Name;
                                                }
                                            }
                                            strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                            PdfPCell row1 = new PdfPCell(new Phrase(MonthName, TblFontBold));
                                            row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                            //row1.FixedHeight = 15f;
                                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                            Table.AddCell(row1);

                                            row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                            row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                            //row1.FixedHeight = 15f;
                                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                            Table.AddCell(row1);

                                            row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                            row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                            //row1.FixedHeight = 15f;
                                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                            Table.AddCell(row1);


                                        }

                                    }

                                    PdfTemplate template = cb.CreateTemplate(600, 400);
                                    iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                                    cb.AddTemplate(template, 120, 285); // Position of the template x-axis and y-axis

                                    ColumnText ct = new ColumnText(template);
                                    ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                                    ct.AddElement(Table);
                                    ct.Go();


                                }
                                else
                                {


                                    X_Pos = 60; Y_Pos = 760;

                                    X_Pos = 560;//Y_Pos = 686;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Date: " + LookupDataAccess.Getdate(DateTime.Now.ToString()), TblFontBold), X_Pos, 686, 0);

                                    X_Pos = 27; Y_Pos -= 96;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);


                                    //X_Pos = 450;


                                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                                    Y_Pos -= 20;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                                    //X_Pos = 450;
                                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);


                                    Y_Pos -= 20;
                                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                                    //X_Pos = 270;
                                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].State, TblFontBold), X_Pos, Y_Pos, 0);

                                    //X_Pos = 430;
                                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);

                                    //// X_Pos = 120; Y_Pos -= 14;
                                    //// ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                                    ////X_Pos = 75; Y_Pos -= 20;


                                    X_Pos = 300; Y_Pos -= 64;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseYear, TblFontBold), X_Pos, Y_Pos, 0);



                                    X_Pos = 35;

                                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);
                                    Y_Pos -= 30;


                                    //PdfPTable head = new PdfPTable(1);
                                    //head.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //head.TotalWidth = 50f;
                                    //PdfPCell headcell = new PdfPCell(new Phrase(""));
                                    //headcell.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                    //head.AddCell(headcell);

                                    PdfPTable Table = new PdfPTable(3);
                                    Table.TotalWidth = 350f;
                                    Table.WidthPercentage = 100;
                                    Table.LockedWidth = true;
                                    float[] widths = new float[] { 22f, 80f, 18f };   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
                                    Table.SetWidths(widths);
                                    Table.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //Table.SpacingBefore = 200f;




                                    //SP_ElectricActivity_Details = SP_ElectricActivity_Details.OrderBy(u => u.ACT_Date.ToString()).ToList();
                                    if (CaseactList.Count > 0)
                                    {
                                        //strAccountNumber = SP_ElectricActivity_Details[0].Account;
                                        //if (CaseVddlist.Count > 0)
                                        //{
                                        //    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CaseactList[0].Vendor_No);
                                        //    if (vddname != null)
                                        //    {
                                        //        strFirstVendorName = vddname.Name;
                                        //    }
                                        //}

                                        Y_Pos -= 20;
                                        foreach (CASEACTEntity Entity in CaseactList)
                                        {
                                            //Y_Pos -= 20;
                                            strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                            MonthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                            MonthName = LookupDataAccess.GetFixedLengthString(MonthName, 15);

                                            if (CaseVddlist.Count > 0)
                                            {
                                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                                if (vddname != null)
                                                {
                                                    strFirstVendorName = vddname.Name;
                                                }
                                            }
                                            strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                            PdfPCell row1 = new PdfPCell(new Phrase(MonthName, TblFontBold));
                                            row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                            //row1.FixedHeight = 15f;
                                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                            Table.AddCell(row1);

                                            row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                            row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                            //row1.FixedHeight = 15f;
                                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                            Table.AddCell(row1);

                                            row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                            row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                            //row1.FixedHeight = 15f;
                                            row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                            Table.AddCell(row1);

                                            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(MonthName + "   " + strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                                            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), 390, Y_Pos, 0);

                                        }

                                    }

                                    PdfTemplate template = cb.CreateTemplate(600, 400);
                                    iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                                    cb.AddTemplate(template, 30, 325); // Position of the template x-axis and y-axis

                                    ColumnText ct = new ColumnText(template);
                                    ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 
                                                                                                 //ct.SetSimpleColumn(new Phrase("SUDHEER", TblFontBold), 30, 30, X_Pos, Y_Pos, 3, 1);
                                    ct.AddElement(Table);
                                    ct.Go();

                                }
                            }
                            else
                            {


                                X_Pos = 60; Y_Pos = 760;

                                X_Pos = 560;//Y_Pos = 686;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Date: " + LookupDataAccess.Getdate(DateTime.Now.ToString()), TblFontBold), X_Pos, 686, 0);

                                X_Pos = 27; Y_Pos -= 96;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);


                                //X_Pos = 450;


                                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                                Y_Pos -= 20;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                                //X_Pos = 450;
                                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);


                                Y_Pos -= 20;
                                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                                //X_Pos = 270;
                                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].State, TblFontBold), X_Pos, Y_Pos, 0);

                                //X_Pos = 430;
                                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);

                                //// X_Pos = 120; Y_Pos -= 14;
                                //// ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                                ////X_Pos = 75; Y_Pos -= 20;


                                X_Pos = 300; Y_Pos -= 64;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseYear, TblFontBold), X_Pos, Y_Pos, 0);



                                X_Pos = 35;

                                //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);
                                Y_Pos -= 30;


                                //PdfPTable head = new PdfPTable(1);
                                //head.HorizontalAlignment = Element.ALIGN_CENTER;
                                //head.TotalWidth = 50f;
                                //PdfPCell headcell = new PdfPCell(new Phrase(""));
                                //headcell.HorizontalAlignment = Element.ALIGN_CENTER;
                                //headcell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //head.AddCell(headcell);

                                PdfPTable Table = new PdfPTable(3);
                                Table.TotalWidth = 350f;
                                Table.WidthPercentage = 100;
                                Table.LockedWidth = true;
                                float[] widths = new float[] { 22f, 80f, 18f };   //{ 55ff, 45f, 25f, 25f, 10f, 13f, 30f, 28f, 42f, 18f, 18f, 22f, 35f }; 
                                Table.SetWidths(widths);
                                Table.HorizontalAlignment = Element.ALIGN_CENTER;
                                //Table.SpacingBefore = 200f;




                                //SP_ElectricActivity_Details = SP_ElectricActivity_Details.OrderBy(u => u.ACT_Date.ToString()).ToList();
                                if (CaseactList.Count > 0)
                                {
                                    //strAccountNumber = SP_ElectricActivity_Details[0].Account;
                                    //if (CaseVddlist.Count > 0)
                                    //{
                                    //    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CaseactList[0].Vendor_No);
                                    //    if (vddname != null)
                                    //    {
                                    //        strFirstVendorName = vddname.Name;
                                    //    }
                                    //}

                                    Y_Pos -= 20;
                                    foreach (CASEACTEntity Entity in CaseactList)
                                    {
                                        //Y_Pos -= 20;
                                        strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                        MonthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                        MonthName = LookupDataAccess.GetFixedLengthString(MonthName, 15);

                                        if (CaseVddlist.Count > 0)
                                        {
                                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                            if (vddname != null)
                                            {
                                                strFirstVendorName = vddname.Name;
                                            }
                                        }
                                        strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                        PdfPCell row1 = new PdfPCell(new Phrase(MonthName, TblFontBold));
                                        row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        //row1.FixedHeight = 15f;
                                        row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                        Table.AddCell(row1);

                                        row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                        row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        //row1.FixedHeight = 15f;
                                        row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                        Table.AddCell(row1);

                                        row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                        row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                        //row1.FixedHeight = 15f;
                                        row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                        Table.AddCell(row1);

                                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(MonthName + "   " + strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), 390, Y_Pos, 0);

                                    }

                                }

                                PdfTemplate template = cb.CreateTemplate(600, 400);
                                iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                                cb.AddTemplate(template, 30, 325); // Position of the template x-axis and y-axis

                                ColumnText ct = new ColumnText(template);
                                ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 
                                                                                             //ct.SetSimpleColumn(new Phrase("SUDHEER", TblFontBold), 30, 30, X_Pos, Y_Pos, 3, 1);
                                ct.AddElement(Table);
                                ct.Go();

                            }




                            X_Pos = 30;
                            if (BaseForm.BaseAgencyControlDetails.AgyShortName.Trim() == "BVCOG")
                            {
                                BaseFont bf_Tahoma = BaseFont.CreateFont("c:/windows/fonts/tahoma.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                                iTextSharp.text.Font Tahoma = new iTextSharp.text.Font(bf_Tahoma, 12, 1, BaseColor.DARK_GRAY.Brighter());

                                if (CASESITEList.Count > 0)
                                {
                                    CaseSiteEntity siteEntity = CASESITEList.Find(u => u.SiteNUMBER == BaseForm.BaseCaseMstListEntity[0].Site.Trim());
                                    if (siteEntity != null)
                                    {
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(siteEntity.SiteSTREET.Trim() + ", " + siteEntity.SiteCITY.Trim() + ", " + siteEntity.SiteSTATE.Trim() + ", " + siteEntity.SiteZIP.Trim(), Tahoma), X_Pos, 25, 0);
                                        string DepPhone = string.Empty, DepFax = string.Empty;
                                        if (!string.IsNullOrEmpty(siteEntity.SitePHONE.Trim())) DepPhone = "Phone: " + siteEntity.SitePHONE.Trim();
                                        if (!string.IsNullOrEmpty(siteEntity.SiteFAX.Trim())) DepFax = "Fax: " + siteEntity.SiteFAX.Trim();
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DepPhone + "   " + DepFax, Tahoma), 575, 25, 0);
                                    }

                                }
                                
                            }

                        }
                        else
                        {
                            X_Pos = 30;
                            if (BaseForm.BaseAgencyControlDetails.AgyShortName.Trim() == "BVCOG")
                            {
                                BaseFont bf_Tahoma = BaseFont.CreateFont("c:/windows/fonts/tahoma.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                                iTextSharp.text.Font Tahoma = new iTextSharp.text.Font(bf_Tahoma, 12, 1, BaseColor.DARK_GRAY.Brighter());

                                if (CASESITEList.Count > 0)
                                {
                                    CaseSiteEntity siteEntity = CASESITEList.Find(u => u.SiteNUMBER == BaseForm.BaseCaseMstListEntity[0].Site.Trim());
                                    if (siteEntity != null)
                                    {
                                        string DepZip = string.Empty;
                                        if (!string.IsNullOrEmpty(siteEntity.SiteZIP.Trim())) DepZip = ", " + siteEntity.SiteZIP.Trim();
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(siteEntity.SiteSTREET.Trim() + ", " + siteEntity.SiteCITY.Trim() + ", " + siteEntity.SiteSTATE.Trim() + DepZip, Tahoma), X_Pos, 25, 0);
                                        string DepPhone = string.Empty, DepFax = string.Empty;
                                        if (!string.IsNullOrEmpty(siteEntity.SitePHONE.Trim())) DepPhone = "Phone: " + siteEntity.SitePHONE.Trim();
                                        if (!string.IsNullOrEmpty(siteEntity.SiteFAX.Trim())) DepFax = "Fax: " + siteEntity.SiteFAX.Trim();
                                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DepPhone + "   " + DepFax, Tahoma), 575, 25, 0);
                                    }

                                }

                            }
                        }
                        //cb.EndLayer(layer);
                    }



                        




                    //PdfTemplate tableTemplate = cb.CreateTemplate(1500, 1300);
                    //Table.WriteSelectedRows(0, Table.Rows.Count, X_Pos, Y_Pos, Hstamper.GetOverContent(-1));



                    //X_Pos = 30;
                    //string DepZip = string.Empty, DepPhone = string.Empty, DepFax = string.Empty;
                    //if(!string.IsNullOrEmpty(programEntity.Zip.Trim())) DepZip= programEntity.Zip.Trim();
                    //if (!string.IsNullOrEmpty(programEntity.Phone.Trim())) DepPhone = "Phone: "+ programEntity.Phone.Trim();
                    //if (!string.IsNullOrEmpty(programEntity.DepFax.Trim())) DepFax = "Fax: " + programEntity.DepFax.Trim();
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(programEntity.Address1+" "+programEntity.City+" "+programEntity.State+" ", TblFontBold), X_Pos, 25, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(DepPhone+" "+DepFax, TblFontBold), 575, 25, 0);

                   


                    //Hstamper.Close();

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();

                SendEmail();


                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        


        private void On_PCS_EligLetterSpanish()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "PCS_EligLet_SPAN.pdf";



            PdfName = "PCS_EligLet_SPAN";//form.GetFileName();
            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
                // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    string HN = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    string Direction = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    string Street = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    string Suffix = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    string Address = HN + Direction + Street + Suffix;


                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 117; Y_Pos -= 89;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 470;


                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 117; Y_Pos -= 17;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address + " " + BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);

                    // X_Pos = 120; Y_Pos -= 14;
                    // ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 75; Y_Pos -= 20;





                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 117; Y_Pos -= 92;

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strFirstVendorName = vddname.Name;
                            }
                        }
                    }
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 430;

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);


                    Y_Pos -= 22;






                    decimal ResAmount = 0; string ChkNo = string.Empty; string ChkDate = string.Empty; string ServsDate = string.Empty; string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0; ChkNo = string.Empty; ChkDate = string.Empty; ServsDate = string.Empty; SeekDate = string.Empty; CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";
                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        Y_Pos -= 14;
                        X_Pos = 180;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 445;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 14;
                        X_Pos = 445;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(dectotalAmount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor1Amount = dectotalAmount.ToString();
                    }


                    string strsecondVendorName = string.Empty;

                    if (SP_OtherActivity_Details.Count > 0)
                    {


                        Y_Pos = 400;
                        strAccountNumber = string.Empty;
                        strsecondVendorName = string.Empty;

                        strAccountNumber = SP_OtherActivity_Details[0].Account;
                        if (CaseVddlist.Count > 0)
                        {
                            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                            if (vddname != null)
                            {
                                strsecondVendorName = vddname.Name;
                            }
                        }

                        X_Pos = 117;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 430;

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), X_Pos, Y_Pos, 0);

                    }
                    strElec = "O";
                    Y_Pos = 380;
                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        Y_Pos -= 14;
                        X_Pos = 180;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }

                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        strAmount = string.Empty;
                        X_Pos = 445;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        Y_Pos -= 14;
                        X_Pos = 180;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);
                        X_Pos = 445;
                        strAmount = string.Empty;
                        CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        if (CaseactList.Count > 0)
                        {
                            strAmount = CaseactList[0].Cost;
                        }
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
                        Y_Pos -= 14;
                        X_Pos = 445;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(dectotalAmount.ToString(), TblFontBold), X_Pos, Y_Pos, 0);
                        strVendor2Amount = dectotalAmount.ToString();

                    }
                    Y_Pos = 225;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName.ToString(), TblFontBold), 117, Y_Pos, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendor1Amount.ToString(), TblFontBold), 430, Y_Pos, 0);

                    Y_Pos = 200;
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName.ToString(), TblFontBold), 117, Y_Pos, 0);
                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strVendor2Amount.ToString(), TblFontBold), 430, Y_Pos, 0);

                    Y_Pos = 90;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.Date.ToShortDateString()), TblFontBold), 430, Y_Pos, 0);


                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }


        private void On_PCS_DeniedLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            ReaderName = propReportPath + "\\" + "PCS_Denial_ENGSPAN.pdf";



            PdfName = "PCS_Denial_ENGSPAN";//form.GetFileName();
            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));
                // iTextSharp.text.Image _image_Checked = iTextSharp.text.Image.GetInstance(Context.Server.MapPath("~\\Resources\\Icons\\16X16\\CheckBoxChecked.JPG"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    string HN = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
                    string Direction = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
                    string Street = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
                    string Suffix = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
                    string Address = HN + Direction + Street + Suffix;


                    X_Pos = 60; Y_Pos = 760;

                    X_Pos = 75; Y_Pos -= 113;//110;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 470;


                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 75; Y_Pos -= 24;//27
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Address + " " + BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);

                    // X_Pos = 120; Y_Pos -= 14;
                    // ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].City + " " + BaseForm.BaseCaseMstListEntity[0].State + " " + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold), X_Pos, Y_Pos, 0);


                    X_Pos = 75; Y_Pos -= 20;

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 40; Y_Pos -= 92;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("123", TblFontBold), X_Pos, Y_Pos, 0);




                    //X_Pos = 20; Y_Pos = 400;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other", TblFontBold), X_Pos, Y_Pos, 0);



                    //X_Pos = 120; Y_Pos = 350;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other REason222", TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 120; Y_Pos -= 30;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other REason1", TblFontBold), X_Pos, Y_Pos, 0);


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other", TblFontBold), X_Pos, Y_Pos, 0);



                    //X_Pos = 120; Y_Pos = -30;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other REason222", TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 120; Y_Pos -= 30;


                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Other REason1", TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 430;


                    Y_Pos = 190;//240;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(DateTime.Now.Date.ToShortDateString()), TblFontBold), 430, Y_Pos, 0);


                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();

                SendEmail();
                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        //Vikash added on 10/10/2024
        private void RPMC_Elig_Letter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "RPMC_Elig_let.pdf";
            PdfName = "RPMC_Elig_let";

            if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            {
                ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
                PdfName = "EligLet_SPAN";
            }
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);

                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TblFontBoldd = new iTextSharp.text.Font(bf_times, 11,1);
                iTextSharp.text.Font TblFontBolddd = new iTextSharp.text.Font(bf_times, 12, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {
                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";

                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 60;
                    Y_Pos = 760;

                    X_Pos = 40;
                    Y_Pos -= 130;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 40;
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 40;
                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    X_Pos = 110;
                    Y_Pos -= 60;

                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        CASEVDDEntity vendEName = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                        if (vendEName != null)
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(vendEName.Name, TblFontBolddd), X_Pos, Y_Pos, 0);
                    }
                    else
                    {
                        CASEVDDEntity vendEName = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                        if (vendEName != null)
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(vendEName.Name, TblFontBolddd), X_Pos, Y_Pos, 0);
                    }

                    X_Pos = 400;
                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        CASEVDDEntity vendOName = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                        if (vendOName != null)
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(vendOName.Name, TblFontBolddd), X_Pos, Y_Pos, 0);
                    }
                    else
                    {
                        CASEVDDEntity vendEName = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                        if (vendEName != null)
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(vendEName.Name, TblFontBolddd), X_Pos, Y_Pos, 0);
                    }

                    decimal ResAmount = 0;
                    string ChkNo = string.Empty;
                    string ChkDate = string.Empty;
                    string ServsDate = string.Empty;
                    string SeekDate = string.Empty;
                    CASEACTEntity CaseactRec = new CASEACTEntity();

                    ResAmount = 0;
                    ChkNo = string.Empty;
                    ChkDate = string.Empty;
                    ServsDate = string.Empty;
                    SeekDate = string.Empty;
                    CaseactRec = new CASEACTEntity();
                    string strAmount = string.Empty;
                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
                    string strElec = "E";

                    if (SP_ElectricActivity_Details.Count > 0)
                    {
                        Y_Pos = 518;

                        SP_ElectricActivity_Details = SP_ElectricActivity_Details.OrderBy(u => Convert.ToDateTime(u.ACT_Date)).ToList();

                        foreach (CASEACTEntity entity in SP_ElectricActivity_Details)
                        {
                            strAmount = string.Empty;
                            ServsDate = string.Empty;

                            strAmount = Convert.ToDecimal(entity.Cost).ToString("N2");
                            ServsDate = entity.ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(entity.ACT_Date.ToString()).ToString("MM/dd/yyyy");

                            Y_Pos -= 20;
                            X_Pos = 95;
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                            X_Pos = 260;
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        }

                        decimal Prim_ArrearsCost = 0;

                        if (PropCaseactList.Count > 0)
                        {
                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Vendor_No == SP_ElectricActivity_Details[0].Vendor_No && u.Elec_Other=="");

                            if (ArrearList.Count > 0)
                            {
                                Y_Pos -= 20;
                                X_Pos = 95;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ArrearList[0].ACT_Date == "" ? "" : LookupDataAccess.Getdate(ArrearList[0].ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos = 260;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(ArrearList[0].Cost, TblFontBold), X_Pos, Y_Pos, 0);

                                Prim_ArrearsCost = ArrearList[0].Cost == "" ? 0 : Convert.ToDecimal(ArrearList[0].Cost);
                            }
                        }


                        List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim())) + Prim_ArrearsCost;
                        //Y_Pos -= 20;
                        X_Pos = 260;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBoldd), X_Pos, 238, 0);

                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}

                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}

                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_ElectricActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 95;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 260;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);



                    }
                    else
                    {
                        Y_Pos = 518;

                        decimal Prim_ArrearsCost = 0;

                        if (PropCaseactList.Count > 0)
                        {
                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Vendor_No == CASESPM_SP_List[0].SPM_Vendor && u.Elec_Other == "");

                            if (ArrearList.Count > 0)
                            {
                                Y_Pos -= 20;
                                X_Pos = 95;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ArrearList[0].ACT_Date == "" ? "" : LookupDataAccess.Getdate(ArrearList[0].ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos = 260;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(ArrearList[0].Cost, TblFontBold), X_Pos, Y_Pos, 0);

                                Prim_ArrearsCost = ArrearList[0].Cost == "" ? 0 : Convert.ToDecimal(ArrearList[0].Cost);

                                List<CASEACTEntity> SPToatalDetails = ArrearList.FindAll(u => u.Cost != "");
                                decimal dectotalAmount = /*SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim())) +*/ Prim_ArrearsCost;

                                X_Pos = 260;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBoldd), X_Pos, 238, 0);
                            }
                        }
                    }

                    strElec = "O";
                    Y_Pos = 600;
                    Y_Pos -= 82;//102;
                    if (SP_OtherActivity_Details.Count > 0)
                    {
                        SP_OtherActivity_Details = SP_OtherActivity_Details.OrderBy(u => Convert.ToDateTime(u.ACT_Date)).ToList();

                        foreach (CASEACTEntity entity in SP_OtherActivity_Details)
                        {
                            strAmount = string.Empty;
                            ServsDate = string.Empty;

                            strAmount = Convert.ToDecimal(entity.Cost).ToString("N2");
                            ServsDate = entity.ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(entity.ACT_Date.ToString()).ToString("MM/dd/yyyy");

                            Y_Pos -= 20;
                            X_Pos = 375;
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                            X_Pos = 550;
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        }

                        decimal Sec_ArrearsCost = 0;

                        if (PropCaseactList.Count > 0)
                        {
                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No && u.Elec_Other == "");

                            if (ArrearList.Count > 0)
                            {
                                Y_Pos -= 20;
                                X_Pos = 375;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ArrearList[0].ACT_Date == "" ? "" : LookupDataAccess.Getdate(ArrearList[0].ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos = 550;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(ArrearList[0].Cost, TblFontBold), X_Pos, Y_Pos, 0);

                                Sec_ArrearsCost = ArrearList[0].Cost == "" ? 0 : Convert.ToDecimal(ArrearList[0].Cost);
                            }
                        }

                        List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
                        decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim())) + Sec_ArrearsCost;
                        //Y_Pos -= 20;
                        X_Pos = 550;
                        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBoldd), X_Pos, 238, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "1" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}

                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "2" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "3" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "4" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "5" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}

                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "6" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "7" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);



                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "8" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);



                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "9" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "10" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "11" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                        //strAmount = string.Empty;
                        //ServsDate = string.Empty;
                        //CaseactList = SP_OtherActivity_Details.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == "12" && u.Elec_Other == strElec);
                        //if (CaseactList.Count > 0)
                        //{
                        //    strAmount = Convert.ToDecimal(CaseactList[0].Cost).ToString("N2");
                        //    ServsDate = CaseactList[0].ACT_Date.ToString() == "" ? "" : Convert.ToDateTime(CaseactList[0].ACT_Date.ToString()).ToString("MM/dd/yyyy");
                        //}
                        //Y_Pos -= 20;
                        //X_Pos = 375;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ServsDate, TblFontBold), X_Pos, Y_Pos, 0);

                        //X_Pos = 550;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                    }
                    else
                    {
                        decimal Sec_ArrearsCost = 0;

                        if (PropCaseactList.Count > 0)
                        {
                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Vendor_No == CASESPM_SP_List[0].SPM_Gas_Vendor && u.Elec_Other == "");

                            if (ArrearList.Count > 0)
                            {
                                Y_Pos -= 20;
                                X_Pos = 375;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(ArrearList[0].ACT_Date == "" ? "" : LookupDataAccess.Getdate(ArrearList[0].ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos = 550;

                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(ArrearList[0].Cost, TblFontBold), X_Pos, Y_Pos, 0);

                                Sec_ArrearsCost = ArrearList[0].Cost == "" ? 0 : Convert.ToDecimal(ArrearList[0].Cost);

                                List<CASEACTEntity> SPToatalDetails = ArrearList.FindAll(u => u.Cost != "");
                                decimal dectotalAmount = /*SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim())) + */Sec_ArrearsCost;

                                X_Pos = 550;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(dectotalAmount.ToString("N2"), TblFontBoldd), X_Pos, 238, 0);
                            }
                        }
                    }
                }
                catch (Exception ex) { }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        List<CASEACTEntity> PropCaseactList = new List<CASEACTEntity>();
        List<CASEACTEntity> SP_Activity_Details = new List<CASEACTEntity>();
        List<CASEACTEntity> SP_ElectricActivity_Details = new List<CASEACTEntity>();
        List<CASEACTEntity> SP_OtherActivity_Details = new List<CASEACTEntity>();
        List<CASEACTEntity> SP_WaterActivity_Details = new List<CASEACTEntity>();
        List<CASEACTEntity> SP_PrimArrears_Details = new List<CASEACTEntity>();
        List<CASEACTEntity> SP_SecArrears_Details = new List<CASEACTEntity>();
        List<CMBDCEntity> EMSBDC_List = new List<CMBDCEntity>();

        private void gvApp_SelectionChanged(object sender, EventArgs e)
        {
            //if (gvApp.Rows.Count > 0)
            //{
            //    if (gvApp.SelectedRows[0]["gvSign"].Value.ToString() == "Y" && !string.IsNullOrEmpty(lblEmail.Text.Trim()))
            //        chkbSend.Visible = true;
            //    else
            //        chkbSend.Visible = false;
            //}
            //else
            //    chkbSend.Visible = false;
        }

        private void Get_App_CASEACT_List()
        {

            CASEACTEntity Search_Enty = new CASEACTEntity(true);
            Search_Enty.Agency = BaseForm.BaseAgency;
            Search_Enty.Dept = BaseForm.BaseDept;
            Search_Enty.Program = BaseForm.BaseProg;
            Search_Enty.Year = BaseForm.BaseYear;
            Search_Enty.App_no = BaseForm.BaseApplicationNo;
            Search_Enty.SPM_Seq = SpmSeq;
            //Search_Enty.Service_plan = SPMCode;


            PropCaseactList = _model.SPAdminData.Browse_CASEACT(Search_Enty, "Browse", "PAYMENT");

            if (PropCaseactList.Count > 0)
                SP_Activity_Details = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

            if (SP_Activity_Details.Count > 0)
                SP_Activity_Details = SP_Activity_Details.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

            SP_ElectricActivity_Details = SP_Activity_Details.FindAll(u => u.Elec_Other == "E" && u.Service_plan == SPMCode);
           
            SP_PrimArrears_Details = PropCaseactList.FindAll(u => u.Service_plan == SPMCode && u.Vendor_No.ToString() == CASESPM_SP_List[0].SPM_Vendor.ToString() && u.Bulk=="A" && u.Elec_Other=="");
            SP_SecArrears_Details = PropCaseactList.FindAll(u => u.Service_plan == SPMCode && u.Vendor_No.ToString() == CASESPM_SP_List[0].SPM_Gas_Vendor.ToString() && u.Bulk == "A" && u.Elec_Other == "");

            SP_OtherActivity_Details = SP_Activity_Details.FindAll(u => u.Elec_Other == "O" && u.Service_plan == SPMCode);

            if (CEAPCNTL_List.Count > 0)
            {
                SP_WaterActivity_Details = PropCaseactList.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_P1_SP && (u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P1_CA1.Trim() || u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P1_CA2.Trim() || u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P1_CA3.Trim())) ||
                                            (u.Service_plan == CEAPCNTL_List[0].CPCT_P2_SP && (u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P2_CA1.Trim() || u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P2_CA2.Trim() || u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P2_CA3.Trim())) ||
                                            (u.Service_plan == CEAPCNTL_List[0].CPCT_P3_SP && (u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P3_CA1.Trim() || u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P3_CA2.Trim() || u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_P3_CA3.Trim())));
            }

            if (SP_WaterActivity_Details.Count > 0)
            {
                SP_WaterActivity_Details = SP_WaterActivity_Details.FindAll(u => u.Cost.Trim() != string.Empty);
            }

            //Search_Enty.App_no = string.Empty;
            //PropCaseactList = _model.SPAdminData.Browse_CASEACT(Search_Enty, "Browse", "PAYMENT");
            // if (PropCaseactList.Count > 0) PropCaseactList = PropCaseactList.FindAll(u => u.Elec_Other == StrElec);

            //if (PropCaseactList.Count > 0) txtRemTrans.Text = PropCaseactList.Count.ToString();

            EMSBDC_List = _model.SPAdminData.GetCMBdcAllData(BaseForm.BaseAgency, BaseForm.BaseDept, BaseForm.BaseProg, string.Empty, string.Empty, string.Empty);

        }

        #endregion


        //private void NCCAA_RFP()
        //{
        //    Random_Filename = null;

        //    string Curr_Date = DateTime.Today.ToShortDateString();
        //    Curr_Date = Curr_Date.Replace("/", "");

        //    PdfName = "Fortworth_CEAP+ELIG";//form.GetFileName();
        //    PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
        //    try
        //    {
        //        if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
        //        { DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim()); }
        //    }
        //    catch (Exception ex)
        //    {
        //        AlertBox.Show("Error", MessageBoxIcon.Error);
        //    }


        //    try
        //    {
        //        string Tmpstr = PdfName + ".pdf";
        //        if (File.Exists(Tmpstr))
        //            File.Delete(Tmpstr);
        //    }
        //    catch (Exception ex)
        //    {
        //        int length = 8;
        //        string newFileName = System.Guid.NewGuid().ToString();
        //        newFileName = newFileName.Replace("-", string.Empty);

        //        Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
        //    }

        //    if (!string.IsNullOrEmpty(Random_Filename))
        //        PdfName = Random_Filename;
        //    else
        //        PdfName += ".pdf";

        //    FileStream fs = new FileStream(PdfName, FileMode.Create);

        //    //Document document = new Document();
        //    //document.SetPageSize(iTextSharp.text.PageSize.LETTER.Rotate());
        //    Document document = new Document(PageSize.A4, 25, 25, 30, 30);
        //    PdfWriter writer = PdfWriter.GetInstance(document, fs);
        //    document.Open();
        //    //BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        //    //BaseFont bf_times_Check = BaseFont.CreateFont("c:/windows/fonts/WINGDNG2.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
        //    //iTextSharp.text.Font Times_Check = new iTextSharp.text.Font(bf_times_Check, 10);
        //    BaseFont bf_times = BaseFont.CreateFont(Application.MapPath("~\\Fonts\\GOTHIC.TTF"), BaseFont.WINANSI, BaseFont.EMBEDDED);

        //    iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
        //    BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
        //    iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(1, 9, 4);
        //    BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

        //    iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 9);
        //    iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 8);
        //    iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 8, 3);
        //    iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 9, 1);
        //    iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 8, 2);
        //    iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 9, 4);
        //    //iTextSharp.text.Font TableFontBold = new iTextSharp.text.Font(1, 12, 1);

        //    iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

        //    _image_Tick.ScalePercent(60f);

        //    iTextSharp.text.Image FTWheaderjpg = iTextSharp.text.Image.GetInstance(propReportPath + "/Forthworth-01.png");
        //    FTWheaderjpg.ScalePercent(3f);

        //    var FontblcakColour = new BaseColor(13, 13, 13);
        //    var TableFont12Bold = FontFactory.GetFont("Calibri", 11, FontblcakColour);


        //    //var TblFontBold = FontFactory.GetFont("GOTHIC", 8,1, FontblcakColour);

        //    //var TableFont = FontFactory.GetFont("Century Gothic", 8, FontblcakColour);

        //    var FontblueColour = new BaseColor(31, 114, 186);//(109, 161, 206);
        //    var TableFontblue = FontFactory.GetFont("Calibri", 9, FontblueColour);

        //    var TableFont12underline = FontFactory.GetFont("Calibri", 8, 4, FontblcakColour);

        //    cb = writer.DirectContent;

        //    Get_Vendor_List();

        //    Get_App_CASEACT_List();

        //    try
        //    {
        //        string HN = string.Empty;
        //        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim())) HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + " ";
        //        string Direction = string.Empty;
        //        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim())) Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + " ";
        //        string Street = string.Empty;
        //        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Street.Trim())) Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + " ";
        //        string Suffix = string.Empty;
        //        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim())) Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + " ";
        //        string Address = HN + Direction + Street + Suffix;

        //        PdfPTable Table = new PdfPTable(1);
        //        Table.TotalWidth = 470f;
        //        Table.WidthPercentage = 100;
        //        Table.LockedWidth = true;
        //        float[] widths = new float[] { 100f };
        //        Table.SetWidths(widths);
        //        Table.HorizontalAlignment = Element.ALIGN_CENTER;
        //        //Table.SpacingBefore=

        //        PdfPCell H1 = new PdfPCell(FTWheaderjpg);
        //        H1.HorizontalAlignment = Element.ALIGN_CENTER;
        //        H1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H1);

        //        PdfPCell B0 = new PdfPCell(new Phrase("", TableFont));
        //        B0.HorizontalAlignment = Element.ALIGN_LEFT;
        //        B0.FixedHeight = 10f;
        //        B0.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(B0);

        //        Phrase phrase = new Phrase(new Chunk("DATE: ", TableFont));
        //        phrase.Add(new Chunk(DateTime.Now.ToShortDateString(), TblFontBold));


        //        PdfPCell H2 = new PdfPCell(phrase);
        //        H2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        H2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H2);

        //        PdfPCell B1 = new PdfPCell(new Phrase("",TableFont));
        //        B1.HorizontalAlignment = Element.ALIGN_LEFT;
        //        B1.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(B1);

        //        PdfPCell H3 = new PdfPCell(new Phrase("Applicant’s Name: "+ BaseForm.BaseApplicationName, TblFontBold));
        //        H3.HorizontalAlignment = Element.ALIGN_LEFT;
        //        H3.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H3);

        //        //phrase.Clear();
        //        phrase = new Phrase(new Chunk("Address: ", TableFont));
        //        phrase.Add(new Chunk(Address, TblFontBold));


        //        PdfPCell H4 = new PdfPCell(phrase);
        //        H4.HorizontalAlignment = Element.ALIGN_LEFT;
        //        H4.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H4);

        //        //phrase.Clear();
        //        phrase = new Phrase(new Chunk("Address 2: ", TableFont));
        //        phrase.Add(new Chunk(BaseForm.BaseCaseMstListEntity[0].City + "," + BaseForm.BaseCaseMstListEntity[0].State + "," + BaseForm.BaseCaseMstListEntity[0].Zip, TblFontBold));


        //        PdfPCell H5 = new PdfPCell(phrase);
        //        H5.HorizontalAlignment = Element.ALIGN_LEFT;
        //        H5.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H5);

        //        PdfPCell B2 = new PdfPCell(new Phrase("", TableFont));
        //        B2.HorizontalAlignment = Element.ALIGN_LEFT;
        //        B2.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(B2);

        //        string strAccountNumber = string.Empty;
        //        string strFirstVendorName = string.Empty;
        //        string strVendor1Amount = string.Empty;
        //        string strVendor2Amount = string.Empty; string strsecondVendorName = string.Empty;
        //        string FSource = string.Empty; string Smonth = string.Empty;
        //        if(PropCaseactList.Count>0)
        //        {
        //            PropCaseactList=PropCaseactList.FindAll(u => u.Cost != "");
        //            PropCaseactList = PropCaseactList.OrderBy(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();
        //            Smonth = Convert.ToDateTime(PropCaseactList[0].ACT_Date.Trim()).Month.ToString();
        //            strVendor1Amount = PropCaseactList[0].Cost;
        //            //List<CASEACTEntity> Selcaseacts = PropCaseactList.FindAll(u => u.Cost != "");
        //            if (CaseVddlist.Count > 0)
        //            {
        //                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == PropCaseactList[0].Vendor_No);
        //                if (vddname != null)
        //                {
        //                    strFirstVendorName = vddname.Name;
        //                    FSource = PropCaseactList[0].CA_Source.Trim();
        //                }
        //            }
        //            List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();
        //            if (!string.IsNullOrEmpty(Smonth.Trim()))
        //            {
        //                CaseactList = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && Convert.ToDateTime(u.ActSeek_Date).Month.ToString() == (int.Parse(Smonth)+1).ToString());
        //                if (CaseactList.Count > 0)
        //                {
        //                    strVendor2Amount = CaseactList[0].Cost;
        //                    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CaseactList[0].Vendor_No);
        //                    if (vddname != null)
        //                    {
        //                        strsecondVendorName = vddname.Name;
        //                        //FSource = PropCaseactList[0].CA_Source.Trim();
        //                    }
        //                }
        //            }

        //        }

        //        //if (SP_ElectricActivity_Details.Count > 0)
        //        //{
        //        //    strAccountNumber = SP_ElectricActivity_Details[0].Account;
        //        //    List<CASEACTEntity> SPToatalDetails = SP_ElectricActivity_Details.FindAll(u => u.Cost != "");
        //        //    decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
        //        //    if (dectotalAmount > 0) strVendor1Amount = dectotalAmount.ToString();

        //        //    if (CaseVddlist.Count > 0)
        //        //    {
        //        //        CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
        //        //        if (vddname != null)
        //        //        {
        //        //            strFirstVendorName = vddname.Name;
        //        //        }
        //        //    }
        //        //}

        //        //if (SP_OtherActivity_Details.Count > 0)
        //        //{
        //        //    //strAccountNumber = SP_OtherActivity_Details[0].Account;
        //        //    List<CASEACTEntity> SPToatalDetails = SP_OtherActivity_Details.FindAll(u => u.Cost != "");
        //        //    decimal dectotalAmount = SPToatalDetails.Sum(x => Convert.ToDecimal(x.Cost.Trim()));
        //        //    if (dectotalAmount > 0) strVendor2Amount = dectotalAmount.ToString();

        //        //    if (CaseVddlist.Count > 0)
        //        //    {
        //        //        CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
        //        //        if (vddname != null)
        //        //        {
        //        //            strsecondVendorName = vddname.Name;
        //        //        }
        //        //    }
        //        //}

        //        phrase = new Phrase(new Chunk("Your application is complete. You are eligible for Utility Assistance during the 2023 CEAP Program year. You received an ", TableFont));
        //        phrase.Add(new Chunk("initial pledge ", TblFontBold));
        //        phrase.Add(new Chunk("of ", TableFont));
        //        phrase.Add(new Chunk("$" + strVendor1Amount, TblFontBold));
        //        phrase.Add(new Chunk(" to ", TableFont));
        //        phrase.Add(new Chunk(strFirstVendorName, TblFontBold));
        //        if (!string.IsNullOrEmpty(strVendor2Amount.Trim()))
        //        {
        //            phrase.Add(new Chunk(" and ", TableFont));
        //            phrase.Add(new Chunk("$" + strVendor2Amount, TblFontBold));
        //            phrase.Add(new Chunk(" to ", TableFont));
        //            phrase.Add(new Chunk(strsecondVendorName, TblFontBold));
        //        }

        //        PdfPCell H6 = new PdfPCell(phrase);
        //        H6.HorizontalAlignment = Element.ALIGN_LEFT;
        //        H6.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H6);

        //        phrase = new Phrase(new Chunk("You will receive assistance for the following month(s) to your electric/gas/water provider(s) as follows:", TableFont));

        //        PdfPCell H7 = new PdfPCell(phrase);
        //        H7.HorizontalAlignment = Element.ALIGN_LEFT;
        //        H7.Border = iTextSharp.text.Rectangle.NO_BORDER;
        //        Table.AddCell(H7);

        //        document.Add(Table);

        //    }
        //    catch(Exception ex) { }







        //    document.Close();
        //    fs.Close();
        //    fs.Dispose();
        //    //AlertBox.Show("Report Generated Successfully");
        //    if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
        //    {
        //        PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
        //        //objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
        //        objfrm.StartPosition = FormStartPosition.CenterScreen;
        //        objfrm.ShowDialog();
        //    }
        //    else
        //    {
        //        FrmViewer objfrm = new FrmViewer(PdfName);
        //        //objfrm.FormClosed += new Form.FormClosedEventHandler(On_Delete_PDF_File);
        //        objfrm.StartPosition = FormStartPosition.CenterScreen;
        //        objfrm.ShowDialog();
        //    }


        //}

        #region Vikash added on 10/29/2024 as per new formar for CVCAA Eligibility Letter

        private void CVCAA_EligLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "CVCAA_EligLet.pdf";
            PdfName = "CVCAA_EligLet";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                BaseFont bf_Arial = BaseFont.CreateFont("c:/windows/fonts/arialbd.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font ArialBold = new iTextSharp.text.Font(bf_times, 12, 1);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                Hstamper.Writer.SetPageSize(PageSize.A4);
                cb = Hstamper.GetOverContent(1);

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 60;
                    Y_Pos = 760;

                    X_Pos = 300;
                    Y_Pos -= 120;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(BaseForm.BaseYear + " Pledges and Energy Tips", ArialBold), X_Pos, Y_Pos, 0);

                    X_Pos = 250;
                    Y_Pos -= 28;//148;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 14;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;

                    string serDesc = string.Empty;
                    string arrear_monthName = string.Empty;
                    List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    {
                        X_Pos = 60;
                        Y_Pos -= 100;

                        PdfPTable Table = new PdfPTable(3);
                        Table.TotalWidth = 350f;
                        Table.WidthPercentage = 100;
                        Table.LockedWidth = true;
                        float[] widths = new float[] { 22f, 80f, 18f };
                        Table.SetWidths(widths);
                        Table.HorizontalAlignment = Element.ALIGN_CENTER;

                        if (CaseactList.Count > 0)
                        {
                            Y_Pos -= 20;
                            foreach (CASEACTEntity Entity in CaseactList)
                            {
                                //Y_Pos -= 20;
                                strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                                if (CaseVddlist.Count > 0)
                                {
                                    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                    if (vddname != null)
                                    {
                                        strFirstVendorName = vddname.Name;
                                    }
                                }
                                strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);
                            }

                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Elec_Other == "");

                            if (ArrearList.Count > 0)
                            {
                                foreach (CASEACTEntity arrerEntity in ArrearList)
                                {
                                    arrear_monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(arrerEntity.ACT_Date.Trim()).Month.ToString());
                                    arrear_monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                                    PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                                    row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                    Table.AddCell(row1);

                                    if (CaseVddlist.Count > 0)
                                    {
                                        CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == arrerEntity.Vendor_No);
                                        if (vddname != null)
                                        {
                                            serDesc = vddname.Name;
                                        }
                                    }
                                    serDesc = LookupDataAccess.GetFixedLengthString(serDesc.Trim(), 50);

                                    row1 = new PdfPCell(new Phrase(serDesc, TblFontBold));
                                    row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                    Table.AddCell(row1);

                                    row1 = new PdfPCell(new Phrase(arrerEntity.Cost, TblFontBold));
                                    row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                    row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                    Table.AddCell(row1);
                                }
                            }
                        }

                        PdfTemplate template = cb.CreateTemplate(600, 400);
                        iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                        cb.AddTemplate(template, 50, 285);

                        ColumnText ct = new ColumnText(template);
                        ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                        ct.AddElement(Table);
                        ct.Go();
                    }

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        #endregion

        #region Sudheer added on 11/06/2024 as per new formar for HCCAA Eligibility Letter

        private void HCCAA_EligLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "HCCAA_EligLet.pdf";
            PdfName = "HCCAA_EligLet";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBoldService = new iTextSharp.text.Font(bf_times, 10);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 40;
                    Y_Pos = 760;

                    X_Pos = 210;
                    Y_Pos -= 104;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 18;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    Hstamper.Writer.SetPageSize(PageSize.A4);
                    cb = Hstamper.GetOverContent(1);

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;
                    string strsecondVendorName = string.Empty;
                    string strSecAccountNumber = string.Empty;

                    strAccountNumber = CASESPM_SP_List[0].SPM_Account; strSecAccountNumber = CASESPM_SP_List[0].SPM_Gas_Account;
                    if (CaseVddlist.Count > 0)
                    {
                        CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                        if (vddname != null)
                        {
                            strFirstVendorName = vddname.Name;
                        }
                        vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                        if (vddname != null)
                        {
                            strsecondVendorName = vddname.Name;
                        }
                    }

                    Y_Pos -= 70;X_Pos = 40;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), X_Pos, Y_Pos, 0);

                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strAccountNumber, TblFontBold), 350, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strsecondVendorName, TblFontBold), X_Pos, Y_Pos, 0);
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strSecAccountNumber, TblFontBold), 350, Y_Pos, 0);


                    String serDesc = string.Empty;
                    List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    {
                        X_Pos = 60;
                        Y_Pos -= 120;//152

                        //PdfPTable Table = new PdfPTable(3);
                        //Table.TotalWidth = 350f;
                        //Table.WidthPercentage = 100;
                        //Table.LockedWidth = true;
                        //float[] widths = new float[] { 22f, 80f, 18f };
                        //Table.SetWidths(widths);
                        //Table.HorizontalAlignment = Element.ALIGN_CENTER;

                        if (CaseactList.Count > 0)
                        {
                            //Y_Pos -= 20;
                            foreach (CASEACTEntity Entity in CaseactList)
                            {
                                Y_Pos -= 16;
                                X_Pos = 47;
                                strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                                if (CaseVddlist.Count > 0)
                                {
                                    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                    if (vddname != null)
                                    {
                                        strFirstVendorName = vddname.Name;
                                    }
                                }
                                strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                string ServiceName = string.Empty;

                                if (CAMASTList.Count > 0)
                                {
                                    CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                                    if (CAEnt != null)
                                        ServiceName = CAEnt.Desc.Trim();
                                }


                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(Entity.ACT_Date.Trim()), TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos += 70;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ServiceName, TblFontBoldService), X_Pos, Y_Pos, 0);

                                X_Pos += 450;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                //PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);

                                //row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);

                                //row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);
                            }

                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Elec_Other=="");

                            if (ArrearList.Count > 0)
                            {
                                foreach (CASEACTEntity arrerEntity in ArrearList)
                                {
                                    Y_Pos -= 15;
                                    X_Pos = 72;

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(arrerEntity.ACT_Date == "" ? "" : LookupDataAccess.Getdate(arrerEntity.ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                                    serDesc = CA_Descriptions.Find(x => x.Code == arrerEntity.ACT_Code).Desc.ToString();
                                    X_Pos += 45;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(serDesc, TblFontBoldService), X_Pos, Y_Pos, 0);

                                    X_Pos += 450;

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(arrerEntity.Cost, TblFontBold), X_Pos, Y_Pos, 0);
                                }
                            }
                        }

                        //PdfTemplate template = cb.CreateTemplate(600, 400);
                        //iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                        //cb.AddTemplate(template, 50, 285);

                        //ColumnText ct = new ColumnText(template);
                        //ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                        //ct.AddElement(Table);
                        //ct.Go();
                    }

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        #endregion

        #region Sudheer added on 12/06/2024 as per new formar for CACOST Eligibility Letter

        private void CACOST_EligLetter_ENG()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;
            if (BaseForm.BaseCaseMstListEntity[0].Language=="02")
                ReaderName = propReportPath + "\\" + "CACOST_EligLet_SPAN.pdf";
            else
                ReaderName = propReportPath + "\\" + "CACOST_EligLet_ENG.pdf";
            
            PdfName = "CACOST_EligLet";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBoldService = new iTextSharp.text.Font(bf_times, 10);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 40;
                    Y_Pos = 760;

                    X_Pos = 240;
                    Y_Pos -= 100;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    Hstamper.Writer.SetPageSize(PageSize.A4);
                    cb = Hstamper.GetOverContent(1);

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;

                    if(CASESPM_SP_List.Count>0)
                    {
                        if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                        {
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                                if (vddname != null)
                                {
                                    strFirstVendorName = vddname.Name;
                                }
                            }
                            if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                            {
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                            }
                            else
                            {
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);
                            }
                        }
                        else if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Gas_Vendor.Trim()))
                        {
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                                if (vddname != null)
                                {
                                    strFirstVendorName = vddname.Name;
                                }
                            }
                            if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                            {
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 432, 535, 0);
                            }
                            else
                            {
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 425, 535, 0);
                            }
                        }
                        //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                        //else
                        //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);

                    }

                    String serDesc = string.Empty;
                    List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    {
                        X_Pos = 60;
                        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                            Y_Pos -= 177;
                        else
                            Y_Pos -= 172;//152;

                        //PdfPTable Table = new PdfPTable(3);
                        //Table.TotalWidth = 350f;
                        //Table.WidthPercentage = 100;
                        //Table.LockedWidth = true;
                        //float[] widths = new float[] { 22f, 80f, 18f };
                        //Table.SetWidths(widths);
                        //Table.HorizontalAlignment = Element.ALIGN_CENTER;

                        if (CaseactList.Count > 0)
                        {
                            //Y_Pos -= 20;
                            foreach (CASEACTEntity Entity in CaseactList)
                            {
                                Y_Pos -= 16;
                                X_Pos = 80;
                                strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                                if (CaseVddlist.Count > 0)
                                {
                                    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                    if (vddname != null)
                                    {
                                        strFirstVendorName = vddname.Name;
                                    }
                                }
                                strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                string ServiceName = string.Empty;

                                if (CAMASTList.Count > 0)
                                {
                                    CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                                    if (CAEnt != null)
                                        ServiceName = CAEnt.Desc.Trim();
                                }

                                //LookupDataAccess.Getdate(Entity.ACT_Date.Trim())
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(monthName, TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos += 70;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("CEAP Utility Assistance", TblFontBoldService), X_Pos, Y_Pos, 0);

                                X_Pos += 400;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                //PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);

                                //row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);

                                //row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);
                            }

                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Elec_Other == "");

                            if (ArrearList.Count > 0)
                            {
                                foreach (CASEACTEntity arrerEntity in ArrearList)
                                {
                                    Y_Pos -= 16;
                                    X_Pos = 80;

                                    monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(arrerEntity.ACT_Date.Trim()).Month.ToString());
                                    monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(monthName, TblFontBold), X_Pos, Y_Pos, 0);

                                    serDesc = CA_Descriptions.Find(x => x.Code == arrerEntity.ACT_Code).Desc.ToString();
                                    X_Pos += 70;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("CEAP Utility Assistance", TblFontBoldService), X_Pos, Y_Pos, 0);

                                    X_Pos += 400;

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(arrerEntity.Cost, TblFontBold), X_Pos, Y_Pos, 0);
                                }
                            }
                        }

                        //PdfTemplate template = cb.CreateTemplate(600, 400);
                        //iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                        //cb.AddTemplate(template, 50, 285);

                        //ColumnText ct = new ColumnText(template);
                        //ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                        //ct.AddElement(Table);
                        //ct.Go();
                    }

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        private void CACOST_InEligLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //    ReaderName = propReportPath + "\\" + "CACOST_EligLet_SPAN.pdf";
            //else
                ReaderName = propReportPath + "\\" + "CACOST_InEligLet.pdf";

            PdfName = "CACOST_InEligLet";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBoldService = new iTextSharp.text.Font(bf_times, 10);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 40;
                    Y_Pos = 760;

                    X_Pos = 320;
                    Y_Pos -= 112;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    Hstamper.Writer.SetPageSize(PageSize.A4);
                    cb = Hstamper.GetOverContent(1);

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    //string strAccountNumber = string.Empty;
                    //string strFirstVendorName = string.Empty;
                    //string strVendor1Amount = string.Empty;
                    //string strVendor2Amount = string.Empty;

                    //if (CASESPM_SP_List.Count > 0)
                    //{
                    //    if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                    //    {
                    //        if (CaseVddlist.Count > 0)
                    //        {
                    //            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                    //            if (vddname != null)
                    //            {
                    //                strFirstVendorName = vddname.Name;
                    //            }
                    //        }
                    //        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                    //        }
                    //        else
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);
                    //        }
                    //    }
                    //    else if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Gas_Vendor.Trim()))
                    //    {
                    //        if (CaseVddlist.Count > 0)
                    //        {
                    //            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                    //            if (vddname != null)
                    //            {
                    //                strFirstVendorName = vddname.Name;
                    //            }
                    //        }
                    //        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 432, 535, 0);
                    //        }
                    //        else
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 425, 535, 0);
                    //        }
                    //    }
                    //    //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                    //    //else
                    //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);

                    //}

                    //String serDesc = string.Empty;
                    //List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    //if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    //{
                    //    X_Pos = 60;
                    //    if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        Y_Pos -= 177;
                    //    else
                    //        Y_Pos -= 172;//152;

                    //    //PdfPTable Table = new PdfPTable(3);
                    //    //Table.TotalWidth = 350f;
                    //    //Table.WidthPercentage = 100;
                    //    //Table.LockedWidth = true;
                    //    //float[] widths = new float[] { 22f, 80f, 18f };
                    //    //Table.SetWidths(widths);
                    //    //Table.HorizontalAlignment = Element.ALIGN_CENTER;

                    //    if (CaseactList.Count > 0)
                    //    {
                    //        //Y_Pos -= 20;
                    //        foreach (CASEACTEntity Entity in CaseactList)
                    //        {
                    //            Y_Pos -= 16;
                    //            X_Pos = 80;
                    //            strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                    //            monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                    //            monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                    //            if (CaseVddlist.Count > 0)
                    //            {
                    //                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                    //                if (vddname != null)
                    //                {
                    //                    strFirstVendorName = vddname.Name;
                    //                }
                    //            }
                    //            strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                    //            string ServiceName = string.Empty;

                    //            if (CAMASTList.Count > 0)
                    //            {
                    //                CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                    //                if (CAEnt != null)
                    //                    ServiceName = CAEnt.Desc.Trim();
                    //            }

                    //            //LookupDataAccess.Getdate(Entity.ACT_Date.Trim())
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(monthName, TblFontBold), X_Pos, Y_Pos, 0);

                    //            X_Pos += 70;
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ServiceName, TblFontBoldService), X_Pos, Y_Pos, 0);

                    //            X_Pos += 400;
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //            //PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                    //            //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //            //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //            //Table.AddCell(row1);

                    //            //row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                    //            //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //            //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //            //Table.AddCell(row1);

                    //            //row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                    //            //row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //            //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //            //Table.AddCell(row1);
                    //        }

                    //        List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A");

                    //        if (ArrearList.Count > 0)
                    //        {
                    //            foreach (CASEACTEntity arrerEntity in ArrearList)
                    //            {
                    //                Y_Pos -= 15;
                    //                X_Pos = 72;

                    //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(arrerEntity.ACT_Date == "" ? "" : LookupDataAccess.Getdate(arrerEntity.ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                    //                serDesc = CA_Descriptions.Find(x => x.Code == arrerEntity.ACT_Code).Desc.ToString();
                    //                X_Pos += 45;
                    //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(serDesc, TblFontBoldService), X_Pos, Y_Pos, 0);

                    //                X_Pos += 450;

                    //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(arrerEntity.Cost, TblFontBold), X_Pos, Y_Pos, 0);
                    //            }
                    //        }
                    //    }

                    //    //PdfTemplate template = cb.CreateTemplate(600, 400);
                    //    //iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                    //    //cb.AddTemplate(template, 50, 285);

                    //    //ColumnText ct = new ColumnText(template);
                    //    //ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                    //    //ct.AddElement(Table);
                    //    //ct.Go();
                    //}

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }
        #endregion

        #region Sudheer added on 12/26/2024 as per new formar for WCCAA Eligibility Letter

        private void WCCAA_EligLetter_ENG()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                ReaderName = propReportPath + "\\" + "WCCAA_Elig_Approved.pdf";
            //else
            //    ReaderName = propReportPath + "\\" + "CACOST_EligLet_ENG.pdf";

            PdfName = "WCCAA_EligLet";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11,1);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBoldService = new iTextSharp.text.Font(bf_times, 10);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 40;
                    Y_Pos = 760;

                    X_Pos = 220;
                    Y_Pos -= 95;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    string EligStat = string.Empty;
                    if (CASESPM_SP_List[0].SPM_EligStatus == "E") EligStat = "Eligible";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "S") EligStat = "SSI Categorical";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "M") EligStat = "Means Tested Veterans Categorical\"";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "N") EligStat = "SNAP Categorical";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "P") EligStat = "Pending";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "D") EligStat = "Denied";

                    Y_Pos -= 25;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(EligStat, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(CASESPM_SP_List[0].startdate.Trim()), TblFontBold), X_Pos, Y_Pos, 0);

                    



                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    Hstamper.Writer.SetPageSize(PageSize.A4);
                    cb = Hstamper.GetOverContent(1);

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O" || u.Bulk=="A") && u.Service_plan == SPMCode);

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;

                    //if (CASESPM_SP_List.Count > 0)
                    //{
                    //    if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                    //    {
                    //        if (CaseVddlist.Count > 0)
                    //        {
                    //            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                    //            if (vddname != null)
                    //            {
                    //                strFirstVendorName = vddname.Name;
                    //            }
                    //        }
                    //        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                    //        }
                    //        else
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);
                    //        }
                    //    }
                    //    else if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Gas_Vendor.Trim()))
                    //    {
                    //        if (CaseVddlist.Count > 0)
                    //        {
                    //            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                    //            if (vddname != null)
                    //            {
                    //                strFirstVendorName = vddname.Name;
                    //            }
                    //        }
                    //        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 432, 535, 0);
                    //        }
                    //        else
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 425, 535, 0);
                    //        }
                    //    }
                    //    //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                    //    //else
                    //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);

                    //}

                    String serDesc = string.Empty;
                    List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    {
                        X_Pos = 60;
                        //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                        //    Y_Pos -= 177;
                        //else
                        Y_Pos -= 215;//255;//152;

                        //PdfPTable Table = new PdfPTable(3);
                        //Table.TotalWidth = 350f;
                        //Table.WidthPercentage = 100;
                        //Table.LockedWidth = true;
                        //float[] widths = new float[] { 22f, 80f, 18f };
                        //Table.SetWidths(widths);
                        //Table.HorizontalAlignment = Element.ALIGN_CENTER;

                        if (CaseactList.Count > 0)
                        {
                            PdfPTable Table = new PdfPTable(6);
                            Table.TotalWidth = 550f;
                            Table.WidthPercentage = 100;
                            Table.LockedWidth = true;
                            float[] widths = new float[] { 22f, 60f, 40f, 45f, 35f, 20f }; //{ 22f, 75f, 50f,40f,35f,20f };
                            Table.SetWidths(widths);
                            Table.HorizontalAlignment = Element.ALIGN_CENTER;

                            string[] NHCol = { "Month", "Vendor", "Billing Name", "Account Number / ESI", "Description", "Total" };
                            for (int j = 0; j < NHCol.Length; j++)
                            {
                                PdfPCell NHCell = new PdfPCell(new Phrase(NHCol[j], TblFontBold));
                                NHCell.HorizontalAlignment = Element.ALIGN_LEFT;
                                if(j==5)
                                    NHCell.HorizontalAlignment = iTextSharp.text.Rectangle.ALIGN_RIGHT;
                                
                                NHCell.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(NHCell);
                            }


                            decimal TotAmt = 0;
                            foreach (CASEACTEntity Entity in CaseactList)
                            {
                                strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);
                                TotAmt = TotAmt + Convert.ToDecimal(Entity.Cost.Trim());
                                string BDCDesc = string.Empty;
                                if (EMSBDC_List.Count > 0)
                                {
                                    CMBDCEntity BDCEntity = EMSBDC_List.Find(u => u.BDC_ID == Entity.BDC_ID);
                                    if (BDCEntity != null)
                                    {
                                        BDCDesc = BDCEntity.BDC_DESCRIPTION.Trim();
                                    }
                                }

                                if (CaseVddlist.Count > 0)
                                {
                                    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                    if (vddname != null)
                                    {
                                        strFirstVendorName = vddname.Name;
                                    }
                                }
                                strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                string ServiceName = string.Empty;

                                if (CAMASTList.Count > 0)
                                {
                                    CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                                    if (CAEnt != null)
                                        ServiceName = CAEnt.Desc.Trim();
                                }

                                PdfPCell row1 = new PdfPCell(new Phrase(monthName, TableFont));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase(strFirstVendorName, TableFont));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase(Entity.BillngLname.Trim()+ ", "+Entity.BillngFname.Trim(), TableFont));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase(Entity.Account.Trim(), TableFont));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase(BDCDesc.Trim(), TableFont));
                                row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                                row1 = new PdfPCell(new Phrase("$ "+strAmount, TableFont));
                                row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                Table.AddCell(row1);

                            }

                            PdfPCell row2 = new PdfPCell(new Phrase("", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 4;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("Totals", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_RIGHT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("$ " + TotAmt.ToString("N2"), TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_RIGHT;
                            row2.Border = iTextSharp.text.Rectangle.TOP_BORDER;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 6;
                            Table.AddCell(row2);

                            Phrase ClientSign = new Phrase("Client Signature:", TblFontBold);
                            Phrase _ClientSign = new Phrase(" ____________________________________", TableFont);

                            ClientSign.Add(_ClientSign);

                            row2 = new PdfPCell(ClientSign);
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 3;
                            Table.AddCell(row2);

                            Phrase WrkerSign = new Phrase("Caseworker Signature:", TblFontBold);
                            Phrase _WrkerSign = new Phrase(" ______________________", TableFont);

                            WrkerSign.Add(_WrkerSign);

                            row2 = new PdfPCell(WrkerSign);
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 3;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 6;
                            row2.FixedHeight = 10f;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 3;
                            Table.AddCell(row2);

                            Phrase PayProcess = new Phrase("Payment Processing:", TblFontBold);
                            Phrase _PayProcess = new Phrase("    ______________________", TableFont);

                            PayProcess.Add(_PayProcess);

                            row2 = new PdfPCell(PayProcess);
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 3;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 6;
                            row2.FixedHeight = 10f;
                            Table.AddCell(row2);

                            row2 = new PdfPCell(new Phrase("", TblFontBold));
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 3;
                            Table.AddCell(row2);

                            Phrase SuperSign = new Phrase("Supervisor Signature:", TblFontBold);
                            Phrase _SuperSign = new Phrase("   ______________________", TableFont);

                            SuperSign.Add(_SuperSign);

                            row2 = new PdfPCell(SuperSign);
                            row2.HorizontalAlignment = Element.ALIGN_LEFT;
                            row2.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            row2.Colspan = 3;
                            Table.AddCell(row2);

                            PdfTemplate template = cb.CreateTemplate(600, 400);
                            iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                            cb.AddTemplate(template, 40, 200); // Position of the template x-axis and y-axis

                            ColumnText ct = new ColumnText(template);
                            ct.SetSimpleColumn(new iTextSharp.text.Rectangle(550, 200)); // Size of the table 
                                                                                         //ct.SetSimpleColumn(new Phrase("SUDHEER", TblFontBold), 30, 30, X_Pos, Y_Pos, 3, 1);
                            ct.AddElement(Table);
                            ct.Go();


                            //    foreach (CASEACTEntity Entity in CaseactList)
                            //{
                            //    Y_Pos -= 16;
                            //    X_Pos = 45;
                            //    strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                            //    monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                            //    monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);
                            //    TotAmt = TotAmt + Convert.ToDecimal(Entity.Cost.Trim());
                            //    string BDCDesc = string.Empty;
                            //    if(EMSBDC_List.Count>0)
                            //    {
                            //        CMBDCEntity BDCEntity = EMSBDC_List.Find(u => u.BDC_ID == Entity.BDC_ID);
                            //        if(BDCEntity!=null)
                            //        {
                            //            BDCDesc = BDCEntity.BDC_DESCRIPTION.Trim();
                            //        }
                            //    }

                            //    if (CaseVddlist.Count > 0)
                            //    {
                            //        CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                            //        if (vddname != null)
                            //        {
                            //            strFirstVendorName = vddname.Name;
                            //        }
                            //    }
                            //    strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                            //    string ServiceName = string.Empty;

                            //    if (CAMASTList.Count > 0)
                            //    {
                            //        CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                            //        if (CAEnt != null)
                            //            ServiceName = CAEnt.Desc.Trim();
                            //    }

                            //    //LookupDataAccess.Getdate(Entity.ACT_Date.Trim())
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(monthName, TblFontBold), X_Pos, Y_Pos, 0);

                            //    X_Pos += 70;
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName.Trim(), TblFontBoldService), X_Pos, Y_Pos, 0);

                            //    X_Pos += 70;
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Entity.BillngLname.Trim()+" "+Entity.BillngFname.Trim(), TblFontBoldService), X_Pos, Y_Pos, 0);

                            //    X_Pos += 150;
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(Entity.Account.Trim(), TblFontBoldService), X_Pos, Y_Pos, 0);

                            //    X_Pos += 110;
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BDCDesc, TblFontBoldService), X_Pos, Y_Pos, 0);

                            //    X_Pos += 170;
                            //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);


                            //}
                            //Y_Pos -= 20;
                            ////X_Pos = 110;
                            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase("Total: ", TblFontBoldService), 400, Y_Pos, 0);

                            ////X_Pos += 170;
                            //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(TotAmt.ToString("N2"), TblFontBold), 545, Y_Pos, 0);

                            ////List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A");

                            ////if (ArrearList.Count > 0)
                            ////{
                            ////    foreach (CASEACTEntity arrerEntity in ArrearList)
                            ////    {
                            ////        Y_Pos -= 15;
                            ////        X_Pos = 72;

                            ////        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(arrerEntity.ACT_Date == "" ? "" : LookupDataAccess.Getdate(arrerEntity.ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                            ////        serDesc = CA_Descriptions.Find(x => x.Code == arrerEntity.ACT_Code).Desc.ToString();
                            ////        X_Pos += 45;
                            ////        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(serDesc, TblFontBoldService), X_Pos, Y_Pos, 0);

                            ////        X_Pos += 450;

                            ////        ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(arrerEntity.Cost, TblFontBold), X_Pos, Y_Pos, 0);
                            ////    }
                            ////}
                        }
                        //Y_Pos -= 20;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Client Signature: ", TblFontBoldService), 45, Y_Pos, 0);
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("___________________________________________", TblFontBoldService), 115, Y_Pos, 0);
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Caseworker Signature: ", TblFontBoldService), 300, Y_Pos, 0);
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("___________________________________________", TblFontBoldService), 450, Y_Pos, 0);
                        //Y_Pos -= 20;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Payment Processing: ", TblFontBoldService), 300, Y_Pos, 0);
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("___________________________________________", TblFontBoldService), 450, Y_Pos, 0);
                        //Y_Pos -= 30;
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("Supervisor Signature: ", TblFontBoldService), 300, Y_Pos, 0);
                        //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase("___________________________________________", TblFontBoldService), 450, Y_Pos, 0);


                    }

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        private void WCCAA_InEligLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //    ReaderName = propReportPath + "\\" + "CACOST_EligLet_SPAN.pdf";
            //else
            ReaderName = propReportPath + "\\" + "WCCAA_Elig_Denial.pdf";

            PdfName = "WCCAA_Elig_Denial";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBold14 = new iTextSharp.text.Font(bf_times, 14,1);

                iTextSharp.text.Font TblFontBoldService = new iTextSharp.text.Font(bf_times, 10);

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);
                //_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 40;
                    Y_Pos = 760;

                    X_Pos = 220;
                    Y_Pos -= 95;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    string EligStat = string.Empty;
                    if (CASESPM_SP_List[0].SPM_EligStatus == "E") EligStat = "Eligible";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "S") EligStat = "SSI Categorical";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "M") EligStat = "Means Tested Veterans Categorical\"";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "N") EligStat = "SNAP Categorical";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "P") EligStat = "Pending";
                    else if (CASESPM_SP_List[0].SPM_EligStatus == "D") EligStat = "Denied";

                    Y_Pos -= 25;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(EligStat, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 15;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(CASESPM_SP_List[0].startdate.Trim()), TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 90; X_Pos = 300;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Poverty.Trim()))
                    {
                        if(int.Parse(BaseForm.BaseCaseMstListEntity[0].Poverty)>150)
                            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase("Over Income", TblFontBold14), X_Pos, Y_Pos, 0);
                    }
                    

                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    Hstamper.Writer.SetPageSize(PageSize.A4);
                    cb = Hstamper.GetOverContent(1);

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    //string strAccountNumber = string.Empty;
                    //string strFirstVendorName = string.Empty;
                    //string strVendor1Amount = string.Empty;
                    //string strVendor2Amount = string.Empty;

                    //if (CASESPM_SP_List.Count > 0)
                    //{
                    //    if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Vendor.Trim()))
                    //    {
                    //        if (CaseVddlist.Count > 0)
                    //        {
                    //            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                    //            if (vddname != null)
                    //            {
                    //                strFirstVendorName = vddname.Name;
                    //            }
                    //        }
                    //        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                    //        }
                    //        else
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);
                    //        }
                    //    }
                    //    else if (!string.IsNullOrEmpty(CASESPM_SP_List[0].SPM_Gas_Vendor.Trim()))
                    //    {
                    //        if (CaseVddlist.Count > 0)
                    //        {
                    //            CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                    //            if (vddname != null)
                    //            {
                    //                strFirstVendorName = vddname.Name;
                    //            }
                    //        }
                    //        if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 135, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 432, 535, 0);
                    //        }
                    //        else
                    //        {
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(strFirstVendorName, TblFontBold), 80, 535, 0);
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Gas_Account, TblFontBold), 425, 535, 0);
                    //        }
                    //    }
                    //    //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 432, 535, 0);
                    //    //else
                    //    //    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(CASESPM_SP_List[0].SPM_Account, TblFontBold), 425, 535, 0);

                    //}

                    //String serDesc = string.Empty;
                    //List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    //if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    //{
                    //    X_Pos = 60;
                    //    if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
                    //        Y_Pos -= 177;
                    //    else
                    //        Y_Pos -= 172;//152;

                    //    //PdfPTable Table = new PdfPTable(3);
                    //    //Table.TotalWidth = 350f;
                    //    //Table.WidthPercentage = 100;
                    //    //Table.LockedWidth = true;
                    //    //float[] widths = new float[] { 22f, 80f, 18f };
                    //    //Table.SetWidths(widths);
                    //    //Table.HorizontalAlignment = Element.ALIGN_CENTER;

                    //    if (CaseactList.Count > 0)
                    //    {
                    //        //Y_Pos -= 20;
                    //        foreach (CASEACTEntity Entity in CaseactList)
                    //        {
                    //            Y_Pos -= 16;
                    //            X_Pos = 80;
                    //            strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                    //            monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                    //            monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                    //            if (CaseVddlist.Count > 0)
                    //            {
                    //                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                    //                if (vddname != null)
                    //                {
                    //                    strFirstVendorName = vddname.Name;
                    //                }
                    //            }
                    //            strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                    //            string ServiceName = string.Empty;

                    //            if (CAMASTList.Count > 0)
                    //            {
                    //                CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                    //                if (CAEnt != null)
                    //                    ServiceName = CAEnt.Desc.Trim();
                    //            }

                    //            //LookupDataAccess.Getdate(Entity.ACT_Date.Trim())
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(monthName, TblFontBold), X_Pos, Y_Pos, 0);

                    //            X_Pos += 70;
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ServiceName, TblFontBoldService), X_Pos, Y_Pos, 0);

                    //            X_Pos += 400;
                    //            ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                    //            //PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                    //            //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //            //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //            //Table.AddCell(row1);

                    //            //row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                    //            //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //            //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //            //Table.AddCell(row1);

                    //            //row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                    //            //row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //            //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //            //Table.AddCell(row1);
                    //        }

                    //        List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A");

                    //        if (ArrearList.Count > 0)
                    //        {
                    //            foreach (CASEACTEntity arrerEntity in ArrearList)
                    //            {
                    //                Y_Pos -= 15;
                    //                X_Pos = 72;

                    //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(arrerEntity.ACT_Date == "" ? "" : LookupDataAccess.Getdate(arrerEntity.ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                    //                serDesc = CA_Descriptions.Find(x => x.Code == arrerEntity.ACT_Code).Desc.ToString();
                    //                X_Pos += 45;
                    //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(serDesc, TblFontBoldService), X_Pos, Y_Pos, 0);

                    //                X_Pos += 450;

                    //                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(arrerEntity.Cost, TblFontBold), X_Pos, Y_Pos, 0);
                    //            }
                    //        }
                    //    }

                    //    //PdfTemplate template = cb.CreateTemplate(600, 400);
                    //    //iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                    //    //cb.AddTemplate(template, 50, 285);

                    //    //ColumnText ct = new ColumnText(template);
                    //    //ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                    //    //ct.AddElement(Table);
                    //    //ct.Go();
                    //}

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }
        #endregion


        #region Sudheer added on 01/03/2025 as per new formar for CCSCT Eligibility Letter

        private void CCSCT_EligLetter()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            ReaderName = propReportPath + "\\" + "CCSCT_EligLet_2025.pdf";
            PdfName = "CCSCT_EligLet_2025";
            //if (BaseForm.BaseCaseMstListEntity[0].Language == "02")
            //{
            //    ReaderName = propReportPath + "\\" + "EligLet_SPAN.pdf";
            //    PdfName = "EligLet_SPAN";
            //}
            if (!File.Exists(ReaderName))
            {
                CommonFunctions.MessageBoxDisplay(PdfName + ".pdf Missed, Please contact CAPSYSTEMS administrator.");
                return;
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                //PdfName = strFolderPath + PdfName;
                PdfName = propReportPath + BaseForm.UserID + "\\" + PdfName;
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                PdfReader Hreader = new PdfReader(ReaderName);

                PdfStamper Hstamper = new PdfStamper(Hreader, new FileStream(PdfName, FileMode.Create, FileAccess.Write));
                Hstamper.Writer.SetPageSize(PageSize.A4);
                PdfContentByte cb = Hstamper.GetOverContent(1);


                BaseFont bf_times = BaseFont.CreateFont("c:/windows/fonts/TIMES.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_times, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font TimesUnderline = new iTextSharp.text.Font(bf_times, 9, 4);
                BaseFont bf_TimesUnderline = TimesUnderline.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_times, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_times, 12);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_times, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_times, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_times, 11);
                //iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(1, 11, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_times, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_times, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_times, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Font TblFontBoldService = new iTextSharp.text.Font(bf_times, 10);

                //iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                //_image_Tick.ScalePercent(60f);
                ////_image_Checked.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                try
                {

                    //string HN = string.Empty; string Direction = string.Empty; string Street = string.Empty; string Suffix = string.Empty;

                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;
                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;
                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";


                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";


                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();
                            string zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }

                            AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        string zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    X_Pos = 40;
                    Y_Pos = 760;

                    X_Pos = 240;
                    Y_Pos -= 114;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseApplicationName, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 18;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(BaseForm.BaseCaseMstListEntity[0].ApplNo, TblFontBold), X_Pos, Y_Pos, 0);

                    Y_Pos -= 16;
                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(AppAddress + " " + AppAddress1, TblFontBold), X_Pos, Y_Pos, 0);

                    //X_Pos = 75;
                    //Y_Pos -= 20;

                    //ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.GetPhoneFormat(BaseForm.BaseCaseMstListEntity[0].Area + BaseForm.BaseCaseMstListEntity[0].Phone), TblFontBold), X_Pos, Y_Pos, 0);

                    Hstamper.Writer.SetPageSize(PageSize.A4);
                    cb = Hstamper.GetOverContent(1);

                    string strAmount = string.Empty;
                    string monthName = string.Empty;

                    List<CASEACTEntity> CaseactList = new List<CASEACTEntity>();

                    if (PropCaseactList.Count > 0)
                        CaseactList = PropCaseactList.FindAll(u => u.ActSeek_Date.Trim() != string.Empty);

                    if (CaseactList.Count > 0)
                        CaseactList = CaseactList.OrderByDescending(u => Convert.ToDateTime(u.ACT_Date.Trim())).ToList();

                    CaseactList = CaseactList.FindAll(u => (u.Elec_Other == "E" || u.Elec_Other == "O") && u.Service_plan == SPMCode);

                    string strAccountNumber = string.Empty;
                    string strFirstVendorName = string.Empty;
                    string strVendor1Amount = string.Empty;
                    string strVendor2Amount = string.Empty;

                    String serDesc = string.Empty;
                    List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    if (!string.IsNullOrEmpty(BaseForm.BaseYear.Trim()))
                    {
                        X_Pos = 60;
                        Y_Pos -= 185;

                        //PdfPTable Table = new PdfPTable(3);
                        //Table.TotalWidth = 350f;
                        //Table.WidthPercentage = 100;
                        //Table.LockedWidth = true;
                        //float[] widths = new float[] { 22f, 80f, 18f };
                        //Table.SetWidths(widths);
                        //Table.HorizontalAlignment = Element.ALIGN_CENTER;

                        if (CaseactList.Count > 0)
                        {
                            //Y_Pos -= 20;
                            foreach (CASEACTEntity Entity in CaseactList)
                            {
                                Y_Pos -= 16;
                                X_Pos = 45;
                                strAmount = Convert.ToDecimal(Entity.Cost.Trim()).ToString("N2");
                                monthName = LookupDataAccess.GetMonth(Convert.ToDateTime(Entity.ACT_Date.Trim()).Month.ToString());
                                monthName = LookupDataAccess.GetFixedLengthString(monthName, 15);

                                if (CaseVddlist.Count > 0)
                                {
                                    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == Entity.Vendor_No);
                                    if (vddname != null)
                                    {
                                        strFirstVendorName = vddname.Name;
                                    }
                                }
                                strFirstVendorName = LookupDataAccess.GetFixedLengthString(strFirstVendorName.Trim(), 50);

                                string ServiceName = string.Empty;

                                if (CAMASTList.Count > 0)
                                {
                                    CAMASTEntity CAEnt = CAMASTList.Find(u => u.Code.Trim() == Entity.ACT_Code.Trim());
                                    if (CAEnt != null)
                                        ServiceName = CAEnt.Desc.Trim();
                                }


                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(LookupDataAccess.Getdate(Entity.ACT_Date.Trim()), TblFontBold), X_Pos, Y_Pos, 0);

                                X_Pos += 65;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(ServiceName, TblFontBoldService), X_Pos, Y_Pos, 0);

                                X_Pos += 450;
                                ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(strAmount, TblFontBold), X_Pos, Y_Pos, 0);

                                //PdfPCell row1 = new PdfPCell(new Phrase(monthName, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);

                                //row1 = new PdfPCell(new Phrase(strFirstVendorName, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);

                                //row1 = new PdfPCell(new Phrase(strAmount, TblFontBold));
                                //row1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                //row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                                //Table.AddCell(row1);
                            }

                            List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Elec_Other == "");

                            if (ArrearList.Count > 0)
                            {
                                foreach (CASEACTEntity arrerEntity in ArrearList)
                                {
                                    Y_Pos -= 16;
                                    X_Pos = 70;

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_CENTER, new Phrase(arrerEntity.ACT_Date == "" ? "" : LookupDataAccess.Getdate(arrerEntity.ACT_Date), TblFontBold), X_Pos, Y_Pos, 0);

                                    serDesc = CA_Descriptions.Find(x => x.Code == arrerEntity.ACT_Code).Desc.ToString();
                                    X_Pos += 40;
                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_LEFT, new Phrase(serDesc, TblFontBoldService), X_Pos, Y_Pos, 0);

                                    X_Pos += 450;

                                    ColumnText.ShowTextAligned(cb, PdfContentByte.ALIGN_RIGHT, new Phrase(arrerEntity.Cost, TblFontBold), X_Pos, Y_Pos, 0);
                                }
                            }
                        }

                        //PdfTemplate template = cb.CreateTemplate(600, 400);
                        //iTextSharp.text.Rectangle pageSize = Hstamper.Writer.PageSize;
                        //cb.AddTemplate(template, 50, 285);

                        //ColumnText ct = new ColumnText(template);
                        //ct.SetSimpleColumn(new iTextSharp.text.Rectangle(370, 200)); // Size of the table 

                        //ct.AddElement(Table);
                        //ct.Go();
                    }

                }
                catch (Exception ex) { /*document.Add(new Paragraph("Aborted due to Exception............................................... "));*/ }

                Hstamper.Close();
                /*SEND EMAIL*/
                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
            }
            else
            {
                CommonFunctions.MessageBoxDisplay("Benefit Service Plan Not Defined.");
            }
        }

        #endregion


        #region Vikash added on 12/03/2024 for creating PDF for Notice of Payment for CVCAA, RPMC, HCCAA and WCCAA

        private void Notice_of_Payment()
        {
            Random_Filename = null;

            string ReaderName = string.Empty;

            string FileName = string.Empty;

            if (BaseForm.BaseAgencyControlDetails.AgyShortName == "CVCAA")
            {
                PdfName = propReportPath + "\\" + BaseForm.UserID.Trim() + "\\" + "CVCAA_Notice_Vend_Pmt";
            }
            else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "RMPC")
            {
                PdfName = propReportPath + "\\" + BaseForm.UserID.Trim() + "\\" + "RPMC_Notice_Vend_Pmt";
            }
            else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "HCCAA")
            {
                PdfName = propReportPath + "\\" + BaseForm.UserID.Trim() + "\\" + "HCCAA_Notice_Vend_Pmt";
            }
            else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "WCCAA")
            {
                PdfName = propReportPath + "\\" + BaseForm.UserID.Trim() + "\\" + "WCCAA_Notice_Vend_Pmt";
            }
            //else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "CCSCT")
            //{
            //    PdfName = propReportPath + BaseForm.UserID.Trim() + "WCCAA_Notice_Vend_Pmt";
            //}
            else
            {
                PdfName = propReportPath + "\\" + BaseForm.UserID.Trim() + "\\" + BaseForm.BaseAgencyControlDetails.AgyShortName+"_Notice_Vend_Pmt";
            }

            FileName = PdfName;

            if (SPMCode != string.Empty)
            {
                try
                {
                    if (!Directory.Exists(propReportPath + BaseForm.UserID.Trim()))
                    {
                        DirectoryInfo di = Directory.CreateDirectory(propReportPath + BaseForm.UserID.Trim());
                    }
                }
                catch (Exception ex)
                {
                    CommonFunctions.MessageBoxDisplay("Error");
                }

                try
                {
                    string Tmpstr = PdfName + ".pdf";
                    if (File.Exists(Tmpstr))
                        File.Delete(Tmpstr);
                }
                catch (Exception ex)
                {
                    int length = 8;
                    string newFileName = System.Guid.NewGuid().ToString();
                    newFileName = newFileName.Replace("-", string.Empty);

                    Random_Filename = PdfName + newFileName.Substring(0, length) + ".pdf";
                }

                if (!string.IsNullOrEmpty(Random_Filename))
                    PdfName = Random_Filename;
                else
                    PdfName += ".pdf";

                FileStream fs = new FileStream(PdfName, FileMode.Create);
                Document document = new Document(PageSize.A4, 30, 30, 30, 50);

                PdfWriter writer = PdfWriter.GetInstance(document, fs);
                document.Open();

                BaseFont bf_calibri = BaseFont.CreateFont("c:/windows/fonts/Calibri.TTF", BaseFont.WINANSI, BaseFont.EMBEDDED);
                iTextSharp.text.Font helvetica = new iTextSharp.text.Font(bf_calibri, 12, 1);
                BaseFont bf_helv = helvetica.GetCalculatedBaseFont(false);
                iTextSharp.text.Font Underline_font = new iTextSharp.text.Font(bf_calibri, 15, 4);
                BaseFont bf_TimesUnderline = Underline_font.GetCalculatedBaseFont(true);

                iTextSharp.text.Font Times = new iTextSharp.text.Font(bf_calibri, 11);
                iTextSharp.text.Font TableFont = new iTextSharp.text.Font(bf_calibri, 11);
                iTextSharp.text.Font TableFontBoldItalicUnderline = new iTextSharp.text.Font(bf_calibri, 11, 7, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TableFontBoldItalic = new iTextSharp.text.Font(bf_calibri, 11, 3, BaseColor.BLUE.Darker());
                iTextSharp.text.Font TblFontBold = new iTextSharp.text.Font(bf_calibri, 11);
                iTextSharp.text.Font TblFontBoldd = new iTextSharp.text.Font(bf_calibri, 14, 1);
                iTextSharp.text.Font TblFontItalic = new iTextSharp.text.Font(bf_calibri, 10, 2);
                iTextSharp.text.Font Timesline = new iTextSharp.text.Font(bf_calibri, 10, 4);
                iTextSharp.text.Font TblFontBoldColor = new iTextSharp.text.Font(bf_calibri, 16, 7, BaseColor.BLUE.Darker());

                iTextSharp.text.Image _image_Tick = iTextSharp.text.Image.GetInstance(Application.MapPath("~\\Resources\\Images\\tickmark_green.png"));

                _image_Tick.ScalePercent(60f);

                Get_Vendor_List();

                Get_App_CASEACT_List();

                Phrase hardCoded_Phrase = new Phrase();
                Phrase fillData_Phrase = new Phrase();
                Phrase nextLine_Phrase = new Phrase();
                Phrase space_Phrase = new Phrase();

                nextLine_Phrase = new Phrase("\n", TblFontBoldd);
                space_Phrase = new Phrase("   ", TblFontBoldd);

                try
                {
                    string HN = string.Empty;
                    string Apt = string.Empty;
                    string Floor = string.Empty;
                    string Suffix = string.Empty;
                    string Street = string.Empty;
                    string Direction = string.Empty;

                    string MailAddress = string.Empty;
                    string MailAddress1 = string.Empty;

                    string AppAddress = string.Empty;
                    string AppAddress1 = string.Empty;

                    AgencyControlEntity BAgyControlDetails = _model.ZipCodeAndAgency.GetAgencyControlFile(BaseForm.BaseAgency);

                    string AgyName = string.Empty;
                    string AgyAdd1 = string.Empty;
                    string AgyAdd2 = string.Empty;

                    MaskedTextBox AgyPhone = new MaskedTextBox();
                    AgyPhone.Mask = "(999) 000-0000";

                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                        HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                        Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                    Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                        Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                        Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                        Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                    string zipplus = string.Empty;
                    if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                    {
                        if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                            zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                    }
                    AppAddress = HN + Direction + Street + Suffix + Apt + Floor;
                    AppAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;

                    CaseDiffEntity caseDiffDetails = _model.CaseMstData.GetCaseDiffadpya(BaseForm.BaseAgency.ToString(), BaseForm.BaseDept.ToString(), BaseForm.BaseProg.ToString(), BaseForm.BaseYear, BaseForm.BaseApplicationNo, string.Empty);
                    if (caseDiffDetails != null)
                    {
                        if (!string.IsNullOrEmpty(caseDiffDetails.Street.Trim()))
                        {
                            HN = string.Empty; Apt = string.Empty; Floor = string.Empty; Suffix = string.Empty; Street = string.Empty; Direction = string.Empty;

                            if (!string.IsNullOrEmpty(caseDiffDetails.Hn.Trim()))
                                HN = caseDiffDetails.Hn.Trim() + "  ";

                            if (!string.IsNullOrEmpty(caseDiffDetails.Direction.Trim()))
                                Direction = caseDiffDetails.Direction.Trim() + "  ";

                            Street = caseDiffDetails.Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Suffix.Trim()))
                                Suffix = caseDiffDetails.Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Apt.Trim()))
                                Apt = "Apt: " + caseDiffDetails.Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(caseDiffDetails.Flr.Trim()))
                                Floor = "Flr: " + caseDiffDetails.Flr.Trim();

                            MailAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            MailAddress1 = caseDiffDetails.City.Trim() + "  " + caseDiffDetails.State.Trim() + "  " + "00000".Substring(0, 5 - caseDiffDetails.Zip.Trim().Length) + caseDiffDetails.Zip.Trim() + "-" + "0000".Substring(0, 4 - caseDiffDetails.ZipPlus.Trim().Length) + caseDiffDetails.ZipPlus.Trim();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                                HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                                Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                            Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                                Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                                Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                                Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                            zipplus = string.Empty;
                            if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                            {
                                if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                    zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                            }
                            MailAddress = HN + Direction + Street + Suffix + Apt + Floor;
                            MailAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Hn.Trim()))
                            HN = BaseForm.BaseCaseMstListEntity[0].Hn.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Direction.Trim()))
                            Direction = BaseForm.BaseCaseMstListEntity[0].Direction.Trim() + "  ";

                        Street = BaseForm.BaseCaseMstListEntity[0].Street.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Suffix.Trim()))
                            Suffix = BaseForm.BaseCaseMstListEntity[0].Suffix.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Apt.Trim()))
                            Apt = "Apt: " + BaseForm.BaseCaseMstListEntity[0].Apt.Trim() + "  ";
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Flr.Trim()))
                            Floor = "Flr: " + BaseForm.BaseCaseMstListEntity[0].Flr.Trim();

                        zipplus = string.Empty;
                        if (!string.IsNullOrEmpty(BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim()))
                        {
                            if (int.Parse(BaseForm.BaseCaseMstListEntity[0].Zipplus.ToString()) > 0)
                                zipplus = "-" + "0000".Substring(0, 4 - BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zipplus.Trim();
                        }
                        MailAddress = HN + Direction + Street + Suffix + Apt + Floor;
                        MailAddress1 = BaseForm.BaseCaseMstListEntity[0].City.Trim() + "  " + BaseForm.BaseCaseMstListEntity[0].State.Trim() + "  " + "00000".Substring(0, 5 - BaseForm.BaseCaseMstListEntity[0].Zip.Trim().Length) + BaseForm.BaseCaseMstListEntity[0].Zip.Trim() + zipplus;
                    }

                    PdfPTable Maintable = new PdfPTable(2);
                    Maintable.TotalWidth = 550f;
                    Maintable.WidthPercentage = 100;
                    Maintable.LockedWidth = true;
                    float[] Headerwidths = new float[] { 300f, 300f };
                    Maintable.SetWidths(Headerwidths);
                    Maintable.HorizontalAlignment = Element.ALIGN_CENTER;

                    HierarchyEntity hierarchyDetails = _model.HierarchyAndPrograms.GetCaseHierarchy("AGENCY", BaseForm.BaseAdminAgency, string.Empty, string.Empty, string.Empty, string.Empty);
                    string _strImageFolderPath = "";
                    if (hierarchyDetails != null)
                    {
                        string LogoName = hierarchyDetails.Logo.ToString();
                        _strImageFolderPath = _model.lookupDataAccess.GetReportPath() + "\\AgencyLogos\\";
                        FileInfo info = new FileInfo(_strImageFolderPath + LogoName);
                        if (info.Exists)
                            _strImageFolderPath = _model.lookupDataAccess.GetReportPath() + "\\AgencyLogos\\" + LogoName;
                        else
                            _strImageFolderPath = "";
                    }

                    //if (string.IsNullOrEmpty(_strImageFolderPath.Trim()))
                    //{
                    //    if (BaseForm.BaseAgencyControlDetails.AgyShortName == "RMPC")
                    //        _strImageFolderPath = propReportPath + "/RPMC_Logo.png";
                    //    else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "CVCAA")
                    //        _strImageFolderPath = propReportPath + "/CVCAA_Logo.png";
                    //    else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "HCCAA")
                    //        _strImageFolderPath = propReportPath + "/HCCAA_Logo.png";
                    //    else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "WCCAA")
                    //        _strImageFolderPath = propReportPath + "/WCCAA_Logo.png";
                    //}

                    if (!string.IsNullOrEmpty(_strImageFolderPath.Trim()))
                    {
                        iTextSharp.text.Image imgLogo = iTextSharp.text.Image.GetInstance(_strImageFolderPath);

                        PdfPCell logo = new PdfPCell(imgLogo);
                        logo.HorizontalAlignment = Element.ALIGN_CENTER;
                        logo.Colspan = 2;
                        logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Maintable.AddCell(logo);
                    }


                    //if (BaseForm.BaseAgencyControlDetails.AgyShortName == "RMPC")
                    //{
                    //    iTextSharp.text.Image rpmc_headerpng = iTextSharp.text.Image.GetInstance(propReportPath + "/RPMC_Logo.png");
                    //    rpmc_headerpng.ScalePercent(15f);

                    //    PdfPCell logo = new PdfPCell(rpmc_headerpng);
                    //    logo.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    logo.Colspan = 2;
                    //    logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Maintable.AddCell(logo);
                    //}
                    //else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "CVCAA")
                    //{
                    //    iTextSharp.text.Image cvcaa_headerpng = iTextSharp.text.Image.GetInstance(propReportPath + "/CVCAA_Logo.png");
                    //    cvcaa_headerpng.ScalePercent(75f);

                    //    PdfPCell logo = new PdfPCell(cvcaa_headerpng);
                    //    logo.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    logo.Colspan = 2;
                    //    logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Maintable.AddCell(logo);
                    //}
                    //else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "HCCAA")
                    //{
                    //    iTextSharp.text.Image hccaa_headerpng = iTextSharp.text.Image.GetInstance(propReportPath + "/HCCAA_Logo.png");
                    //    hccaa_headerpng.ScalePercent(40f);

                    //    PdfPCell logo = new PdfPCell(hccaa_headerpng);
                    //    logo.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    logo.Colspan = 2;
                    //    logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Maintable.AddCell(logo);

                    //    logo = new PdfPCell(new Phrase("", TblFontBold));
                    //    logo.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    logo.Colspan = 2;
                    //    logo.FixedHeight = 15f;
                    //    logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Maintable.AddCell(logo);
                    //}
                    //else if (BaseForm.BaseAgencyControlDetails.AgyShortName == "WCCAA")
                    //{
                    //    iTextSharp.text.Image wccaa_headerpng = iTextSharp.text.Image.GetInstance(propReportPath + "/WCCAA_Logo.png");
                    //    wccaa_headerpng.ScalePercent(70f);
                    //    PdfPCell logo = new PdfPCell(wccaa_headerpng);
                    //    logo.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    logo.Colspan = 2;
                    //    logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Maintable.AddCell(logo);

                    //    logo = new PdfPCell(new Phrase("", TblFontBold));
                    //    logo.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    logo.Colspan = 2;
                    //    logo.FixedHeight = 10f;
                    //    logo.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //    Maintable.AddCell(logo);
                    //}

                    PdfPCell row1 = new PdfPCell(new Phrase("Notice of Payment", Underline_font));
                    row1.HorizontalAlignment = Element.ALIGN_CENTER;
                    row1.Colspan = 2;
                    row1.PaddingBottom = 15;
                    row1.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(row1);

                    //Vendor Details
                    string strAccountNumber = string.Empty;
                    string strVendorName = string.Empty;
                    string Add1 = string.Empty;
                    string Add2 = string.Empty;
                    string Add3 = string.Empty, VddCity = string.Empty, VddState = string.Empty, VddZip = string.Empty;
                    string VendBillName = string.Empty;
                    decimal PrimFundAmt = 0, ArrFundAmt = 0, CrisisFundAmt = 0;

                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3")
                    {
                        strAccountNumber = string.Empty;
                        strVendorName = string.Empty;
                        Add1 = string.Empty;
                        Add2 = string.Empty;
                        Add3 = string.Empty;
                        VendBillName = string.Empty;

                        if (SP_ElectricActivity_Details.Count > 0)
                        {
                            strAccountNumber = SP_ElectricActivity_Details[0].Account;
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                                if (vddname != null)
                                {
                                    strVendorName = vddname.Name;
                                    Add1 = vddname.Addr1;
                                    Add2 = vddname.Addr2;
                                    Add3 = vddname.Addr3;
                                    VddCity = vddname.City;
                                    VddState = vddname.State;
                                    VddZip = vddname.Zip;
                                    VendBillName = vddname.FName + " " + vddname.LName;
                                }
                            }
                        }
                        else
                        {
                            strAccountNumber = CASESPM_SP_List[0].SPM_Account;
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Vendor);
                                if (vddname != null)
                                {
                                    strVendorName = vddname.Name;
                                    Add1 = vddname.Addr1;
                                    Add2 = vddname.Addr2;
                                    Add3 = vddname.Addr3;
                                    VddCity = vddname.City;
                                    VddState = vddname.State;
                                    VddZip = vddname.Zip;
                                    VendBillName = vddname.FName + " " + vddname.LName;
                                }
                            }
                        }

                    }

                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "4")
                    {
                        strAccountNumber = string.Empty;
                        strVendorName = string.Empty;
                        Add1 = string.Empty;
                        Add2 = string.Empty;
                        Add3 = string.Empty;
                        VendBillName = string.Empty;

                        if (SP_OtherActivity_Details.Count > 0)
                        {
                            strAccountNumber = SP_OtherActivity_Details[0].Account;
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                                if (vddname != null)
                                {
                                    strVendorName = vddname.Name;
                                    Add1 = vddname.Addr1;
                                    Add2 = vddname.Addr2;
                                    Add3 = vddname.Addr3;
                                    VddCity = vddname.City;
                                    VddState = vddname.State;
                                    VddZip = vddname.Zip;
                                    VendBillName = vddname.FName + " " + vddname.LName;
                                }
                            }
                        }
                        else
                        {
                            strAccountNumber = CASESPM_SP_List[0].SPM_Gas_Account;
                            if (CaseVddlist.Count > 0)
                            {
                                CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == CASESPM_SP_List[0].SPM_Gas_Vendor);
                                if (vddname != null)
                                {
                                    strVendorName = vddname.Name;
                                    Add1 = vddname.Addr1;
                                    Add2 = vddname.Addr2;
                                    Add3 = vddname.Addr3;
                                    VddCity = vddname.City;
                                    VddState = vddname.State;
                                    VddZip = vddname.Zip;
                                    VendBillName = vddname.FName + " " + vddname.LName;
                                }
                            }
                        }
                    }


                    if (SP_ElectricActivity_Details.Count > 0 && gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3")
                    {
                        List<CASEACTEntity> SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_ElectricActivity_Details[0].Vendor_No);
                        if (SelCaseact.Count > 0)
                        {
                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_PRIM_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_PRIM_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                PrimFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_ElectricActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_ARR_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_ARR_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                ArrFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_ElectricActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_HC_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_HC_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                CrisisFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                        }

                        //strAccountNumber = SP_ElectricActivity_Details[0].Account;
                        //if (CaseVddlist.Count > 0)
                        //{
                        //    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_ElectricActivity_Details[0].Vendor_No);
                        //    if (vddname != null)
                        //    {
                        //        strVendorName = vddname.Name;
                        //        Add1 = vddname.Addr1;
                        //        Add2 = vddname.Addr2;
                        //        Add3 = vddname.Addr3;
                        //        VddCity = vddname.City;
                        //        VddState = vddname.State;
                        //        VddZip = vddname.Zip;
                        //        VendBillName = vddname.FName + " " + vddname.LName;
                        //    }
                        //}
                    }

                    if (SP_OtherActivity_Details.Count > 0 && (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "4"))
                    {
                        //strAccountNumber = string.Empty;
                        //strVendorName = string.Empty;
                        //Add1 = string.Empty;
                        //Add2 = string.Empty;
                        //Add3 = string.Empty;
                        //VendBillName = string.Empty;

                        List<CASEACTEntity> SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No);

                        if (SelCaseact.Count > 0)
                        {
                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_PRIM_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_PRIM_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                PrimFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_VUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_VUL_ARR_CA.Trim())
                                                            || (u.Service_plan == CEAPCNTL_List[0].CPCT_NONVUL_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_NONVUL_ARR_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                ArrFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                            SelCaseact = PropCaseactList.FindAll(u => u.Cost.Trim() != "" && u.Vendor_No == SP_OtherActivity_Details[0].Vendor_No);

                            SelCaseact = SelCaseact.FindAll(u => (u.Service_plan == CEAPCNTL_List[0].CPCT_HC_SP && u.ACT_Code.Trim() == CEAPCNTL_List[0].CPCT_HC_CA.Trim()));
                            if (SelCaseact.Count > 0)
                                CrisisFundAmt = SelCaseact.Sum(x => Convert.ToDecimal(x.Cost.Trim()));

                        }

                        //strAccountNumber = SP_OtherActivity_Details[0].Account;
                        //if (CaseVddlist.Count > 0)
                        //{
                        //    CASEVDDEntity vddname = CaseVddlist.Find(u => u.Code == SP_OtherActivity_Details[0].Vendor_No);
                        //    if (vddname != null)
                        //    {
                        //        strVendorName = vddname.Name;
                        //        Add1 = vddname.Addr1;
                        //        Add2 = vddname.Addr2;
                        //        Add3 = vddname.Addr3;
                        //        VddCity = vddname.City;
                        //        VddState = vddname.State;
                        //        VddZip = vddname.Zip;
                        //        VendBillName = vddname.FName + " " + vddname.LName;
                        //    }
                        //}
                    }

                    #region Commented Code

                    //hardCoded_Phrase = new Phrase();
                    //fillData_Phrase = new Phrase();

                    //hardCoded_Phrase = new Phrase("To:  ", TableFont);

                    //fillData_Phrase = new Phrase(strVendorName, TblFontBold);

                    //fillData_Phrase.Add(nextLine_Phrase);
                    //fillData_Phrase.Add(Add1);

                    //if (!string.IsNullOrEmpty(Add2.Trim()))
                    //{
                    //    //fillData_Phrase.Add(fillData_Phrase);

                    //    fillData_Phrase.Add(nextLine_Phrase);
                    //    fillData_Phrase.Add(Add2);
                    //}
                    //else if (!string.IsNullOrEmpty(Add3.Trim()))
                    //{
                    //    //fillData_Phrase.Add(fillData_Phrase);

                    //    fillData_Phrase.Add(nextLine_Phrase);
                    //    fillData_Phrase.Add(Add3);
                    //}
                    //else if (string.IsNullOrEmpty(Add3.Trim()) && string.IsNullOrEmpty(Add2.Trim()))
                    //{
                    //    //fillData_Phrase.Add(fillData_Phrase);

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add(VddCity.Trim());

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add("," + VddState.Trim());

                    //    fillData_Phrase.Add(VddZip.Trim());
                    //    fillData_Phrase.Add(Add3);
                    //}

                    //if (!string.IsNullOrEmpty(Add3.Trim()) && !string.IsNullOrEmpty(Add2.Trim()))
                    //{
                    //    //fillData_Phrase.Add(fillData_Phrase);

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add(Add3);
                    //}
                    //else if (string.IsNullOrEmpty(Add3.Trim()) && !string.IsNullOrEmpty(Add2.Trim()))
                    //{
                    //    //fillData_Phrase.Add(fillData_Phrase);

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add(VddCity.Trim());

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add("," + VddState.Trim());

                    //    fillData_Phrase.Add(VddZip.Trim());
                    //    fillData_Phrase.Add(Add3);
                    //}

                    //if (!string.IsNullOrEmpty(Add3.Trim()) && !string.IsNullOrEmpty(Add2.Trim()))
                    //{
                    //    //fillData_Phrase.Add(fillData_Phrase);

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add(VddCity.Trim());

                    //    fillData_Phrase.Add(space_Phrase);
                    //    fillData_Phrase.Add("," + VddState.Trim());

                    //    fillData_Phrase.Add(VddZip.Trim());
                    //    fillData_Phrase.Add(Add3);
                    //}

                    //hardCoded_Phrase.Add(fillData_Phrase);

                    //PdfPCell vendorDetails = new PdfPCell(hardCoded_Phrase);
                    //vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    //vendorDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Maintable.AddCell(vendorDetails);

                    //vendorDetails = new PdfPCell(new Phrase("", TblFontBold));
                    //vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    //vendorDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    //Maintable.AddCell(vendorDetails);

                    #endregion

                    PdfPCell vendorDetails = new PdfPCell(new Phrase(" To:                          " + strVendorName, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.TOP_BORDER + +iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TableFont)); //"Date: " + LookupDataAccess.Getdate(CASESPM_SP_List[0].startdate.Trim())
                    vendorDetails.HorizontalAlignment = Element.ALIGN_RIGHT;
                    vendorDetails.PaddingRight = 10f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.TOP_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    #region Address reaarange code

                    string Add4 = string.Empty;
                    if (!string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add2;
                        Add3 = Add3;

                        Add4 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();
                    }
                    else if (string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add2;
                        Add2 = Add3;

                        Add3 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();
                        Add4 = string.Empty;
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add3;

                        Add3 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();
                        Add4 = string.Empty;
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add2;

                        Add3 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();
                        Add4 = string.Empty;
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && string.IsNullOrEmpty(Add2.Trim()) && string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();

                        Add3 = string.Empty;
                        Add4 = string.Empty;
                    }

                    else if (string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add2;
                        Add2 = Add2;

                        Add3 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();
                        Add4 = string.Empty;
                    }

                    else if (string.IsNullOrEmpty(Add1.Trim()) && string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add3;
                        Add2 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();

                        Add3 = string.Empty;
                        Add4 = string.Empty;
                    }

                    else if (string.IsNullOrEmpty(Add1.Trim()) && string.IsNullOrEmpty(Add2.Trim()) && string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = VddCity.Trim() + ", " + VddState.Trim() + " " + VddZip.Trim();
                        Add2 = string.Empty;

                        Add3 = string.Empty;
                        Add4 = string.Empty;
                    }

                    else if (string.IsNullOrEmpty(Add1.Trim()) && string.IsNullOrEmpty(Add2.Trim()) && string.IsNullOrEmpty(Add3.Trim()) && (string.IsNullOrEmpty(VddCity.Trim()) && string.IsNullOrEmpty(VddState.Trim()) && string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = string.Empty;
                        Add2 = string.Empty;

                        Add3 = string.Empty;
                        Add4 = string.Empty;
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add2;
                        Add3 = Add3;

                        Add4 = VddState.Trim() + " " + VddZip.Trim();
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || string.IsNullOrEmpty(VddState.Trim()) || !string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add2;
                        Add3 = Add3;

                        Add4 = VddCity.Trim() + " " + VddZip.Trim();
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add2;
                        Add3 = Add3;

                        Add4 = VddCity.Trim() + ", " + VddState.Trim();
                    }

                    else if (!string.IsNullOrEmpty(Add1.Trim()) && !string.IsNullOrEmpty(Add2.Trim()) && !string.IsNullOrEmpty(Add3.Trim()) && (!string.IsNullOrEmpty(VddCity.Trim()) || !string.IsNullOrEmpty(VddState.Trim()) || string.IsNullOrEmpty(VddZip.Trim())))
                    {
                        Add1 = Add1;
                        Add2 = Add2;
                        Add3 = Add3;

                        Add4 = VddCity.Trim() + ", " + VddState.Trim();
                    }

                    #endregion

                    vendorDetails = new PdfPCell(new Phrase("                                 " + Add1, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("                                 " + Add2, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + +iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    AgyName = BAgyControlDetails.AgyName;

                    vendorDetails = new PdfPCell(new Phrase(" From:   " + AgyName, TableFont));//(new Phrase(" From:   CONCHO VALLEY COMMUNITY ACTION AGENCY", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("                                 " + Add3, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    AgyAdd1 = BAgyControlDetails.Street;

                    AgyAdd2 = BAgyControlDetails.City + (BAgyControlDetails.State == "" ? " " : (", " + BAgyControlDetails.State)) + (BAgyControlDetails.Zip1 == "" ? " " : (" " + BAgyControlDetails.Zip1));

                    if (string.IsNullOrEmpty(BAgyControlDetails.MainPhone))
                        AgyPhone.Mask = "";

                    AgyPhone.Text = BAgyControlDetails.MainPhone == "" ? "" : BAgyControlDetails.MainPhone;

                    if (string.IsNullOrEmpty(BAgyControlDetails.Street))
                    {
                        if (!string.IsNullOrEmpty(AgyAdd2))
                        {
                            AgyAdd1 = AgyAdd2;

                            AgyAdd2 = string.Empty;
                        }
                        else
                        {
                            AgyAdd1 = AgyAdd2 = string.Empty;
                        }
                    }
                    else if (string.IsNullOrEmpty(AgyAdd2))
                    {
                        AgyAdd2 = string.Empty;
                    }

                    vendorDetails = new PdfPCell(new Phrase("               " + AgyAdd1, TableFont));//(new Phrase("               133 W Concho Ave, " + "Suite 301", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("                                 " + Add4, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("               " + AgyAdd2, TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.FixedHeight = 30f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase(" Phone: " + AgyPhone.Text, TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.FixedHeight = 30f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase(" Household ID:      " + BaseForm.BaseApplicationNo, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);


                    vendorDetails = new PdfPCell(new Phrase(" Client Name:        " + BaseForm.BaseApplicationName, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase(" Mailing Address: " + MailAddress, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase(" Resid. Address: " + AppAddress, TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);


                    vendorDetails = new PdfPCell(new Phrase("                                " + MailAddress1, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.FixedHeight = 30f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("                             " + AppAddress1, TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.FixedHeight = 30f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3")
                    {
                        vendorDetails = new PdfPCell(new Phrase(" Account Name:   " + CASESPM_SP_List[0].SPM_Bill_FName + " " + CASESPM_SP_List[0].SPM_Bill_LName, TblFontBold));
                    }
                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "4")
                    {
                        vendorDetails = new PdfPCell(new Phrase(" Account Name:   " + CASESPM_SP_List[0].SPM_Gas_Bill_FName + " " + CASESPM_SP_List[0].SPM_Gas_Bill_LName, TblFontBold));
                    }

                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER;
                    Maintable.AddCell(vendorDetails);


                    vendorDetails = new PdfPCell(new Phrase(" Account #:           " + strAccountNumber, TblFontBold));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.FixedHeight = 20f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.LEFT_BORDER + iTextSharp.text.Rectangle.RIGHT_BORDER + iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Maintable.AddCell(vendorDetails);

                    vendorDetails = new PdfPCell(new Phrase("", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.FixedHeight = 10f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.RIGHT_BORDER + iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Maintable.AddCell(vendorDetails);


                    List<CASEACTEntity> selCeapList = new List<CASEACTEntity>();
                    string VendrNo = string.Empty;
                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "3")
                    {
                        selCeapList = PropCaseactList.FindAll(u => u.Elec_Other == "E");
                        VendrNo = CASESPM_SP_List[0].SPM_Vendor;
                    }
                    if (gvApp.CurrentRow.Cells["gvCode"].Value.ToString() == "4")
                    {
                        selCeapList = PropCaseactList.FindAll(u => u.Elec_Other == "O");
                        VendrNo = CASESPM_SP_List[0].SPM_Gas_Vendor;
                    }

                    if (selCeapList.Count > 0 && BaseForm.BaseAgencyControlDetails.AgyShortName == "CCSCT")
                    {
                        selCeapList = selCeapList.OrderBy(u => Convert.ToDateTime(u.ACT_Date)).ToList();
                        string Msg = string.Empty;

                        DateTime InvDate = Convert.ToDateTime(selCeapList[0].ACT_Date.Trim());

                        DateTime InvDt45 = InvDate.AddDays(45);

                        Msg = "A payment for $" + selCeapList[0].Cost.ToString() + " will be made on behalf of the client by " + LookupDataAccess.Getdate(InvDt45.ToShortDateString());

                        PdfPCell servDetails = new PdfPCell(new Phrase(Msg, TblFontBold));
                        servDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                        servDetails.Colspan = 2;
                        servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                        Maintable.AddCell(servDetails);
                    }


                    vendorDetails = new PdfPCell(new Phrase("", TableFont));
                    vendorDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    vendorDetails.Colspan = 2;
                    vendorDetails.FixedHeight = 20f;
                    vendorDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(vendorDetails);

                    //Service Details
                    List<CAMASTEntity> CA_Descriptions = _model.SPAdminData.Browse_CAMAST(null, null, null, null);

                    String serDesc = string.Empty;

                    PdfPTable servTable = new PdfPTable(3);
                    servTable.TotalWidth = 550f;
                    servTable.WidthPercentage = 100;
                    servTable.LockedWidth = true;
                    float[] widths = new float[] { 300f, 60f, 60f };
                    servTable.SetWidths(widths);
                    servTable.HorizontalAlignment = Element.ALIGN_CENTER;

                   

                    

                    foreach (CASEACTEntity servEntity in selCeapList)
                    {
                        if (!string.IsNullOrEmpty(servEntity.Cost))
                        {
                            serDesc = CA_Descriptions.Find(x => x.Code == servEntity.ACT_Code).Desc.ToString();

                            PdfPCell servDetails = new PdfPCell(new Phrase(serDesc, TblFontBold));
                            servDetails.HorizontalAlignment = Element.ALIGN_LEFT;

                            servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            servTable.AddCell(servDetails);

                            servDetails = new PdfPCell(new Phrase(servEntity.ACT_Date == "" ? "" : LookupDataAccess.Getdate(servEntity.ACT_Date), TblFontBold));
                            servDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                            servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            servTable.AddCell(servDetails);

                            servDetails = new PdfPCell(new Phrase(servEntity.Cost, TblFontBold));
                            servDetails.HorizontalAlignment = Element.ALIGN_RIGHT;
                            servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            servTable.AddCell(servDetails);
                        }
                    }

                    if(PropCaseactList.Count>0)
                    {
                        List<CASEACTEntity> ArrearList = PropCaseactList.FindAll(u => u.Bulk == "A" && u.Vendor_No==VendrNo && u.Elec_Other=="");
                        
                        if(ArrearList.Count>0) 
                        {
                            serDesc = CA_Descriptions.Find(x => x.Code == ArrearList[0].ACT_Code).Desc.ToString();

                            PdfPCell servDetails = new PdfPCell(new Phrase(serDesc, TblFontBold));
                            servDetails.HorizontalAlignment = Element.ALIGN_LEFT;

                            servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            servTable.AddCell(servDetails);

                            servDetails = new PdfPCell(new Phrase(ArrearList[0].ACT_Date == "" ? "" : LookupDataAccess.Getdate(ArrearList[0].ACT_Date), TblFontBold));
                            servDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                            servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            servTable.AddCell(servDetails);

                            servDetails = new PdfPCell(new Phrase(ArrearList[0].Cost, TblFontBold));
                            servDetails.HorizontalAlignment = Element.ALIGN_RIGHT;
                            servDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                            servTable.AddCell(servDetails);
                        }
                    }


                    PdfPCell printServ = new PdfPCell(servTable);
                    printServ.HorizontalAlignment = Element.ALIGN_LEFT;
                    printServ.Colspan = 2;
                    printServ.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(printServ);

                    printServ = new PdfPCell(new Phrase("", TableFont));
                    printServ.HorizontalAlignment = Element.ALIGN_LEFT;
                    printServ.Colspan = 2;
                    printServ.FixedHeight = 50f;
                    printServ.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(printServ);

                    //Signature
                    PdfPCell signDetails = new PdfPCell(new Phrase("", TblFontBold));
                    signDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    signDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase("", TableFont));
                    signDetails.HorizontalAlignment = Element.ALIGN_MIDDLE;
                    signDetails.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase("", TblFontBold));
                    signDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    signDetails.FixedHeight = 30f;
                    signDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase("Signature", TableFont));
                    signDetails.HorizontalAlignment = Element.ALIGN_CENTER;
                    signDetails.FixedHeight = 30f;
                    signDetails.Border = iTextSharp.text.Rectangle.TOP_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase(" I acknowledge the receipt of this voucher", TblFontBold));
                    signDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    signDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase("", TableFont));
                    signDetails.HorizontalAlignment = Element.ALIGN_MIDDLE;
                    signDetails.Border = iTextSharp.text.Rectangle.BOTTOM_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase("", TblFontBold));
                    signDetails.HorizontalAlignment = Element.ALIGN_LEFT;
                    signDetails.Border = iTextSharp.text.Rectangle.NO_BORDER;
                    Maintable.AddCell(signDetails);

                    signDetails = new PdfPCell(new Phrase("Signature & Date", TableFont));
                    signDetails.HorizontalAlignment = Element.ALIGN_CENTER;
                    signDetails.Border = iTextSharp.text.Rectangle.TOP_BORDER;
                    Maintable.AddCell(signDetails);

                    document.Add(Maintable);

                }
                catch (Exception ex) { document.Add(new iTextSharp.text.Paragraph("Aborted due to Exception!!! ")); }


                document.Close();
                fs.Close();
                fs.Dispose();
                //AlertBox.Show("Report Generated Successfullly");

                SendEmail();

                if (BaseForm.BaseAgencyControlDetails.ReportSwitch.ToUpper() == "Y")
                {
                    PdfViewerNewForm objfrm = new PdfViewerNewForm(PdfName);
                    //objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }
                else
                {
                    FrmViewer objfrm = new FrmViewer(PdfName);
                    //objfrm.FormClosed += new FormClosedEventHandler(On_Delete_PDF_File);
                    objfrm.StartPosition = FormStartPosition.CenterScreen;
                    objfrm.ShowDialog();
                }


            }
        }

        #endregion

    }
}